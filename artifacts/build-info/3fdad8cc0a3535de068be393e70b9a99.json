{"id":"3fdad8cc0a3535de068be393e70b9a99","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport {ERC721Utils} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {ERC165Upgradeable} from \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport {IERC721Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\n    struct ERC721Storage {\n        // Token name\n        string _name;\n\n        // Token symbol\n        string _symbol;\n\n        mapping(uint256 tokenId => address) _owners;\n\n        mapping(address owner => uint256) _balances;\n\n        mapping(uint256 tokenId => address) _tokenApprovals;\n\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC721\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\n\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\n        assembly {\n            $.slot := ERC721StorageLocation\n        }\n    }\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC721Storage storage $ = _getERC721Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        ERC721Storage storage $ = _getERC721Storage();\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return $._balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        ERC721Storage storage $ = _getERC721Storage();\n        return $._tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if:\n     * - `spender` does not have approval from `owner` for `tokenId`.\n     * - `spender` does not have approval to manage all of `owner`'s assets.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        ERC721Storage storage $ = _getERC721Storage();\n        unchecked {\n            $._balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        ERC721Storage storage $ = _getERC721Storage();\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                $._balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                $._balances[to] += 1;\n            }\n        }\n\n        $._owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        ERC721Storage storage $ = _getERC721Storage();\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        $._tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        ERC721Storage storage $ = _getERC721Storage();\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        $._operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC-721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC-721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721Receiver} from \"../IERC721Receiver.sol\";\nimport {IERC721Errors} from \"../../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Library that provide common ERC-721 utility functions.\n *\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\n *\n * _Available since v5.1._\n */\nlibrary ERC721Utils {\n    /**\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\n     *\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\n     * the transfer.\n     */\n    function checkOnERC721Received(\n        address operator,\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    // Token rejected\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-IERC721Receiver implementer\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\n                } else {\n                    assembly (\"memory-safe\") {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 exp;\n        unchecked {\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\n            value >>= exp;\n            result += exp;\n\n            result += SafeCast.toUint(value > 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 isGt;\n        unchecked {\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= isGt * 128;\n            result += isGt * 16;\n\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= isGt * 64;\n            result += isGt * 8;\n\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= isGt * 32;\n            result += isGt * 4;\n\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= isGt * 16;\n            result += isGt * 2;\n\n            result += SafeCast.toUint(value > (1 << 8) - 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // Formula from the \"Bit Twiddling Hacks\" by Sean Eron Anderson.\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\n            // taking advantage of the most significant (or \"sign\" bit) in two's complement representation.\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\n            int256 mask = n >> 255;\n\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\n            return uint256((n + mask) ^ mask);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Panic.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            assembly (\"memory-safe\") {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                assembly (\"memory-safe\") {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n     * representation, according to EIP-55.\n     */\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\n        bytes memory buffer = bytes(toHexString(addr));\n\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\n        uint256 hashValue;\n        assembly (\"memory-safe\") {\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\n        }\n\n        for (uint256 i = 41; i > 1; --i) {\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\n                // case shift by xoring with 0x20\n                buffer[i] ^= 0x20;\n            }\n            hashValue >>= 4;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/Base.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"./interface/IConfig.sol\";\n\nabstract contract Base is ContextUpgradeable, ReentrancyGuardUpgradeable {\n    /// @notice The precision of the fee\n    uint64 public constant FEE_PRECISION = 1e6;\n\n    /// @notice The default admin role\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /// @notice The role for the tmelock\n    bytes32 public constant TIMELOCK_ROLE = keccak256(\"TIMELOCK_ROLE\");\n    \n    /// @notice The role for the admin\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    /// @notice The role for the backend\n    bytes32 public constant BACKEND_ROLE = keccak256(\"BACKEND_ROLE\");\n\n    /// @notice sveMetis vault initial deposit amount\n    uint256 public constant INITIAL_DEPOSIT_AMOUNT = 1 ether;\n\n    /// @notice holds the address of the config contract\n    IConfig public config;\n\n    address private internalCalling;\n\n\n    modifier onlyRole(bytes32 role) {\n        if (!config.hasRole(role, _msgSender())) {\n          _checkRole(role);\n        }  \n        _;\n    }\n    \n    modifier onlyBackend() {\n        _checkRole(BACKEND_ROLE);\n        _;\n    }\n\n    modifier internalOnly(address internalAddress) {\n        require(_msgSender() == internalAddress, \"internal only\");\n        internalCalling = internalAddress;\n        _;\n        internalCalling = address(0);\n    }\n\n    /// @notice Initializes the contract with the config contract address\n    /// @param _config The address of the config contract\n    function __Base_init(address _config) internal onlyInitializing {\n        config = IConfig(_config);\n        __ReentrancyGuard_init();\n        __Context_init();\n    }\n\n  /// @dev Revert with a standard message if `_msgSender()` is missing `role`.\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!config.hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * reject Metis transfer\n     */\n    receive() external payable {\n        revert(\"Base: not support Metis transfer\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[30] private __gap;\n}\n"},"contracts/interface/IConfig.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IConfig {\n    function initialize() external;\n\n    function veMetis() external view returns (address);\n\n    function veMetisMinter() external view returns (address);\n\n    function sveMetis() external view returns (address);\n\n    function rewardDispatcher() external view returns (address);\n\n    function metis() external view returns (address);\n\n    function bridge() external view returns (address);\n\n    function l1Dealer() external view returns (address);\n\n    function protocolTreasury() external view returns (address);\n\n    function protocolTreasuryRatio() external view returns (uint32);\n\n    function redemptionQueue() external view returns (address);\n\n    function queueLengthSecs() external view returns (uint64);\n\n    function setProtocolTreasury(address _protocolTreasury) external;\n    \n\n    function setProtocolTreasuryRatio(uint32 _protocolTreasuryRatio) external;\n    function setQueueLengthSecs(uint64 _queueLengthSecs) external;\n\n    function hasRole(\n        bytes32 role,\n        address account\n    ) external view returns (bool);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function renounceRole(bytes32 role, address account) external;\n\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n}\n"},"contracts/interface/IVeMetis.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ninterface IVeMetis is IERC20 {\n    function mint(address user, uint256 amount) external;\n    function burn(address user, uint256 amount) external;\n}\n"},"contracts/RedemptionQueue.sol":{"content":"\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"./Base.sol\";\nimport \"./interface/IVeMetis.sol\";\n\n/// @title RedemptionQueue\n/// @notice RedemptionQueue is the contract that manages the redemption queue for veMetis\ncontract RedemptionQueue is Initializable, ERC721Upgradeable, Base {\n    using SafeERC20 for IERC20;\n    using SafeCast for *;\n\n    /// @notice The ```RedemptionQueueItem``` struct provides metadata information about each Nft\n    /// @param hasBeenRedeemed boolean for whether the NFT has been redeemed\n    /// @param amount How much Metis is claimable\n    /// @param maturity Unix timestamp when they can claim their Metis\n    struct RedemptionQueueItem {\n        bool hasBeenRedeemed;\n        uint64 maturity;\n        uint120 amount;\n    }\n\n    /// @param etherLiabilities How much Metis would need to be paid out if every NFT holder could claim immediately\n    /// @param unclaimedFees Earned fees that the protocol has not collected yet\n    struct RedemptionQueueAccounting {\n        uint128 etherLiabilities;\n        uint128 unclaimedFees;\n    }\n\n    uint64 nextNftId;\n\n    /// @notice Accounting redemption queue\n    RedemptionQueueAccounting public redemptionQueueAccounting;\n\n    /// @notice Information about a user's redemption ticket NFT\n    mapping(uint256 nftId => RedemptionQueueItem) public nftInformation;\n\n    IERC20 public veMetis;\n    IERC20 public METIS;\n    \n    /// @notice When someone redeems their NFT for Metis\n    /// @param nftId the if of the nft redeemed\n    /// @param sender the msg.sender\n    /// @param recipient the recipient of the ether\n    /// @param amountOut the amount of ether sent to the recipient\n    event RedeemRedemptionTicketNft(uint256 indexed nftId, address indexed sender, address indexed recipient,  uint120 amountOut);\n\n    /// @notice When someone enters the redemption queue\n    /// @param nftId The ID of the NFT\n    /// @param sender The address of the msg.sender, who is redeeming veMetis\n    /// @param recipient The recipient of the NFT\n    /// @param amountVeMetisRedeemed The amount of veMetis redeemed\n    event EnterRedemptionQueue(\n        uint256 indexed nftId,\n        address indexed sender,\n        address indexed recipient,\n        uint256 amountVeMetisRedeemed,\n        uint256 maturityTimestamp\n    );\n\n    function initialize(address _config) initializer public {\n        __Base_init(_config);\n        __ERC721_init(\"veMetisRedemptionTicket\", \"veMetis Redemption Ticket\");\n        METIS = IERC20(config.metis());\n        veMetis = IERC20(config.veMetis());\n    }\n\n    // =============================================================================================\n    // Configurations / Privileged functions\n    // =============================================================================================\n\n    // =============================================================================================\n    // Queue Functions\n    // =============================================================================================\n\n    /// @notice Enter the queue for redeeming veMetis 1-to-1. Must approve first. Internal only so payor can be set\n    /// @notice Will generate a veMetisRedemptionTicket NFT that can be redeemed for the actual Metis later.\n    /// @param _recipient Recipient of the NFT. Must be ERC721 compatible if a contract\n    /// @param _amountToRedeem Amount of veMetis to redeem\n    /// @param _nftId The ID of the veMetisRedemptionTicket NFT\n    /// @dev Must call approve/permit on veMetis contract prior to this call\n    function _enterRedemptionQueueCore(address _recipient, uint120 _amountToRedeem) internal returns (uint256 _nftId) {\n        // Calculations: maturity timestamp\n        uint64 _maturityTimestamp = uint64(block.timestamp) + config.queueLengthSecs();\n\n        // Effects: Initialize the redemption ticket NFT information\n        nftInformation[nextNftId] = RedemptionQueueItem({\n            amount: _amountToRedeem,\n            maturity: _maturityTimestamp,\n            hasBeenRedeemed: false\n        });\n\n        // Effects: Mint the redemption ticket NFT. Make sure the recipient supports ERC721.\n        _safeMint({ to: _recipient, tokenId: nextNftId });\n\n        // Emit here, before the state change\n        _nftId = nextNftId;\n        emit EnterRedemptionQueue({\n            nftId: _nftId,\n            sender: msg.sender,\n            recipient: _recipient,\n            amountVeMetisRedeemed: _amountToRedeem,\n            maturityTimestamp: _maturityTimestamp\n        });\n\n        // Calculations: Increment the autoincrement\n        ++nextNftId;\n    }\n\n    /// @notice Enter the queue for redeeming veMetis 1-to-1. Must approve or permit first.\n    /// @notice Will generate a veMetisRedemptionTicket NFT that can be redeemed for the actual Metis later.\n    /// @param _recipient Recipient of the NFT. Must be ERC721 compatible if a contract\n    /// @param _amountToRedeem Amount of veMetis to redeem\n    /// @param _nftId The ID of the veMetisRedemptionTicket NFT\n    /// @dev Must call approve/permit on veMetis contract prior to this call\n    function enterRedemptionQueue(address _recipient, uint120 _amountToRedeem) public nonReentrant returns (uint256 _nftId) {\n        require(_recipient != address(0), \"RedemptionQueue: zero address\");\n        require(_amountToRedeem > 0, \"RedemptionQueue: amount is zero\");\n\n        // Do all of the NFT-generating and accounting logic\n        _nftId = _enterRedemptionQueueCore(_recipient, _amountToRedeem);\n\n        // Interactions: Transfer veMetis in from the sender\n        veMetis.safeTransferFrom({ from: msg.sender, to: address(this), value: _amountToRedeem });\n    }\n\n\n    /// @notice Redeems a veMetisRedemptionTicket NFT for Metis. (Pre-Metis send)\n    /// @param _nftId The ID of the NFT\n    /// @return _redemptionQueueItem The RedemptionQueueItem\n    function _redeemRedemptionTicketNftPre(uint256 _nftId) internal returns (RedemptionQueueItem memory _redemptionQueueItem) {\n        // Checks: ensure proper nft ownership\n        if (!_isAuthorized({owner:ownerOf(_nftId), spender: msg.sender, tokenId: _nftId })) revert Erc721CallerNotOwnerOrApproved();\n\n        // Get queue information\n        _redemptionQueueItem = nftInformation[_nftId];\n\n        // Checks: has been redeemed already\n        if (_redemptionQueueItem.hasBeenRedeemed) {\n            revert AlreadyRedeemed();\n        }\n\n        // Checks: Make sure maturity was reached\n        if (block.timestamp < _redemptionQueueItem.maturity) {\n            revert NotMatureYet({ currentTime: block.timestamp, maturity: _redemptionQueueItem.maturity });\n        }\n\n        // Effects: burn the Nft\n        _burn(_nftId);\n    \n        // Effects: Mark nft as redeemed\n        nftInformation[_nftId].hasBeenRedeemed = true;\n\n        // Effects: Burn veMetis to match the amount of ether sent to user 1:1          \n        IVeMetis(config.veMetis()).burn(address(this), _redemptionQueueItem.amount);\n    }\n\n    /// @notice Redeems a veMetisRedemptionTicket NFT for Metis. Must have reached the maturity date first.\n    /// @param _nftId The ID of the NFT\n    /// @param _recipient The recipient of the redeemed Metis\n    function redeemRedemptionTicketNft(uint256 _nftId, address _recipient) external virtual nonReentrant {\n        require(_recipient != address(0), \"RedemptionQueue: zero address\");\n\n        // Do everything except sending out the Metis back to the _recipient\n        RedemptionQueueItem memory _redemptionQueueItem = _redeemRedemptionTicketNftPre(_nftId);\n\n        // Interactions: Transfer Metis to recipient\n        METIS.safeTransfer(_recipient, _redemptionQueueItem.amount);\n\n        emit RedeemRedemptionTicketNft({\n            nftId: _nftId,\n            sender: msg.sender,\n            recipient: _recipient,\n            amountOut: _redemptionQueueItem.amount\n        });\n    }\n\n    function getNftId() external view returns (uint64) {\n        return nextNftId;\n    }\n\n    function getNftInformation(uint256 _nftId) external view returns (RedemptionQueueItem memory) {\n        return nftInformation[_nftId];\n    }\n    // ====================================\n    // Errors\n    // ====================================\n\n    /// @notice ERC721: caller is not token owner or approved\n    error Erc721CallerNotOwnerOrApproved();\n\n    /// @notice When timelock/operator tries collecting more fees than they are due\n    /// @param collectAmount How much fee the ounsender is trying to collect\n    /// @param accruedAmount How much fees are actually collectable\n    error ExceedsCollectedFees(uint128 collectAmount, uint128 accruedAmount);\n\n    /// @notice NFT is not mature enough to redeem yet\n    /// @param currentTime Current time.\n    /// @param maturity Time of maturity\n    error NotMatureYet(uint256 currentTime, uint64 maturity);\n\n    /// @notice Already reduced maturity\n    error AlreadyReducedMaturity();\n    \n    /// @notice already redeemed\n    error AlreadyRedeemed();\n\n    function getMetisAddress()public view returns (address){\n        return address(METIS);\n    }\n}"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"Initializable":[253]},"id":254,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:0"},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"139:2209:0","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":253,"linearizedBaseContracts":[253],"name":"Initializable","nameLocation":"2367:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Initializable.InitializableStorage","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"2387:293:0","text":" @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"},"id":10,"members":[{"constant":false,"id":6,"mutability":"mutable","name":"_initialized","nameLocation":"2820:12:0","nodeType":"VariableDeclaration","scope":10,"src":"2813:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5,"name":"uint64","nodeType":"ElementaryTypeName","src":"2813:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":9,"mutability":"mutable","name":"_initializing","nameLocation":"2955:13:0","nodeType":"VariableDeclaration","scope":10,"src":"2950:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8,"name":"bool","nodeType":"ElementaryTypeName","src":"2950:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"InitializableStorage","nameLocation":"2692:20:0","nodeType":"StructDefinition","scope":253,"src":"2685:290:0","visibility":"public"},{"constant":true,"id":13,"mutability":"constant","name":"INITIALIZABLE_STORAGE","nameLocation":"3123:21:0","nodeType":"VariableDeclaration","scope":253,"src":"3098:115:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":11,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3098:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030","id":12,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:66:0","typeDescriptions":{"typeIdentifier":"t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1","typeString":"int_const 1089...(70 digits omitted)...9600"},"value":"0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"},"visibility":"private"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"3220:60:0","text":" @dev The contract is already initialized."},"errorSelector":"f92ee8a9","id":16,"name":"InvalidInitialization","nameLocation":"3291:21:0","nodeType":"ErrorDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"3312:2:0"},"src":"3285:30:0"},{"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"3321:57:0","text":" @dev The contract is not initializing."},"errorSelector":"d7e6bcf8","id":19,"name":"NotInitializing","nameLocation":"3389:15:0","nodeType":"ErrorDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"3404:2:0"},"src":"3383:24:0"},{"anonymous":false,"documentation":{"id":20,"nodeType":"StructuredDocumentation","src":"3413:90:0","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2","id":24,"name":"Initialized","nameLocation":"3514:11:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":22,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"3533:7:0","nodeType":"VariableDeclaration","scope":24,"src":"3526:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":21,"name":"uint64","nodeType":"ElementaryTypeName","src":"3526:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3525:16:0"},"src":"3508:34:0"},{"body":{"id":106,"nodeType":"Block","src":"4092:1081:0","statements":[{"assignments":[29],"declarations":[{"constant":false,"id":29,"mutability":"mutable","name":"$","nameLocation":"4187:1:0","nodeType":"VariableDeclaration","scope":106,"src":"4158:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":28,"nodeType":"UserDefinedTypeName","pathNode":{"id":27,"name":"InitializableStorage","nameLocations":["4158:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":10,"src":"4158:20:0"},"referencedDeclaration":10,"src":"4158:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":32,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":30,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4191:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":31,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4191:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4158:59:0"},{"assignments":[34],"declarations":[{"constant":false,"id":34,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"4284:14:0","nodeType":"VariableDeclaration","scope":106,"src":"4279:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":33,"name":"bool","nodeType":"ElementaryTypeName","src":"4279:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":38,"initialValue":{"id":37,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4301:16:0","subExpression":{"expression":{"id":35,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"4302:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":36,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4304:13:0","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":9,"src":"4302:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4279:38:0"},{"assignments":[40],"declarations":[{"constant":false,"id":40,"mutability":"mutable","name":"initialized","nameLocation":"4334:11:0","nodeType":"VariableDeclaration","scope":106,"src":"4327:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":39,"name":"uint64","nodeType":"ElementaryTypeName","src":"4327:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":43,"initialValue":{"expression":{"id":41,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"4348:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":42,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4350:12:0","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":6,"src":"4348:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"4327:35:0"},{"assignments":[45],"declarations":[{"constant":false,"id":45,"mutability":"mutable","name":"initialSetup","nameLocation":"4711:12:0","nodeType":"VariableDeclaration","scope":106,"src":"4706:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44,"name":"bool","nodeType":"ElementaryTypeName","src":"4706:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":51,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":50,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":46,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"4726:11:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":47,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4741:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4726:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":49,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"4746:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4726:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4706:54:0"},{"assignments":[53],"declarations":[{"constant":false,"id":53,"mutability":"mutable","name":"construction","nameLocation":"4775:12:0","nodeType":"VariableDeclaration","scope":106,"src":"4770:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":52,"name":"bool","nodeType":"ElementaryTypeName","src":"4770:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":66,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":54,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"4790:11:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":55,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4805:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4790:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":64,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":59,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4818:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$253","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$253","typeString":"contract Initializable"}],"id":58,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4810:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":57,"name":"address","nodeType":"ElementaryTypeName","src":"4810:7:0","typeDescriptions":{}}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4810:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":61,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4824:4:0","memberName":"code","nodeType":"MemberAccess","src":"4810:18:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4829:6:0","memberName":"length","nodeType":"MemberAccess","src":"4810:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4839:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4810:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4790:50:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4770:70:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":68,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4855:13:0","subExpression":{"id":67,"name":"initialSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"4856:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4872:13:0","subExpression":{"id":69,"name":"construction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"4873:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4855:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":76,"nodeType":"IfStatement","src":"4851:91:0","trueBody":{"id":75,"nodeType":"Block","src":"4887:55:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":72,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"4908:21:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4908:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":74,"nodeType":"RevertStatement","src":"4901:30:0"}]}},{"expression":{"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":77,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"4951:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":79,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4953:12:0","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":6,"src":"4951:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4968:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4951:18:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":82,"nodeType":"ExpressionStatement","src":"4951:18:0"},{"condition":{"id":83,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"4983:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":91,"nodeType":"IfStatement","src":"4979:67:0","trueBody":{"id":90,"nodeType":"Block","src":"4999:47:0","statements":[{"expression":{"id":88,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":84,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"5013:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":86,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5015:13:0","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":9,"src":"5013:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":87,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5031:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5013:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":89,"nodeType":"ExpressionStatement","src":"5013:22:0"}]}},{"id":92,"nodeType":"PlaceholderStatement","src":"5055:1:0"},{"condition":{"id":93,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"5070:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":105,"nodeType":"IfStatement","src":"5066:101:0","trueBody":{"id":104,"nodeType":"Block","src":"5086:81:0","statements":[{"expression":{"id":98,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":94,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"5100:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":96,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5102:13:0","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":9,"src":"5100:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5118:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5100:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":99,"nodeType":"ExpressionStatement","src":"5100:23:0"},{"eventCall":{"arguments":[{"hexValue":"31","id":101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5154:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":100,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"5142:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5142:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"EmitStatement","src":"5137:19:0"}]}}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"3548:516:0","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."},"id":107,"name":"initializer","nameLocation":"4078:11:0","nodeType":"ModifierDefinition","parameters":{"id":26,"nodeType":"ParameterList","parameters":[],"src":"4089:2:0"},"src":"4069:1104:0","virtual":false,"visibility":"internal"},{"body":{"id":153,"nodeType":"Block","src":"6291:392:0","statements":[{"assignments":[114],"declarations":[{"constant":false,"id":114,"mutability":"mutable","name":"$","nameLocation":"6386:1:0","nodeType":"VariableDeclaration","scope":153,"src":"6357:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":113,"nodeType":"UserDefinedTypeName","pathNode":{"id":112,"name":"InitializableStorage","nameLocations":["6357:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":10,"src":"6357:20:0"},"referencedDeclaration":10,"src":"6357:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":117,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":115,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"6390:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6357:59:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":118,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"6431:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6433:13:0","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":9,"src":"6431:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":120,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"6450:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":121,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6452:12:0","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":6,"src":"6450:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":122,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"6468:7:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6450:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6431:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":129,"nodeType":"IfStatement","src":"6427:105:0","trueBody":{"id":128,"nodeType":"Block","src":"6477:55:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":125,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"6498:21:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6498:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":127,"nodeType":"RevertStatement","src":"6491:30:0"}]}},{"expression":{"id":134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":130,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"6541:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":132,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6543:12:0","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":6,"src":"6541:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":133,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"6558:7:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6541:24:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":135,"nodeType":"ExpressionStatement","src":"6541:24:0"},{"expression":{"id":140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":136,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"6575:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":138,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6577:13:0","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":9,"src":"6575:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6593:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6575:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":141,"nodeType":"ExpressionStatement","src":"6575:22:0"},{"id":142,"nodeType":"PlaceholderStatement","src":"6607:1:0"},{"expression":{"id":147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":143,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"6618:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":145,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6620:13:0","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":9,"src":"6618:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6636:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6618:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":148,"nodeType":"ExpressionStatement","src":"6618:23:0"},{"eventCall":{"arguments":[{"id":150,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":149,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"6656:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6656:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":152,"nodeType":"EmitStatement","src":"6651:25:0"}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"5179:1068:0","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":154,"name":"reinitializer","nameLocation":"6261:13:0","nodeType":"ModifierDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"version","nameLocation":"6282:7:0","nodeType":"VariableDeclaration","scope":154,"src":"6275:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":109,"name":"uint64","nodeType":"ElementaryTypeName","src":"6275:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6274:16:0"},"src":"6252:431:0","virtual":false,"visibility":"internal"},{"body":{"id":161,"nodeType":"Block","src":"6921:48:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":157,"name":"_checkInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":175,"src":"6931:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6931:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":159,"nodeType":"ExpressionStatement","src":"6931:20:0"},{"id":160,"nodeType":"PlaceholderStatement","src":"6961:1:0"}]},"documentation":{"id":155,"nodeType":"StructuredDocumentation","src":"6689:199:0","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":162,"name":"onlyInitializing","nameLocation":"6902:16:0","nodeType":"ModifierDefinition","parameters":{"id":156,"nodeType":"ParameterList","parameters":[],"src":"6918:2:0"},"src":"6893:76:0","virtual":false,"visibility":"internal"},{"body":{"id":174,"nodeType":"Block","src":"7136:89:0","statements":[{"condition":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7150:18:0","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":166,"name":"_isInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"7151:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7151:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":173,"nodeType":"IfStatement","src":"7146:73:0","trueBody":{"id":172,"nodeType":"Block","src":"7170:49:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":169,"name":"NotInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"7191:15:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7191:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":171,"nodeType":"RevertStatement","src":"7184:24:0"}]}}]},"documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"6975:104:0","text":" @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."},"id":175,"implemented":true,"kind":"function","modifiers":[],"name":"_checkInitializing","nameLocation":"7093:18:0","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"7111:2:0"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[],"src":"7136:0:0"},"scope":253,"src":"7084:141:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":220,"nodeType":"Block","src":"7760:373:0","statements":[{"assignments":[181],"declarations":[{"constant":false,"id":181,"mutability":"mutable","name":"$","nameLocation":"7855:1:0","nodeType":"VariableDeclaration","scope":220,"src":"7826:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":180,"nodeType":"UserDefinedTypeName","pathNode":{"id":179,"name":"InitializableStorage","nameLocations":["7826:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":10,"src":"7826:20:0"},"referencedDeclaration":10,"src":"7826:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":184,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":182,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"7859:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7859:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7826:59:0"},{"condition":{"expression":{"id":185,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"7900:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":186,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7902:13:0","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":9,"src":"7900:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":191,"nodeType":"IfStatement","src":"7896:76:0","trueBody":{"id":190,"nodeType":"Block","src":"7917:55:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":187,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"7938:21:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7938:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":189,"nodeType":"RevertStatement","src":"7931:30:0"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":192,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"7985:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":193,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7987:12:0","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":6,"src":"7985:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8008:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":195,"name":"uint64","nodeType":"ElementaryTypeName","src":"8008:6:0","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":194,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8003:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8003:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8016:3:0","memberName":"max","nodeType":"MemberAccess","src":"8003:16:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7985:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":219,"nodeType":"IfStatement","src":"7981:146:0","trueBody":{"id":218,"nodeType":"Block","src":"8021:106:0","statements":[{"expression":{"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":200,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"8035:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8037:12:0","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":6,"src":"8035:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8057:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":204,"name":"uint64","nodeType":"ElementaryTypeName","src":"8057:6:0","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":203,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8052:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8052:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8065:3:0","memberName":"max","nodeType":"MemberAccess","src":"8052:16:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8035:33:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":209,"nodeType":"ExpressionStatement","src":"8035:33:0"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8104:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":212,"name":"uint64","nodeType":"ElementaryTypeName","src":"8104:6:0","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":211,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8099:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8099:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8112:3:0","memberName":"max","nodeType":"MemberAccess","src":"8099:16:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":210,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"8087:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8087:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":217,"nodeType":"EmitStatement","src":"8082:34:0"}]}}]},"documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"7231:475:0","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":221,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"7720:20:0","nodeType":"FunctionDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[],"src":"7740:2:0"},"returnParameters":{"id":178,"nodeType":"ParameterList","parameters":[],"src":"7760:0:0"},"scope":253,"src":"7711:422:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":231,"nodeType":"Block","src":"8308:63:0","statements":[{"expression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":227,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"8325:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8325:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8352:12:0","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":6,"src":"8325:39:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":226,"id":230,"nodeType":"Return","src":"8318:46:0"}]},"documentation":{"id":222,"nodeType":"StructuredDocumentation","src":"8139:99:0","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":232,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"8252:22:0","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[],"src":"8274:2:0"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":232,"src":"8300:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":224,"name":"uint64","nodeType":"ElementaryTypeName","src":"8300:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8299:8:0"},"scope":253,"src":"8243:128:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":242,"nodeType":"Block","src":"8543:64:0","statements":[{"expression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":238,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"8560:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8587:13:0","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":9,"src":"8560:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":237,"id":241,"nodeType":"Return","src":"8553:47:0"}]},"documentation":{"id":233,"nodeType":"StructuredDocumentation","src":"8377:105:0","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":243,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"8496:15:0","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[],"src":"8511:2:0"},"returnParameters":{"id":237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":243,"src":"8537:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":235,"name":"bool","nodeType":"ElementaryTypeName","src":"8537:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8536:6:0"},"scope":253,"src":"8487:120:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":251,"nodeType":"Block","src":"8827:80:0","statements":[{"AST":{"nodeType":"YulBlock","src":"8846:55:0","statements":[{"nodeType":"YulAssignment","src":"8860:31:0","value":{"name":"INITIALIZABLE_STORAGE","nodeType":"YulIdentifier","src":"8870:21:0"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"8860:6:0"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":248,"isOffset":false,"isSlot":true,"src":"8860:6:0","suffix":"slot","valueSize":1},{"declaration":13,"isOffset":false,"isSlot":false,"src":"8870:21:0","valueSize":1}],"id":250,"nodeType":"InlineAssembly","src":"8837:64:0"}]},"documentation":{"id":244,"nodeType":"StructuredDocumentation","src":"8613:67:0","text":" @dev Returns a pointer to the storage namespace."},"id":252,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializableStorage","nameLocation":"8746:24:0","nodeType":"FunctionDefinition","parameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"8770:2:0"},"returnParameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":248,"mutability":"mutable","name":"$","nameLocation":"8824:1:0","nodeType":"VariableDeclaration","scope":252,"src":"8795:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":247,"nodeType":"UserDefinedTypeName","pathNode":{"id":246,"name":"InitializableStorage","nameLocations":["8795:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":10,"src":"8795:20:0"},"referencedDeclaration":10,"src":"8795:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$10_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"src":"8794:32:0"},"scope":253,"src":"8737:170:0","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":254,"src":"2349:6560:0","usedErrors":[16,19],"usedEvents":[24]}],"src":"113:8797:0"},"id":0},"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1379],"ERC165Upgradeable":[1548],"ERC721Upgradeable":[1333],"ERC721Utils":[2504],"IERC165":[3169],"IERC721":[2381],"IERC721Errors":[1728],"IERC721Metadata":[2427],"Initializable":[253],"Strings":[3157]},"id":1334,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":255,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"@openzeppelin/contracts/token/ERC721/IERC721.sol","id":257,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":2382,"src":"133:73:1","symbolAliases":[{"foreign":{"id":256,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2381,"src":"141:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","id":259,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":2428,"src":"207:100:1","symbolAliases":[{"foreign":{"id":258,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"215:15:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol","file":"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol","id":261,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":2505,"src":"308:87:1","symbolAliases":[{"foreign":{"id":260,"name":"ERC721Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"316:11:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":263,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":1380,"src":"396:70:1","symbolAliases":[{"foreign":{"id":262,"name":"ContextUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"404:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":265,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":3158,"src":"467:66:1","symbolAliases":[{"foreign":{"id":264,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"475:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":267,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":3170,"src":"534:80:1","symbolAliases":[{"foreign":{"id":266,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"542:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../../utils/introspection/ERC165Upgradeable.sol","id":269,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":1549,"src":"615:82:1","symbolAliases":[{"foreign":{"id":268,"name":"ERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"623:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","id":271,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":1776,"src":"698:84:1","symbolAliases":[{"foreign":{"id":270,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"706:13:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":273,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":254,"src":"783:66:1","symbolAliases":[{"foreign":{"id":272,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"791:13:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":275,"name":"Initializable","nameLocations":["1138:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":253,"src":"1138:13:1"},"id":276,"nodeType":"InheritanceSpecifier","src":"1138:13:1"},{"baseName":{"id":277,"name":"ContextUpgradeable","nameLocations":["1153:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":1379,"src":"1153:18:1"},"id":278,"nodeType":"InheritanceSpecifier","src":"1153:18:1"},{"baseName":{"id":279,"name":"ERC165Upgradeable","nameLocations":["1173:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":1548,"src":"1173:17:1"},"id":280,"nodeType":"InheritanceSpecifier","src":"1173:17:1"},{"baseName":{"id":281,"name":"IERC721","nameLocations":["1192:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":2381,"src":"1192:7:1"},"id":282,"nodeType":"InheritanceSpecifier","src":"1192:7:1"},{"baseName":{"id":283,"name":"IERC721Metadata","nameLocations":["1201:15:1"],"nodeType":"IdentifierPath","referencedDeclaration":2427,"src":"1201:15:1"},"id":284,"nodeType":"InheritanceSpecifier","src":"1201:15:1"},{"baseName":{"id":285,"name":"IERC721Errors","nameLocations":["1218:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":1728,"src":"1218:13:1"},"id":286,"nodeType":"InheritanceSpecifier","src":"1218:13:1"}],"canonicalName":"ERC721Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"851:247:1","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1333,"linearizedBaseContracts":[1333,1728,2427,2381,1548,3169,1379,253],"name":"ERC721Upgradeable","nameLocation":"1117:17:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":289,"libraryName":{"id":287,"name":"Strings","nameLocations":["1244:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":3157,"src":"1244:7:1"},"nodeType":"UsingForDirective","src":"1238:26:1","typeName":{"id":288,"name":"uint256","nodeType":"ElementaryTypeName","src":"1256:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"ERC721Upgradeable.ERC721Storage","documentation":{"id":290,"nodeType":"StructuredDocumentation","src":"1270:64:1","text":"@custom:storage-location erc7201:openzeppelin.storage.ERC721"},"id":313,"members":[{"constant":false,"id":292,"mutability":"mutable","name":"_name","nameLocation":"1399:5:1","nodeType":"VariableDeclaration","scope":313,"src":"1392:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":291,"name":"string","nodeType":"ElementaryTypeName","src":"1392:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":294,"mutability":"mutable","name":"_symbol","nameLocation":"1446:7:1","nodeType":"VariableDeclaration","scope":313,"src":"1439:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":293,"name":"string","nodeType":"ElementaryTypeName","src":"1439:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":298,"mutability":"mutable","name":"_owners","nameLocation":"1500:7:1","nodeType":"VariableDeclaration","scope":313,"src":"1464:43:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":297,"keyName":"tokenId","keyNameLocation":"1480:7:1","keyType":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"1472:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1464:35:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":302,"mutability":"mutable","name":"_balances","nameLocation":"1552:9:1","nodeType":"VariableDeclaration","scope":313,"src":"1518:43:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":301,"keyName":"owner","keyNameLocation":"1534:5:1","keyType":{"id":299,"name":"address","nodeType":"ElementaryTypeName","src":"1526:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1518:33:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"1543:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1608:15:1","nodeType":"VariableDeclaration","scope":313,"src":"1572:51:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":305,"keyName":"tokenId","keyNameLocation":"1588:7:1","keyType":{"id":303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1580:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1572:35:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":304,"name":"address","nodeType":"ElementaryTypeName","src":"1599:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":312,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1694:18:1","nodeType":"VariableDeclaration","scope":313,"src":"1634:78:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":311,"keyName":"owner","keyNameLocation":"1650:5:1","keyType":{"id":307,"name":"address","nodeType":"ElementaryTypeName","src":"1642:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1634:59:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":310,"keyName":"operator","keyNameLocation":"1675:8:1","keyType":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"1667:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1659:33:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":309,"name":"bool","nodeType":"ElementaryTypeName","src":"1687:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"ERC721Storage","nameLocation":"1346:13:1","nodeType":"StructDefinition","scope":1333,"src":"1339:380:1","visibility":"public"},{"constant":true,"id":316,"mutability":"constant","name":"ERC721StorageLocation","nameLocation":"1860:21:1","nodeType":"VariableDeclaration","scope":1333,"src":"1835:115:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1835:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307838306262326236333863633230626334643061363064363639343066336162346130306331643762333133343937636138326662306234616230303739333030","id":315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1884:66:1","typeDescriptions":{"typeIdentifier":"t_rational_58226744478722834339948329933988999792353370511964151963072532422914231210752_by_1","typeString":"int_const 5822...(69 digits omitted)...0752"},"value":"0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300"},"visibility":"private"},{"body":{"id":323,"nodeType":"Block","src":"2033:80:1","statements":[{"AST":{"nodeType":"YulBlock","src":"2052:55:1","statements":[{"nodeType":"YulAssignment","src":"2066:31:1","value":{"name":"ERC721StorageLocation","nodeType":"YulIdentifier","src":"2076:21:1"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"2066:6:1"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":320,"isOffset":false,"isSlot":true,"src":"2066:6:1","suffix":"slot","valueSize":1},{"declaration":316,"isOffset":false,"isSlot":false,"src":"2076:21:1","valueSize":1}],"id":322,"nodeType":"InlineAssembly","src":"2043:64:1"}]},"id":324,"implemented":true,"kind":"function","modifiers":[],"name":"_getERC721Storage","nameLocation":"1966:17:1","nodeType":"FunctionDefinition","parameters":{"id":317,"nodeType":"ParameterList","parameters":[],"src":"1983:2:1"},"returnParameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"mutability":"mutable","name":"$","nameLocation":"2030:1:1","nodeType":"VariableDeclaration","scope":324,"src":"2008:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":319,"nodeType":"UserDefinedTypeName","pathNode":{"id":318,"name":"ERC721Storage","nameLocations":["2008:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"2008:13:1"},"referencedDeclaration":313,"src":"2008:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"src":"2007:25:1"},"scope":1333,"src":"1957:156:1","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":339,"nodeType":"Block","src":"2325:56:1","statements":[{"expression":{"arguments":[{"id":335,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2359:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":336,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"2366:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":334,"name":"__ERC721_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"2335:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":338,"nodeType":"ExpressionStatement","src":"2335:39:1"}]},"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"2119:108:1","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":340,"implemented":true,"kind":"function","modifiers":[{"id":332,"kind":"modifierInvocation","modifierName":{"id":331,"name":"onlyInitializing","nameLocations":["2308:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"2308:16:1"},"nodeType":"ModifierInvocation","src":"2308:16:1"}],"name":"__ERC721_init","nameLocation":"2241:13:1","nodeType":"FunctionDefinition","parameters":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"name_","nameLocation":"2269:5:1","nodeType":"VariableDeclaration","scope":340,"src":"2255:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":326,"name":"string","nodeType":"ElementaryTypeName","src":"2255:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":329,"mutability":"mutable","name":"symbol_","nameLocation":"2290:7:1","nodeType":"VariableDeclaration","scope":340,"src":"2276:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":328,"name":"string","nodeType":"ElementaryTypeName","src":"2276:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2254:44:1"},"returnParameters":{"id":333,"nodeType":"ParameterList","parameters":[],"src":"2325:0:1"},"scope":1333,"src":"2232:149:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":367,"nodeType":"Block","src":"2490:116:1","statements":[{"assignments":[351],"declarations":[{"constant":false,"id":351,"mutability":"mutable","name":"$","nameLocation":"2522:1:1","nodeType":"VariableDeclaration","scope":367,"src":"2500:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":350,"nodeType":"UserDefinedTypeName","pathNode":{"id":349,"name":"ERC721Storage","nameLocations":["2500:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"2500:13:1"},"referencedDeclaration":313,"src":"2500:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":354,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":352,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"2526:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2526:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2500:45:1"},{"expression":{"id":359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":355,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"2555:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":357,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2557:5:1","memberName":"_name","nodeType":"MemberAccess","referencedDeclaration":292,"src":"2555:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":358,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"2565:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2555:15:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":360,"nodeType":"ExpressionStatement","src":"2555:15:1"},{"expression":{"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":361,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"2580:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":363,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2582:7:1","memberName":"_symbol","nodeType":"MemberAccess","referencedDeclaration":294,"src":"2580:9:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":364,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"2592:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2580:19:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":366,"nodeType":"ExpressionStatement","src":"2580:19:1"}]},"id":368,"implemented":true,"kind":"function","modifiers":[{"id":347,"kind":"modifierInvocation","modifierName":{"id":346,"name":"onlyInitializing","nameLocations":["2473:16:1"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"2473:16:1"},"nodeType":"ModifierInvocation","src":"2473:16:1"}],"name":"__ERC721_init_unchained","nameLocation":"2396:23:1","nodeType":"FunctionDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":342,"mutability":"mutable","name":"name_","nameLocation":"2434:5:1","nodeType":"VariableDeclaration","scope":368,"src":"2420:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":341,"name":"string","nodeType":"ElementaryTypeName","src":"2420:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":344,"mutability":"mutable","name":"symbol_","nameLocation":"2455:7:1","nodeType":"VariableDeclaration","scope":368,"src":"2441:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":343,"name":"string","nodeType":"ElementaryTypeName","src":"2441:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2419:44:1"},"returnParameters":{"id":348,"nodeType":"ParameterList","parameters":[],"src":"2490:0:1"},"scope":1333,"src":"2387:219:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1547,3168],"body":{"id":398,"nodeType":"Block","src":"2792:192:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":379,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"2821:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":381,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2381,"src":"2841:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2381_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$2381_$","typeString":"type(contract IERC721)"}],"id":380,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2836:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2836:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$2381","typeString":"type(contract IERC721)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2850:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"2836:25:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2821:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":385,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"2877:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":387,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"2897:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2427_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2427_$","typeString":"type(contract IERC721Metadata)"}],"id":386,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2892:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2892:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$2427","typeString":"type(contract IERC721Metadata)"}},"id":389,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2914:11:1","memberName":"interfaceId","nodeType":"MemberAccess","src":"2892:33:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2877:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2821:104:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":394,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"2965:11:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":392,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"2941:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Upgradeable_$1333_$","typeString":"type(contract super ERC721Upgradeable)"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2947:17:1","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"2941:23:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2941:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2821:156:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":378,"id":397,"nodeType":"Return","src":"2802:175:1"}]},"documentation":{"id":369,"nodeType":"StructuredDocumentation","src":"2612:56:1","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":399,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2682:17:1","nodeType":"FunctionDefinition","overrides":{"id":375,"nodeType":"OverrideSpecifier","overrides":[{"id":373,"name":"ERC165Upgradeable","nameLocations":["2749:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":1548,"src":"2749:17:1"},{"id":374,"name":"IERC165","nameLocations":["2768:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":3169,"src":"2768:7:1"}],"src":"2740:36:1"},"parameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"interfaceId","nameLocation":"2707:11:1","nodeType":"VariableDeclaration","scope":399,"src":"2700:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":370,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2700:6:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2699:20:1"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":399,"src":"2786:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":376,"name":"bool","nodeType":"ElementaryTypeName","src":"2786:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2785:6:1"},"scope":1333,"src":"2673:311:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2306],"body":{"id":433,"nodeType":"Block","src":"3115:193:1","statements":[{"assignments":[409],"declarations":[{"constant":false,"id":409,"mutability":"mutable","name":"$","nameLocation":"3147:1:1","nodeType":"VariableDeclaration","scope":433,"src":"3125:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":408,"nodeType":"UserDefinedTypeName","pathNode":{"id":407,"name":"ERC721Storage","nameLocations":["3125:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"3125:13:1"},"referencedDeclaration":313,"src":"3125:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":412,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":410,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"3151:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3151:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3125:45:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":413,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"3184:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3201:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3193:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":414,"name":"address","nodeType":"ElementaryTypeName","src":"3193:7:1","typeDescriptions":{}}},"id":417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3193:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3184:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":427,"nodeType":"IfStatement","src":"3180:87:1","trueBody":{"id":426,"nodeType":"Block","src":"3205:62:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3253:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3245:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":420,"name":"address","nodeType":"ElementaryTypeName","src":"3245:7:1","typeDescriptions":{}}},"id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3245:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":419,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"3226:18:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3226:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":425,"nodeType":"RevertStatement","src":"3219:37:1"}]}},{"expression":{"baseExpression":{"expression":{"id":428,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"3283:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":429,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3285:9:1","memberName":"_balances","nodeType":"MemberAccess","referencedDeclaration":302,"src":"3283:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":431,"indexExpression":{"id":430,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":402,"src":"3295:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3283:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":406,"id":432,"nodeType":"Return","src":"3276:25:1"}]},"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"2990:48:1","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":434,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3052:9:1","nodeType":"FunctionDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"owner","nameLocation":"3070:5:1","nodeType":"VariableDeclaration","scope":434,"src":"3062:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"3062:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3061:15:1"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":434,"src":"3106:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":404,"name":"uint256","nodeType":"ElementaryTypeName","src":"3106:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3105:9:1"},"scope":1333,"src":"3043:265:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2314],"body":{"id":446,"nodeType":"Block","src":"3437:46:1","statements":[{"expression":{"arguments":[{"id":443,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"3468:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":442,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"3454:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3454:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":441,"id":445,"nodeType":"Return","src":"3447:29:1"}]},"documentation":{"id":435,"nodeType":"StructuredDocumentation","src":"3314:46:1","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":447,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"3374:7:1","nodeType":"FunctionDefinition","parameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"tokenId","nameLocation":"3390:7:1","nodeType":"VariableDeclaration","scope":447,"src":"3382:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"3382:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3381:17:1"},"returnParameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":447,"src":"3428:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":439,"name":"address","nodeType":"ElementaryTypeName","src":"3428:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3427:9:1"},"scope":1333,"src":"3365:118:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2412],"body":{"id":462,"nodeType":"Block","src":"3605:86:1","statements":[{"assignments":[455],"declarations":[{"constant":false,"id":455,"mutability":"mutable","name":"$","nameLocation":"3637:1:1","nodeType":"VariableDeclaration","scope":462,"src":"3615:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":454,"nodeType":"UserDefinedTypeName","pathNode":{"id":453,"name":"ERC721Storage","nameLocations":["3615:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"3615:13:1"},"referencedDeclaration":313,"src":"3615:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":458,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":456,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"3641:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3641:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3615:45:1"},{"expression":{"expression":{"id":459,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"3677:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3679:5:1","memberName":"_name","nodeType":"MemberAccess","referencedDeclaration":292,"src":"3677:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":452,"id":461,"nodeType":"Return","src":"3670:14:1"}]},"documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"3489:51:1","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":463,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"3554:4:1","nodeType":"FunctionDefinition","parameters":{"id":449,"nodeType":"ParameterList","parameters":[],"src":"3558:2:1"},"returnParameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":463,"src":"3590:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":450,"name":"string","nodeType":"ElementaryTypeName","src":"3590:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3589:15:1"},"scope":1333,"src":"3545:146:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2418],"body":{"id":478,"nodeType":"Block","src":"3817:88:1","statements":[{"assignments":[471],"declarations":[{"constant":false,"id":471,"mutability":"mutable","name":"$","nameLocation":"3849:1:1","nodeType":"VariableDeclaration","scope":478,"src":"3827:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":470,"nodeType":"UserDefinedTypeName","pathNode":{"id":469,"name":"ERC721Storage","nameLocations":["3827:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"3827:13:1"},"referencedDeclaration":313,"src":"3827:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":474,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":472,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"3853:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3853:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3827:45:1"},{"expression":{"expression":{"id":475,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"3889:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":476,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3891:7:1","memberName":"_symbol","nodeType":"MemberAccess","referencedDeclaration":294,"src":"3889:9:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":468,"id":477,"nodeType":"Return","src":"3882:16:1"}]},"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"3697:53:1","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":479,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"3764:6:1","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[],"src":"3770:2:1"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":479,"src":"3802:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":466,"name":"string","nodeType":"ElementaryTypeName","src":"3802:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3801:15:1"},"scope":1333,"src":"3755:150:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2426],"body":{"id":514,"nodeType":"Block","src":"4050:176:1","statements":[{"expression":{"arguments":[{"id":488,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"4074:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":487,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"4060:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4060:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":490,"nodeType":"ExpressionStatement","src":"4060:22:1"},{"assignments":[492],"declarations":[{"constant":false,"id":492,"mutability":"mutable","name":"baseURI","nameLocation":"4107:7:1","nodeType":"VariableDeclaration","scope":514,"src":"4093:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":491,"name":"string","nodeType":"ElementaryTypeName","src":"4093:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":495,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":493,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"4117:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4117:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"4093:34:1"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":498,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"4150:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4144:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":496,"name":"bytes","nodeType":"ElementaryTypeName","src":"4144:5:1","typeDescriptions":{}}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4144:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4159:6:1","memberName":"length","nodeType":"MemberAccess","src":"4144:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4168:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4144:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4217:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4144:75:1","trueExpression":{"arguments":[{"id":506,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"4186:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":507,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"4195:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4203:8:1","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2905,"src":"4195:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4195:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4172:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":503,"name":"string","nodeType":"ElementaryTypeName","src":"4172:6:1","typeDescriptions":{}}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4179:6:1","memberName":"concat","nodeType":"MemberAccess","src":"4172:13:1","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4172:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":486,"id":513,"nodeType":"Return","src":"4137:82:1"}]},"documentation":{"id":480,"nodeType":"StructuredDocumentation","src":"3911:55:1","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":515,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"3980:8:1","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"mutability":"mutable","name":"tokenId","nameLocation":"3997:7:1","nodeType":"VariableDeclaration","scope":515,"src":"3989:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"3989:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3988:17:1"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":515,"src":"4035:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":484,"name":"string","nodeType":"ElementaryTypeName","src":"4035:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4034:15:1"},"scope":1333,"src":"3971:255:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":523,"nodeType":"Block","src":"4534:26:1","statements":[{"expression":{"hexValue":"","id":521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4551:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":520,"id":522,"nodeType":"Return","src":"4544:9:1"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"4232:231:1","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":524,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"4477:8:1","nodeType":"FunctionDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"4485:2:1"},"returnParameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":524,"src":"4519:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":518,"name":"string","nodeType":"ElementaryTypeName","src":"4519:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4518:15:1"},"scope":1333,"src":"4468:92:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2354],"body":{"id":539,"nodeType":"Block","src":"4678:52:1","statements":[{"expression":{"arguments":[{"id":533,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"4697:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":534,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"4701:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":535,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"4710:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4710:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":532,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1184,1258],"referencedDeclaration":1184,"src":"4688:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4688:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":538,"nodeType":"ExpressionStatement","src":"4688:35:1"}]},"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"4566:46:1","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":540,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4626:7:1","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"to","nameLocation":"4642:2:1","nodeType":"VariableDeclaration","scope":540,"src":"4634:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"4634:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":529,"mutability":"mutable","name":"tokenId","nameLocation":"4654:7:1","nodeType":"VariableDeclaration","scope":540,"src":"4646:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":528,"name":"uint256","nodeType":"ElementaryTypeName","src":"4646:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:29:1"},"returnParameters":{"id":531,"nodeType":"ParameterList","parameters":[],"src":"4678:0:1"},"scope":1333,"src":"4617:113:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2370],"body":{"id":556,"nodeType":"Block","src":"4867:78:1","statements":[{"expression":{"arguments":[{"id":549,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"4891:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":548,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"4877:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4877:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":551,"nodeType":"ExpressionStatement","src":"4877:22:1"},{"expression":{"arguments":[{"id":553,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"4930:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":552,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"4917:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4917:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":547,"id":555,"nodeType":"Return","src":"4910:28:1"}]},"documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"4736:50:1","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":557,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4800:11:1","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":543,"mutability":"mutable","name":"tokenId","nameLocation":"4820:7:1","nodeType":"VariableDeclaration","scope":557,"src":"4812:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":542,"name":"uint256","nodeType":"ElementaryTypeName","src":"4812:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4811:17:1"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":557,"src":"4858:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":545,"name":"address","nodeType":"ElementaryTypeName","src":"4858:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4857:9:1"},"scope":1333,"src":"4791:154:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2362],"body":{"id":572,"nodeType":"Block","src":"5087:69:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":566,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"5116:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5116:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":568,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"5130:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":569,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"5140:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":565,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"5097:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5097:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":571,"nodeType":"ExpressionStatement","src":"5097:52:1"}]},"documentation":{"id":558,"nodeType":"StructuredDocumentation","src":"4951:56:1","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":573,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"5021:17:1","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"operator","nameLocation":"5047:8:1","nodeType":"VariableDeclaration","scope":573,"src":"5039:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":559,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"approved","nameLocation":"5062:8:1","nodeType":"VariableDeclaration","scope":573,"src":"5057:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":561,"name":"bool","nodeType":"ElementaryTypeName","src":"5057:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5038:33:1"},"returnParameters":{"id":564,"nodeType":"ParameterList","parameters":[],"src":"5087:0:1"},"scope":1333,"src":"5012:144:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2380],"body":{"id":596,"nodeType":"Block","src":"5316:116:1","statements":[{"assignments":[585],"declarations":[{"constant":false,"id":585,"mutability":"mutable","name":"$","nameLocation":"5348:1:1","nodeType":"VariableDeclaration","scope":596,"src":"5326:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":584,"nodeType":"UserDefinedTypeName","pathNode":{"id":583,"name":"ERC721Storage","nameLocations":["5326:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"5326:13:1"},"referencedDeclaration":313,"src":"5326:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":588,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":586,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"5352:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5352:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"5326:45:1"},{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":589,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"5388:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":590,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5390:18:1","memberName":"_operatorApprovals","nodeType":"MemberAccess","referencedDeclaration":312,"src":"5388:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":592,"indexExpression":{"id":591,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"5409:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5388:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":594,"indexExpression":{"id":593,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"5416:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5388:37:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":582,"id":595,"nodeType":"Return","src":"5381:44:1"}]},"documentation":{"id":574,"nodeType":"StructuredDocumentation","src":"5162:55:1","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":597,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5231:16:1","nodeType":"FunctionDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"owner","nameLocation":"5256:5:1","nodeType":"VariableDeclaration","scope":597,"src":"5248:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":575,"name":"address","nodeType":"ElementaryTypeName","src":"5248:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"operator","nameLocation":"5271:8:1","nodeType":"VariableDeclaration","scope":597,"src":"5263:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":577,"name":"address","nodeType":"ElementaryTypeName","src":"5263:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5247:33:1"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":597,"src":"5310:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":580,"name":"bool","nodeType":"ElementaryTypeName","src":"5310:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5309:6:1"},"scope":1333,"src":"5222:210:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2346],"body":{"id":642,"nodeType":"Block","src":"5574:498:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":607,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"5588:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5602:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5594:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"5594:7:1","typeDescriptions":{}}},"id":611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5594:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5588:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":621,"nodeType":"IfStatement","src":"5584:87:1","trueBody":{"id":620,"nodeType":"Block","src":"5606:65:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5657:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5649:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":614,"name":"address","nodeType":"ElementaryTypeName","src":"5649:7:1","typeDescriptions":{}}},"id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5649:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":613,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"5627:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5627:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":619,"nodeType":"RevertStatement","src":"5620:40:1"}]}},{"assignments":[623],"declarations":[{"constant":false,"id":623,"mutability":"mutable","name":"previousOwner","nameLocation":"5897:13:1","nodeType":"VariableDeclaration","scope":642,"src":"5889:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"5889:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":630,"initialValue":{"arguments":[{"id":625,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"5921:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":626,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"5925:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":627,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"5934:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5934:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":624,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"5913:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5913:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5889:58:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":631,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"5961:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":632,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"5978:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5961:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":641,"nodeType":"IfStatement","src":"5957:109:1","trueBody":{"id":640,"nodeType":"Block","src":"5984:82:1","statements":[{"errorCall":{"arguments":[{"id":635,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"6026:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":636,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"6032:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":637,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"6041:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":634,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"6005:20:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6005:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":639,"nodeType":"RevertStatement","src":"5998:57:1"}]}}]},"documentation":{"id":598,"nodeType":"StructuredDocumentation","src":"5438:51:1","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":643,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5503:12:1","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":600,"mutability":"mutable","name":"from","nameLocation":"5524:4:1","nodeType":"VariableDeclaration","scope":643,"src":"5516:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":599,"name":"address","nodeType":"ElementaryTypeName","src":"5516:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":602,"mutability":"mutable","name":"to","nameLocation":"5538:2:1","nodeType":"VariableDeclaration","scope":643,"src":"5530:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":601,"name":"address","nodeType":"ElementaryTypeName","src":"5530:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":604,"mutability":"mutable","name":"tokenId","nameLocation":"5550:7:1","nodeType":"VariableDeclaration","scope":643,"src":"5542:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"5542:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5515:43:1"},"returnParameters":{"id":606,"nodeType":"ParameterList","parameters":[],"src":"5574:0:1"},"scope":1333,"src":"5494:578:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2336],"body":{"id":660,"nodeType":"Block","src":"6214:56:1","statements":[{"expression":{"arguments":[{"id":654,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"6241:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":655,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"6247:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"6251:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6260:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":653,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[661,691],"referencedDeclaration":691,"src":"6224:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6224:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":659,"nodeType":"ExpressionStatement","src":"6224:39:1"}]},"documentation":{"id":644,"nodeType":"StructuredDocumentation","src":"6078:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":661,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"6147:16:1","nodeType":"FunctionDefinition","parameters":{"id":651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":646,"mutability":"mutable","name":"from","nameLocation":"6172:4:1","nodeType":"VariableDeclaration","scope":661,"src":"6164:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":645,"name":"address","nodeType":"ElementaryTypeName","src":"6164:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":648,"mutability":"mutable","name":"to","nameLocation":"6186:2:1","nodeType":"VariableDeclaration","scope":661,"src":"6178:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":647,"name":"address","nodeType":"ElementaryTypeName","src":"6178:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":650,"mutability":"mutable","name":"tokenId","nameLocation":"6198:7:1","nodeType":"VariableDeclaration","scope":661,"src":"6190:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":649,"name":"uint256","nodeType":"ElementaryTypeName","src":"6190:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6163:43:1"},"returnParameters":{"id":652,"nodeType":"ParameterList","parameters":[],"src":"6214:0:1"},"scope":1333,"src":"6138:132:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2326],"body":{"id":690,"nodeType":"Block","src":"6439:130:1","statements":[{"expression":{"arguments":[{"id":674,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"6462:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":675,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"6468:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":676,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"6472:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":673,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"6449:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6449:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":678,"nodeType":"ExpressionStatement","src":"6449:31:1"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":682,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"6524:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6524:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":684,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"6538:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":685,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"6544:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":686,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"6548:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":687,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"6557:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":679,"name":"ERC721Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"6490:11:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Utils_$2504_$","typeString":"type(library ERC721Utils)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6502:21:1","memberName":"checkOnERC721Received","nodeType":"MemberAccess","referencedDeclaration":2503,"src":"6490:33:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6490:72:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":689,"nodeType":"ExpressionStatement","src":"6490:72:1"}]},"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"6276:55:1","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":691,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"6345:16:1","nodeType":"FunctionDefinition","parameters":{"id":671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"from","nameLocation":"6370:4:1","nodeType":"VariableDeclaration","scope":691,"src":"6362:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"6362:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":666,"mutability":"mutable","name":"to","nameLocation":"6384:2:1","nodeType":"VariableDeclaration","scope":691,"src":"6376:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":665,"name":"address","nodeType":"ElementaryTypeName","src":"6376:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":668,"mutability":"mutable","name":"tokenId","nameLocation":"6396:7:1","nodeType":"VariableDeclaration","scope":691,"src":"6388:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":667,"name":"uint256","nodeType":"ElementaryTypeName","src":"6388:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":670,"mutability":"mutable","name":"data","nameLocation":"6418:4:1","nodeType":"VariableDeclaration","scope":691,"src":"6405:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":669,"name":"bytes","nodeType":"ElementaryTypeName","src":"6405:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6361:62:1"},"returnParameters":{"id":672,"nodeType":"ParameterList","parameters":[],"src":"6439:0:1"},"scope":1333,"src":"6336:233:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":710,"nodeType":"Block","src":"7159:97:1","statements":[{"assignments":[701],"declarations":[{"constant":false,"id":701,"mutability":"mutable","name":"$","nameLocation":"7191:1:1","nodeType":"VariableDeclaration","scope":710,"src":"7169:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":700,"nodeType":"UserDefinedTypeName","pathNode":{"id":699,"name":"ERC721Storage","nameLocations":["7169:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"7169:13:1"},"referencedDeclaration":313,"src":"7169:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":704,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":702,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"7195:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7195:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7169:45:1"},{"expression":{"baseExpression":{"expression":{"id":705,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"7231:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7233:7:1","memberName":"_owners","nodeType":"MemberAccess","referencedDeclaration":298,"src":"7231:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":708,"indexExpression":{"id":707,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"7241:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7231:18:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":698,"id":709,"nodeType":"Return","src":"7224:25:1"}]},"documentation":{"id":692,"nodeType":"StructuredDocumentation","src":"6575:504:1","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":711,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"7093:8:1","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":694,"mutability":"mutable","name":"tokenId","nameLocation":"7110:7:1","nodeType":"VariableDeclaration","scope":711,"src":"7102:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":693,"name":"uint256","nodeType":"ElementaryTypeName","src":"7102:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7101:17:1"},"returnParameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":711,"src":"7150:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":696,"name":"address","nodeType":"ElementaryTypeName","src":"7150:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7149:9:1"},"scope":1333,"src":"7084:172:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":730,"nodeType":"Block","src":"7451:105:1","statements":[{"assignments":[721],"declarations":[{"constant":false,"id":721,"mutability":"mutable","name":"$","nameLocation":"7483:1:1","nodeType":"VariableDeclaration","scope":730,"src":"7461:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":720,"nodeType":"UserDefinedTypeName","pathNode":{"id":719,"name":"ERC721Storage","nameLocations":["7461:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"7461:13:1"},"referencedDeclaration":313,"src":"7461:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":724,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":722,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"7487:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7487:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7461:45:1"},{"expression":{"baseExpression":{"expression":{"id":725,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"7523:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":726,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7525:15:1","memberName":"_tokenApprovals","nodeType":"MemberAccess","referencedDeclaration":306,"src":"7523:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":728,"indexExpression":{"id":727,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"7541:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7523:26:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":718,"id":729,"nodeType":"Return","src":"7516:33:1"}]},"documentation":{"id":712,"nodeType":"StructuredDocumentation","src":"7262:105:1","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":731,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"7381:12:1","nodeType":"FunctionDefinition","parameters":{"id":715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":714,"mutability":"mutable","name":"tokenId","nameLocation":"7402:7:1","nodeType":"VariableDeclaration","scope":731,"src":"7394:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"7394:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7393:17:1"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":731,"src":"7442:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":716,"name":"address","nodeType":"ElementaryTypeName","src":"7442:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7441:9:1"},"scope":1333,"src":"7372:184:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":766,"nodeType":"Block","src":"7976:163:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":743,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"8005:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8024:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8016:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":744,"name":"address","nodeType":"ElementaryTypeName","src":"8016:7:1","typeDescriptions":{}}},"id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8016:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8005:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":749,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"8043:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":750,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"8052:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8043:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":753,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"8080:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":754,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"8087:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":752,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"8063:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8063:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8043:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":758,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":738,"src":"8112:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":757,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"8099:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8099:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":760,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"8124:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8099:32:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8043:88:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":763,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8042:90:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8005:127:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":742,"id":765,"nodeType":"Return","src":"7986:146:1"}]},"documentation":{"id":732,"nodeType":"StructuredDocumentation","src":"7562:300:1","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":767,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"7876:13:1","nodeType":"FunctionDefinition","parameters":{"id":739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"owner","nameLocation":"7898:5:1","nodeType":"VariableDeclaration","scope":767,"src":"7890:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":733,"name":"address","nodeType":"ElementaryTypeName","src":"7890:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":736,"mutability":"mutable","name":"spender","nameLocation":"7913:7:1","nodeType":"VariableDeclaration","scope":767,"src":"7905:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"7905:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":738,"mutability":"mutable","name":"tokenId","nameLocation":"7930:7:1","nodeType":"VariableDeclaration","scope":767,"src":"7922:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":737,"name":"uint256","nodeType":"ElementaryTypeName","src":"7922:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7889:49:1"},"returnParameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":767,"src":"7970:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":740,"name":"bool","nodeType":"ElementaryTypeName","src":"7970:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7969:6:1"},"scope":1333,"src":"7867:272:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":803,"nodeType":"Block","src":"8668:271:1","statements":[{"condition":{"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8682:39:1","subExpression":{"arguments":[{"id":778,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"8697:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":779,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"8704:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":780,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"8713:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":777,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"8683:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8683:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":802,"nodeType":"IfStatement","src":"8678:255:1","trueBody":{"id":801,"nodeType":"Block","src":"8723:210:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":783,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"8741:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8758:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"8750:7:1","typeDescriptions":{}}},"id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8741:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":799,"nodeType":"Block","src":"8839:84:1","statements":[{"errorCall":{"arguments":[{"id":795,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"8891:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":796,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"8900:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":794,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"8864:26:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8864:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":798,"nodeType":"RevertStatement","src":"8857:51:1"}]},"id":800,"nodeType":"IfStatement","src":"8737:186:1","trueBody":{"id":793,"nodeType":"Block","src":"8762:71:1","statements":[{"errorCall":{"arguments":[{"id":790,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"8810:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":789,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"8787:22:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8787:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":792,"nodeType":"RevertStatement","src":"8780:38:1"}]}}]}}]},"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"8145:421:1","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if:\n - `spender` does not have approval from `owner` for `tokenId`.\n - `spender` does not have approval to manage all of `owner`'s assets.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":804,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"8580:16:1","nodeType":"FunctionDefinition","parameters":{"id":775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"owner","nameLocation":"8605:5:1","nodeType":"VariableDeclaration","scope":804,"src":"8597:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"8597:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":772,"mutability":"mutable","name":"spender","nameLocation":"8620:7:1","nodeType":"VariableDeclaration","scope":804,"src":"8612:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"8612:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"tokenId","nameLocation":"8637:7:1","nodeType":"VariableDeclaration","scope":804,"src":"8629:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":773,"name":"uint256","nodeType":"ElementaryTypeName","src":"8629:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8596:49:1"},"returnParameters":{"id":776,"nodeType":"ParameterList","parameters":[],"src":"8668:0:1"},"scope":1333,"src":"8571:368:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":827,"nodeType":"Block","src":"9656:135:1","statements":[{"assignments":[814],"declarations":[{"constant":false,"id":814,"mutability":"mutable","name":"$","nameLocation":"9688:1:1","nodeType":"VariableDeclaration","scope":827,"src":"9666:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":813,"nodeType":"UserDefinedTypeName","pathNode":{"id":812,"name":"ERC721Storage","nameLocations":["9666:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"9666:13:1"},"referencedDeclaration":313,"src":"9666:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":817,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":815,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"9692:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9692:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"9666:45:1"},{"id":826,"nodeType":"UncheckedBlock","src":"9721:64:1","statements":[{"expression":{"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":818,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"9745:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":821,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9747:9:1","memberName":"_balances","nodeType":"MemberAccess","referencedDeclaration":302,"src":"9745:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":822,"indexExpression":{"id":820,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"9757:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9745:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"9769:5:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9745:29:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":825,"nodeType":"ExpressionStatement","src":"9745:29:1"}]}]},"documentation":{"id":805,"nodeType":"StructuredDocumentation","src":"8945:631:1","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":828,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"9590:16:1","nodeType":"FunctionDefinition","parameters":{"id":810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"account","nameLocation":"9615:7:1","nodeType":"VariableDeclaration","scope":828,"src":"9607:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":806,"name":"address","nodeType":"ElementaryTypeName","src":"9607:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":809,"mutability":"mutable","name":"value","nameLocation":"9632:5:1","nodeType":"VariableDeclaration","scope":828,"src":"9624:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":808,"name":"uint128","nodeType":"ElementaryTypeName","src":"9624:7:1","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9606:32:1"},"returnParameters":{"id":811,"nodeType":"ParameterList","parameters":[],"src":"9656:0:1"},"scope":1333,"src":"9581:210:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":929,"nodeType":"Block","src":"10479:761:1","statements":[{"assignments":[842],"declarations":[{"constant":false,"id":842,"mutability":"mutable","name":"$","nameLocation":"10511:1:1","nodeType":"VariableDeclaration","scope":929,"src":"10489:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":841,"nodeType":"UserDefinedTypeName","pathNode":{"id":840,"name":"ERC721Storage","nameLocations":["10489:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"10489:13:1"},"referencedDeclaration":313,"src":"10489:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":845,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":843,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"10515:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10515:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"10489:45:1"},{"assignments":[847],"declarations":[{"constant":false,"id":847,"mutability":"mutable","name":"from","nameLocation":"10552:4:1","nodeType":"VariableDeclaration","scope":929,"src":"10544:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":846,"name":"address","nodeType":"ElementaryTypeName","src":"10544:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":851,"initialValue":{"arguments":[{"id":849,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"10568:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":848,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"10559:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10559:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10544:32:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":852,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"10636:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10652:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10644:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":853,"name":"address","nodeType":"ElementaryTypeName","src":"10644:7:1","typeDescriptions":{}}},"id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10644:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10636:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":865,"nodeType":"IfStatement","src":"10632:86:1","trueBody":{"id":864,"nodeType":"Block","src":"10656:62:1","statements":[{"expression":{"arguments":[{"id":859,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"10687:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":860,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"10693:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":861,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"10699:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":858,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"10670:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10670:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"10670:37:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":866,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"10762:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10778:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10770:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":867,"name":"address","nodeType":"ElementaryTypeName","src":"10770:7:1","typeDescriptions":{}}},"id":870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10770:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10762:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":895,"nodeType":"IfStatement","src":"10758:258:1","trueBody":{"id":894,"nodeType":"Block","src":"10782:234:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10895:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10887:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"10887:7:1","typeDescriptions":{}}},"id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10887:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":877,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"10899:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10916:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10908:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":878,"name":"address","nodeType":"ElementaryTypeName","src":"10908:7:1","typeDescriptions":{}}},"id":881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10908:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10920:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":872,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1184,1258],"referencedDeclaration":1258,"src":"10878:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10878:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":884,"nodeType":"ExpressionStatement","src":"10878:48:1"},{"id":893,"nodeType":"UncheckedBlock","src":"10941:65:1","statements":[{"expression":{"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":885,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"10969:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":888,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10971:9:1","memberName":"_balances","nodeType":"MemberAccess","referencedDeclaration":302,"src":"10969:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":889,"indexExpression":{"id":887,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"10981:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10969:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10990:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10969:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":892,"nodeType":"ExpressionStatement","src":"10969:22:1"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":896,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"11030:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11044:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11036:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":897,"name":"address","nodeType":"ElementaryTypeName","src":"11036:7:1","typeDescriptions":{}}},"id":900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11036:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11030:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":912,"nodeType":"IfStatement","src":"11026:109:1","trueBody":{"id":911,"nodeType":"Block","src":"11048:87:1","statements":[{"id":910,"nodeType":"UncheckedBlock","src":"11062:63:1","statements":[{"expression":{"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":902,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"11090:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":905,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11092:9:1","memberName":"_balances","nodeType":"MemberAccess","referencedDeclaration":302,"src":"11090:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":906,"indexExpression":{"id":904,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"11102:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11090:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11109:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11090:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":909,"nodeType":"ExpressionStatement","src":"11090:20:1"}]}]}},{"expression":{"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":913,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"11145:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11147:7:1","memberName":"_owners","nodeType":"MemberAccess","referencedDeclaration":298,"src":"11145:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":917,"indexExpression":{"id":915,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"11155:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11145:18:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":918,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"11166:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11145:23:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":920,"nodeType":"ExpressionStatement","src":"11145:23:1"},{"eventCall":{"arguments":[{"id":922,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"11193:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":923,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"11199:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":924,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"11203:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":921,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"11184:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11184:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":926,"nodeType":"EmitStatement","src":"11179:32:1"},{"expression":{"id":927,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"11229:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":839,"id":928,"nodeType":"Return","src":"11222:11:1"}]},"documentation":{"id":829,"nodeType":"StructuredDocumentation","src":"9797:582:1","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":930,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"10393:7:1","nodeType":"FunctionDefinition","parameters":{"id":836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":831,"mutability":"mutable","name":"to","nameLocation":"10409:2:1","nodeType":"VariableDeclaration","scope":930,"src":"10401:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":830,"name":"address","nodeType":"ElementaryTypeName","src":"10401:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":833,"mutability":"mutable","name":"tokenId","nameLocation":"10421:7:1","nodeType":"VariableDeclaration","scope":930,"src":"10413:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"10413:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":835,"mutability":"mutable","name":"auth","nameLocation":"10438:4:1","nodeType":"VariableDeclaration","scope":930,"src":"10430:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":834,"name":"address","nodeType":"ElementaryTypeName","src":"10430:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10400:43:1"},"returnParameters":{"id":839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":838,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":930,"src":"10470:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"10470:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10469:9:1"},"scope":1333,"src":"10384:856:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":979,"nodeType":"Block","src":"11615:274:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":938,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"11629:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11643:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11635:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"11635:7:1","typeDescriptions":{}}},"id":942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11635:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11629:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":952,"nodeType":"IfStatement","src":"11625:87:1","trueBody":{"id":951,"nodeType":"Block","src":"11647:65:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11698:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11690:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"11690:7:1","typeDescriptions":{}}},"id":948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11690:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":944,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"11668:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11668:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":950,"nodeType":"RevertStatement","src":"11661:40:1"}]}},{"assignments":[954],"declarations":[{"constant":false,"id":954,"mutability":"mutable","name":"previousOwner","nameLocation":"11729:13:1","nodeType":"VariableDeclaration","scope":979,"src":"11721:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"11721:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":963,"initialValue":{"arguments":[{"id":956,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"11753:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":957,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"11757:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11774:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":959,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11766:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":958,"name":"address","nodeType":"ElementaryTypeName","src":"11766:7:1","typeDescriptions":{}}},"id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11766:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":955,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"11745:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11745:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11721:56:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":964,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"11791:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11816:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11808:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":965,"name":"address","nodeType":"ElementaryTypeName","src":"11808:7:1","typeDescriptions":{}}},"id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11808:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11791:27:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":978,"nodeType":"IfStatement","src":"11787:96:1","trueBody":{"id":977,"nodeType":"Block","src":"11820:63:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11869:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11861:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":971,"name":"address","nodeType":"ElementaryTypeName","src":"11861:7:1","typeDescriptions":{}}},"id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11861:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":970,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"11841:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11841:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":976,"nodeType":"RevertStatement","src":"11834:38:1"}]}}]},"documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"11246:311:1","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":980,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"11571:5:1","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"mutability":"mutable","name":"to","nameLocation":"11585:2:1","nodeType":"VariableDeclaration","scope":980,"src":"11577:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":932,"name":"address","nodeType":"ElementaryTypeName","src":"11577:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":935,"mutability":"mutable","name":"tokenId","nameLocation":"11597:7:1","nodeType":"VariableDeclaration","scope":980,"src":"11589:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":934,"name":"uint256","nodeType":"ElementaryTypeName","src":"11589:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11576:29:1"},"returnParameters":{"id":937,"nodeType":"ParameterList","parameters":[],"src":"11615:0:1"},"scope":1333,"src":"11562:327:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":994,"nodeType":"Block","src":"12297:43:1","statements":[{"expression":{"arguments":[{"id":989,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"12317:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":990,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"12321:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12330:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":988,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[995,1025],"referencedDeclaration":1025,"src":"12307:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12307:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":993,"nodeType":"ExpressionStatement","src":"12307:26:1"}]},"documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"11895:340:1","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":995,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"12249:9:1","nodeType":"FunctionDefinition","parameters":{"id":986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"to","nameLocation":"12267:2:1","nodeType":"VariableDeclaration","scope":995,"src":"12259:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":982,"name":"address","nodeType":"ElementaryTypeName","src":"12259:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"tokenId","nameLocation":"12279:7:1","nodeType":"VariableDeclaration","scope":995,"src":"12271:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":984,"name":"uint256","nodeType":"ElementaryTypeName","src":"12271:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12258:29:1"},"returnParameters":{"id":987,"nodeType":"ParameterList","parameters":[],"src":"12297:0:1"},"scope":1333,"src":"12240:100:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1024,"nodeType":"Block","src":"12645:123:1","statements":[{"expression":{"arguments":[{"id":1006,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"12661:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1007,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"12665:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1005,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"12655:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12655:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1009,"nodeType":"ExpressionStatement","src":"12655:18:1"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1013,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"12717:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12717:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12739:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12731:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1015,"name":"address","nodeType":"ElementaryTypeName","src":"12731:7:1","typeDescriptions":{}}},"id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12731:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1019,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"12743:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1020,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"12747:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1021,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"12756:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1010,"name":"ERC721Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"12683:11:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Utils_$2504_$","typeString":"type(library ERC721Utils)"}},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12695:21:1","memberName":"checkOnERC721Received","nodeType":"MemberAccess","referencedDeclaration":2503,"src":"12683:33:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12683:78:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1023,"nodeType":"ExpressionStatement","src":"12683:78:1"}]},"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"12346:210:1","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1025,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"12570:9:1","nodeType":"FunctionDefinition","parameters":{"id":1003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"to","nameLocation":"12588:2:1","nodeType":"VariableDeclaration","scope":1025,"src":"12580:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":997,"name":"address","nodeType":"ElementaryTypeName","src":"12580:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1000,"mutability":"mutable","name":"tokenId","nameLocation":"12600:7:1","nodeType":"VariableDeclaration","scope":1025,"src":"12592:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":999,"name":"uint256","nodeType":"ElementaryTypeName","src":"12592:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1002,"mutability":"mutable","name":"data","nameLocation":"12622:4:1","nodeType":"VariableDeclaration","scope":1025,"src":"12609:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1001,"name":"bytes","nodeType":"ElementaryTypeName","src":"12609:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12579:48:1"},"returnParameters":{"id":1004,"nodeType":"ParameterList","parameters":[],"src":"12645:0:1"},"scope":1333,"src":"12561:207:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1057,"nodeType":"Block","src":"13135:186:1","statements":[{"assignments":[1032],"declarations":[{"constant":false,"id":1032,"mutability":"mutable","name":"previousOwner","nameLocation":"13153:13:1","nodeType":"VariableDeclaration","scope":1057,"src":"13145:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1031,"name":"address","nodeType":"ElementaryTypeName","src":"13145:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1044,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13185:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13177:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1034,"name":"address","nodeType":"ElementaryTypeName","src":"13177:7:1","typeDescriptions":{}}},"id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13177:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1038,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"13189:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13206:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13198:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1039,"name":"address","nodeType":"ElementaryTypeName","src":"13198:7:1","typeDescriptions":{}}},"id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13198:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1033,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"13169:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13169:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13145:64:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1045,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"13223:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13248:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13240:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1046,"name":"address","nodeType":"ElementaryTypeName","src":"13240:7:1","typeDescriptions":{}}},"id":1049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13240:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13223:27:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1056,"nodeType":"IfStatement","src":"13219:96:1","trueBody":{"id":1055,"nodeType":"Block","src":"13252:63:1","statements":[{"errorCall":{"arguments":[{"id":1052,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"13296:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1051,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"13273:22:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13273:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1054,"nodeType":"RevertStatement","src":"13266:38:1"}]}}]},"documentation":{"id":1026,"nodeType":"StructuredDocumentation","src":"12774:315:1","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":1058,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"13103:5:1","nodeType":"FunctionDefinition","parameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"tokenId","nameLocation":"13117:7:1","nodeType":"VariableDeclaration","scope":1058,"src":"13109:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"13109:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13108:17:1"},"returnParameters":{"id":1030,"nodeType":"ParameterList","parameters":[],"src":"13135:0:1"},"scope":1333,"src":"13094:227:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1117,"nodeType":"Block","src":"13716:389:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1068,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"13730:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13744:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13736:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1069,"name":"address","nodeType":"ElementaryTypeName","src":"13736:7:1","typeDescriptions":{}}},"id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13736:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13730:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1082,"nodeType":"IfStatement","src":"13726:87:1","trueBody":{"id":1081,"nodeType":"Block","src":"13748:65:1","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13799:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13791:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1075,"name":"address","nodeType":"ElementaryTypeName","src":"13791:7:1","typeDescriptions":{}}},"id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13791:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1074,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"13769:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13769:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1080,"nodeType":"RevertStatement","src":"13762:40:1"}]}},{"assignments":[1084],"declarations":[{"constant":false,"id":1084,"mutability":"mutable","name":"previousOwner","nameLocation":"13830:13:1","nodeType":"VariableDeclaration","scope":1117,"src":"13822:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1083,"name":"address","nodeType":"ElementaryTypeName","src":"13822:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1093,"initialValue":{"arguments":[{"id":1086,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"13854:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1087,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"13858:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13875:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13867:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1088,"name":"address","nodeType":"ElementaryTypeName","src":"13867:7:1","typeDescriptions":{}}},"id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13867:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1085,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"13846:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13846:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13822:56:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1094,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"13892:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13917:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13909:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1095,"name":"address","nodeType":"ElementaryTypeName","src":"13909:7:1","typeDescriptions":{}}},"id":1098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13909:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13892:27:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1105,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"13994:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1106,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"14011:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13994:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1115,"nodeType":"IfStatement","src":"13990:109:1","trueBody":{"id":1114,"nodeType":"Block","src":"14017:82:1","statements":[{"errorCall":{"arguments":[{"id":1109,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"14059:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1110,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"14065:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1111,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"14074:13:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1108,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"14038:20:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14038:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1113,"nodeType":"RevertStatement","src":"14031:57:1"}]}},"id":1116,"nodeType":"IfStatement","src":"13888:211:1","trueBody":{"id":1104,"nodeType":"Block","src":"13921:63:1","statements":[{"errorCall":{"arguments":[{"id":1101,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"13965:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1100,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"13942:22:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13942:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1103,"nodeType":"RevertStatement","src":"13935:38:1"}]}}]},"documentation":{"id":1059,"nodeType":"StructuredDocumentation","src":"13327:313:1","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1118,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"13654:9:1","nodeType":"FunctionDefinition","parameters":{"id":1066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1061,"mutability":"mutable","name":"from","nameLocation":"13672:4:1","nodeType":"VariableDeclaration","scope":1118,"src":"13664:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1060,"name":"address","nodeType":"ElementaryTypeName","src":"13664:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1063,"mutability":"mutable","name":"to","nameLocation":"13686:2:1","nodeType":"VariableDeclaration","scope":1118,"src":"13678:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1062,"name":"address","nodeType":"ElementaryTypeName","src":"13678:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1065,"mutability":"mutable","name":"tokenId","nameLocation":"13698:7:1","nodeType":"VariableDeclaration","scope":1118,"src":"13690:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1064,"name":"uint256","nodeType":"ElementaryTypeName","src":"13690:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13663:43:1"},"returnParameters":{"id":1067,"nodeType":"ParameterList","parameters":[],"src":"13716:0:1"},"scope":1333,"src":"13645:460:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1135,"nodeType":"Block","src":"15114:53:1","statements":[{"expression":{"arguments":[{"id":1129,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"15138:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1130,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"15144:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1131,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"15148:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15157:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1128,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[1136,1166],"referencedDeclaration":1166,"src":"15124:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15124:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1134,"nodeType":"ExpressionStatement","src":"15124:36:1"}]},"documentation":{"id":1119,"nodeType":"StructuredDocumentation","src":"14111:923:1","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC-721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"15048:13:1","nodeType":"FunctionDefinition","parameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1121,"mutability":"mutable","name":"from","nameLocation":"15070:4:1","nodeType":"VariableDeclaration","scope":1136,"src":"15062:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1120,"name":"address","nodeType":"ElementaryTypeName","src":"15062:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1123,"mutability":"mutable","name":"to","nameLocation":"15084:2:1","nodeType":"VariableDeclaration","scope":1136,"src":"15076:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"15076:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"tokenId","nameLocation":"15096:7:1","nodeType":"VariableDeclaration","scope":1136,"src":"15088:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1124,"name":"uint256","nodeType":"ElementaryTypeName","src":"15088:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15061:43:1"},"returnParameters":{"id":1127,"nodeType":"ParameterList","parameters":[],"src":"15114:0:1"},"scope":1333,"src":"15039:128:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1165,"nodeType":"Block","src":"15506:127:1","statements":[{"expression":{"arguments":[{"id":1149,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"15526:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1150,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"15532:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1151,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"15536:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1148,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"15516:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15516:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1153,"nodeType":"ExpressionStatement","src":"15516:28:1"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1157,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"15588:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15588:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1159,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"15602:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1160,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"15608:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1161,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"15612:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1162,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"15621:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1154,"name":"ERC721Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"15554:11:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Utils_$2504_$","typeString":"type(library ERC721Utils)"}},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15566:21:1","memberName":"checkOnERC721Received","nodeType":"MemberAccess","referencedDeclaration":2503,"src":"15554:33:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15554:72:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1164,"nodeType":"ExpressionStatement","src":"15554:72:1"}]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"15173:226:1","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1166,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"15413:13:1","nodeType":"FunctionDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"from","nameLocation":"15435:4:1","nodeType":"VariableDeclaration","scope":1166,"src":"15427:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"15427:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"to","nameLocation":"15449:2:1","nodeType":"VariableDeclaration","scope":1166,"src":"15441:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"15441:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"tokenId","nameLocation":"15461:7:1","nodeType":"VariableDeclaration","scope":1166,"src":"15453:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"15453:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"data","nameLocation":"15483:4:1","nodeType":"VariableDeclaration","scope":1166,"src":"15470:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1144,"name":"bytes","nodeType":"ElementaryTypeName","src":"15470:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15426:62:1"},"returnParameters":{"id":1147,"nodeType":"ParameterList","parameters":[],"src":"15506:0:1"},"scope":1333,"src":"15404:229:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1183,"nodeType":"Block","src":"16146:50:1","statements":[{"expression":{"arguments":[{"id":1177,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"16165:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1178,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"16169:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1179,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"16178:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":1180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16184:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1176,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1184,1258],"referencedDeclaration":1258,"src":"16156:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16156:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1182,"nodeType":"ExpressionStatement","src":"16156:33:1"}]},"documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"15639:432:1","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1184,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"16085:8:1","nodeType":"FunctionDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"to","nameLocation":"16102:2:1","nodeType":"VariableDeclaration","scope":1184,"src":"16094:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"16094:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"tokenId","nameLocation":"16114:7:1","nodeType":"VariableDeclaration","scope":1184,"src":"16106:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"16106:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"auth","nameLocation":"16131:4:1","nodeType":"VariableDeclaration","scope":1184,"src":"16123:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"16123:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16093:43:1"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[],"src":"16146:0:1"},"scope":1333,"src":"16076:120:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1257,"nodeType":"Block","src":"16472:625:1","statements":[{"assignments":[1198],"declarations":[{"constant":false,"id":1198,"mutability":"mutable","name":"$","nameLocation":"16504:1:1","nodeType":"VariableDeclaration","scope":1257,"src":"16482:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":1197,"nodeType":"UserDefinedTypeName","pathNode":{"id":1196,"name":"ERC721Storage","nameLocations":["16482:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"16482:13:1"},"referencedDeclaration":313,"src":"16482:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":1201,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1199,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"16508:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16508:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"16482:45:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1202,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"16593:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1203,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"16606:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16622:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16614:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1204,"name":"address","nodeType":"ElementaryTypeName","src":"16614:7:1","typeDescriptions":{}}},"id":1207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16614:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16606:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16593:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1248,"nodeType":"IfStatement","src":"16589:460:1","trueBody":{"id":1247,"nodeType":"Block","src":"16626:423:1","statements":[{"assignments":[1211],"declarations":[{"constant":false,"id":1211,"mutability":"mutable","name":"owner","nameLocation":"16648:5:1","nodeType":"VariableDeclaration","scope":1247,"src":"16640:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1210,"name":"address","nodeType":"ElementaryTypeName","src":"16640:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1215,"initialValue":{"arguments":[{"id":1213,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"16670:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1212,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"16656:13:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16656:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16640:38:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1216,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"16806:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16822:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16814:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"16814:7:1","typeDescriptions":{}}},"id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16814:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16806:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1222,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"16828:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1223,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"16837:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16828:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16806:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16845:30:1","subExpression":{"arguments":[{"id":1227,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"16863:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1228,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"16870:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1226,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"16846:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16846:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16806:69:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1237,"nodeType":"IfStatement","src":"16802:142:1","trueBody":{"id":1236,"nodeType":"Block","src":"16877:67:1","statements":[{"errorCall":{"arguments":[{"id":1233,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"16924:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1232,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"16902:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16902:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1235,"nodeType":"RevertStatement","src":"16895:34:1"}]}},{"condition":{"id":1238,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"16962:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1246,"nodeType":"IfStatement","src":"16958:81:1","trueBody":{"id":1245,"nodeType":"Block","src":"16973:66:1","statements":[{"eventCall":{"arguments":[{"id":1240,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"17005:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1241,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"17012:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1242,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"17016:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1239,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"16996:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16996:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1244,"nodeType":"EmitStatement","src":"16991:33:1"}]}}]}},{"expression":{"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1249,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"17059:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":1252,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17061:15:1","memberName":"_tokenApprovals","nodeType":"MemberAccess","referencedDeclaration":306,"src":"17059:17:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1253,"indexExpression":{"id":1251,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"17077:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17059:26:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1254,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"17088:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17059:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1256,"nodeType":"ExpressionStatement","src":"17059:31:1"}]},"documentation":{"id":1185,"nodeType":"StructuredDocumentation","src":"16202:171:1","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":1258,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"16387:8:1","nodeType":"FunctionDefinition","parameters":{"id":1194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"to","nameLocation":"16404:2:1","nodeType":"VariableDeclaration","scope":1258,"src":"16396:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1186,"name":"address","nodeType":"ElementaryTypeName","src":"16396:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1189,"mutability":"mutable","name":"tokenId","nameLocation":"16416:7:1","nodeType":"VariableDeclaration","scope":1258,"src":"16408:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1188,"name":"uint256","nodeType":"ElementaryTypeName","src":"16408:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1191,"mutability":"mutable","name":"auth","nameLocation":"16433:4:1","nodeType":"VariableDeclaration","scope":1258,"src":"16425:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1190,"name":"address","nodeType":"ElementaryTypeName","src":"16425:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1193,"mutability":"mutable","name":"emitEvent","nameLocation":"16444:9:1","nodeType":"VariableDeclaration","scope":1258,"src":"16439:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1192,"name":"bool","nodeType":"ElementaryTypeName","src":"16439:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16395:59:1"},"returnParameters":{"id":1195,"nodeType":"ParameterList","parameters":[],"src":"16472:0:1"},"scope":1333,"src":"16378:719:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1302,"nodeType":"Block","src":"17399:276:1","statements":[{"assignments":[1270],"declarations":[{"constant":false,"id":1270,"mutability":"mutable","name":"$","nameLocation":"17431:1:1","nodeType":"VariableDeclaration","scope":1302,"src":"17409:23:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"},"typeName":{"id":1269,"nodeType":"UserDefinedTypeName","pathNode":{"id":1268,"name":"ERC721Storage","nameLocations":["17409:13:1"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"17409:13:1"},"referencedDeclaration":313,"src":"17409:13:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage"}},"visibility":"internal"}],"id":1273,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1271,"name":"_getERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"17435:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC721Storage_$313_storage_ptr_$","typeString":"function () pure returns (struct ERC721Upgradeable.ERC721Storage storage pointer)"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17435:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"17409:45:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1274,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"17468:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17488:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17480:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1275,"name":"address","nodeType":"ElementaryTypeName","src":"17480:7:1","typeDescriptions":{}}},"id":1278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17480:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"17468:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1285,"nodeType":"IfStatement","src":"17464:91:1","trueBody":{"id":1284,"nodeType":"Block","src":"17492:63:1","statements":[{"errorCall":{"arguments":[{"id":1281,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"17535:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1280,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"17513:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17513:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1283,"nodeType":"RevertStatement","src":"17506:38:1"}]}},{"expression":{"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":1286,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"17564:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_ERC721Storage_$313_storage_ptr","typeString":"struct ERC721Upgradeable.ERC721Storage storage pointer"}},"id":1290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17566:18:1","memberName":"_operatorApprovals","nodeType":"MemberAccess","referencedDeclaration":312,"src":"17564:20:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1291,"indexExpression":{"id":1288,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"17585:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17564:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1292,"indexExpression":{"id":1289,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"17592:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17564:37:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1293,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"17604:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17564:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1295,"nodeType":"ExpressionStatement","src":"17564:48:1"},{"eventCall":{"arguments":[{"id":1297,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"17642:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1298,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"17649:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1299,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"17659:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1296,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"17627:14:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17627:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1301,"nodeType":"EmitStatement","src":"17622:46:1"}]},"documentation":{"id":1259,"nodeType":"StructuredDocumentation","src":"17103:198:1","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":1303,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"17315:18:1","nodeType":"FunctionDefinition","parameters":{"id":1266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"owner","nameLocation":"17342:5:1","nodeType":"VariableDeclaration","scope":1303,"src":"17334:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1260,"name":"address","nodeType":"ElementaryTypeName","src":"17334:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1263,"mutability":"mutable","name":"operator","nameLocation":"17357:8:1","nodeType":"VariableDeclaration","scope":1303,"src":"17349:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"17349:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1265,"mutability":"mutable","name":"approved","nameLocation":"17372:8:1","nodeType":"VariableDeclaration","scope":1303,"src":"17367:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1264,"name":"bool","nodeType":"ElementaryTypeName","src":"17367:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17333:48:1"},"returnParameters":{"id":1267,"nodeType":"ParameterList","parameters":[],"src":"17399:0:1"},"scope":1333,"src":"17306:369:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1331,"nodeType":"Block","src":"17982:169:1","statements":[{"assignments":[1312],"declarations":[{"constant":false,"id":1312,"mutability":"mutable","name":"owner","nameLocation":"18000:5:1","nodeType":"VariableDeclaration","scope":1331,"src":"17992:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1311,"name":"address","nodeType":"ElementaryTypeName","src":"17992:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1316,"initialValue":{"arguments":[{"id":1314,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"18017:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1313,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"18008:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18008:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"17992:33:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1312,"src":"18039:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18056:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18048:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1318,"name":"address","nodeType":"ElementaryTypeName","src":"18048:7:1","typeDescriptions":{}}},"id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18048:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18039:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1328,"nodeType":"IfStatement","src":"18035:88:1","trueBody":{"id":1327,"nodeType":"Block","src":"18060:63:1","statements":[{"errorCall":{"arguments":[{"id":1324,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1306,"src":"18104:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1323,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"18081:22:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18081:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1326,"nodeType":"RevertStatement","src":"18074:38:1"}]}},{"expression":{"id":1329,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1312,"src":"18139:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1310,"id":1330,"nodeType":"Return","src":"18132:12:1"}]},"documentation":{"id":1304,"nodeType":"StructuredDocumentation","src":"17681:224:1","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":1332,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"17919:13:1","nodeType":"FunctionDefinition","parameters":{"id":1307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1306,"mutability":"mutable","name":"tokenId","nameLocation":"17941:7:1","nodeType":"VariableDeclaration","scope":1332,"src":"17933:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1305,"name":"uint256","nodeType":"ElementaryTypeName","src":"17933:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17932:17:1"},"returnParameters":{"id":1310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1332,"src":"17973:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1308,"name":"address","nodeType":"ElementaryTypeName","src":"17973:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17972:9:1"},"scope":1333,"src":"17910:241:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1334,"src":"1099:17054:1","usedErrors":[16,19,1686,1691,1700,1705,1710,1717,1722,1727],"usedEvents":[24,2280,2289,2298]}],"src":"107:18047:1"},"id":1},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[1379],"Initializable":[253]},"id":1380,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1335,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1337,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1380,"sourceUnit":254,"src":"126:63:2","symbolAliases":[{"foreign":{"id":1336,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"134:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1339,"name":"Initializable","nameLocations":["728:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":253,"src":"728:13:2"},"id":1340,"nodeType":"InheritanceSpecifier","src":"728:13:2"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1338,"nodeType":"StructuredDocumentation","src":"191:496:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1379,"linearizedBaseContracts":[1379,253],"name":"ContextUpgradeable","nameLocation":"706:18:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":1345,"nodeType":"Block","src":"800:7:2","statements":[]},"id":1346,"implemented":true,"kind":"function","modifiers":[{"id":1343,"kind":"modifierInvocation","modifierName":{"id":1342,"name":"onlyInitializing","nameLocations":["783:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"783:16:2"},"nodeType":"ModifierInvocation","src":"783:16:2"}],"name":"__Context_init","nameLocation":"757:14:2","nodeType":"FunctionDefinition","parameters":{"id":1341,"nodeType":"ParameterList","parameters":[],"src":"771:2:2"},"returnParameters":{"id":1344,"nodeType":"ParameterList","parameters":[],"src":"800:0:2"},"scope":1379,"src":"748:59:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1351,"nodeType":"Block","src":"875:7:2","statements":[]},"id":1352,"implemented":true,"kind":"function","modifiers":[{"id":1349,"kind":"modifierInvocation","modifierName":{"id":1348,"name":"onlyInitializing","nameLocations":["858:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"858:16:2"},"nodeType":"ModifierInvocation","src":"858:16:2"}],"name":"__Context_init_unchained","nameLocation":"822:24:2","nodeType":"FunctionDefinition","parameters":{"id":1347,"nodeType":"ParameterList","parameters":[],"src":"846:2:2"},"returnParameters":{"id":1350,"nodeType":"ParameterList","parameters":[],"src":"875:0:2"},"scope":1379,"src":"813:69:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1360,"nodeType":"Block","src":"949:34:2","statements":[{"expression":{"expression":{"id":1357,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"966:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"970:6:2","memberName":"sender","nodeType":"MemberAccess","src":"966:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1356,"id":1359,"nodeType":"Return","src":"959:17:2"}]},"id":1361,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"896:10:2","nodeType":"FunctionDefinition","parameters":{"id":1353,"nodeType":"ParameterList","parameters":[],"src":"906:2:2"},"returnParameters":{"id":1356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1361,"src":"940:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1354,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"939:9:2"},"scope":1379,"src":"887:96:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1369,"nodeType":"Block","src":"1056:32:2","statements":[{"expression":{"expression":{"id":1366,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1073:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1077:4:2","memberName":"data","nodeType":"MemberAccess","src":"1073:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1365,"id":1368,"nodeType":"Return","src":"1066:15:2"}]},"id":1370,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"998:8:2","nodeType":"FunctionDefinition","parameters":{"id":1362,"nodeType":"ParameterList","parameters":[],"src":"1006:2:2"},"returnParameters":{"id":1365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1370,"src":"1040:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1363,"name":"bytes","nodeType":"ElementaryTypeName","src":"1040:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1039:16:2"},"scope":1379,"src":"989:99:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1377,"nodeType":"Block","src":"1166:25:2","statements":[{"expression":{"hexValue":"30","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1183:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1374,"id":1376,"nodeType":"Return","src":"1176:8:2"}]},"id":1378,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1103:20:2","nodeType":"FunctionDefinition","parameters":{"id":1371,"nodeType":"ParameterList","parameters":[],"src":"1123:2:2"},"returnParameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1378,"src":"1157:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"1157:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1156:9:2"},"scope":1379,"src":"1094:97:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1380,"src":"688:505:2","usedErrors":[16,19],"usedEvents":[24]}],"src":"101:1093:2"},"id":2},"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"Initializable":[253],"ReentrancyGuardUpgradeable":[1508]},"id":1509,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1381,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1383,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1509,"sourceUnit":254,"src":"134:63:3","symbolAliases":[{"foreign":{"id":1382,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"142:13:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1385,"name":"Initializable","nameLocations":["1142:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":253,"src":"1142:13:3"},"id":1386,"nodeType":"InheritanceSpecifier","src":"1142:13:3"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1384,"nodeType":"StructuredDocumentation","src":"199:894:3","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1508,"linearizedBaseContracts":[1508,253],"name":"ReentrancyGuardUpgradeable","nameLocation":"1112:26:3","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1389,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1935:11:3","nodeType":"VariableDeclaration","scope":1508,"src":"1910:40:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1910:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1949:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1392,"mutability":"constant","name":"ENTERED","nameLocation":"1981:7:3","nodeType":"VariableDeclaration","scope":1508,"src":"1956:36:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"1956:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1991:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"canonicalName":"ReentrancyGuardUpgradeable.ReentrancyGuardStorage","documentation":{"id":1393,"nodeType":"StructuredDocumentation","src":"1999:73:3","text":"@custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard"},"id":1396,"members":[{"constant":false,"id":1395,"mutability":"mutable","name":"_status","nameLocation":"2125:7:3","nodeType":"VariableDeclaration","scope":1396,"src":"2117:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1394,"name":"uint256","nodeType":"ElementaryTypeName","src":"2117:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ReentrancyGuardStorage","nameLocation":"2084:22:3","nodeType":"StructDefinition","scope":1508,"src":"2077:62:3","visibility":"public"},{"constant":true,"id":1399,"mutability":"constant","name":"ReentrancyGuardStorageLocation","nameLocation":"2289:30:3","nodeType":"VariableDeclaration","scope":1508,"src":"2264:124:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2264:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839623737396231373432326430646639323232333031386233326234643166613436653037313732336436383137653234383664303033626563633535663030","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2322:66:3","typeDescriptions":{"typeIdentifier":"t_rational_70319816728846589445362000750570655803700195216363692647688146666176345628416_by_1","typeString":"int_const 7031...(69 digits omitted)...8416"},"value":"0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00"},"visibility":"private"},{"body":{"id":1406,"nodeType":"Block","src":"2489:89:3","statements":[{"AST":{"nodeType":"YulBlock","src":"2508:64:3","statements":[{"nodeType":"YulAssignment","src":"2522:40:3","value":{"name":"ReentrancyGuardStorageLocation","nodeType":"YulIdentifier","src":"2532:30:3"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"2522:6:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1403,"isOffset":false,"isSlot":true,"src":"2522:6:3","suffix":"slot","valueSize":1},{"declaration":1399,"isOffset":false,"isSlot":false,"src":"2532:30:3","valueSize":1}],"id":1405,"nodeType":"InlineAssembly","src":"2499:73:3"}]},"id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"_getReentrancyGuardStorage","nameLocation":"2404:26:3","nodeType":"FunctionDefinition","parameters":{"id":1400,"nodeType":"ParameterList","parameters":[],"src":"2430:2:3"},"returnParameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"$","nameLocation":"2486:1:3","nodeType":"VariableDeclaration","scope":1407,"src":"2455:32:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":1402,"nodeType":"UserDefinedTypeName","pathNode":{"id":1401,"name":"ReentrancyGuardStorage","nameLocations":["2455:22:3"],"nodeType":"IdentifierPath","referencedDeclaration":1396,"src":"2455:22:3"},"referencedDeclaration":1396,"src":"2455:22:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"src":"2454:34:3"},"scope":1508,"src":"2395:183:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"2584:52:3","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":1410,"name":"ReentrancyGuardReentrantCall","nameLocation":"2647:28:3","nodeType":"ErrorDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[],"src":"2675:2:3"},"src":"2641:37:3"},{"body":{"id":1418,"nodeType":"Block","src":"2744:51:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1415,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"2754:32:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2754:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1417,"nodeType":"ExpressionStatement","src":"2754:34:3"}]},"id":1419,"implemented":true,"kind":"function","modifiers":[{"id":1413,"kind":"modifierInvocation","modifierName":{"id":1412,"name":"onlyInitializing","nameLocations":["2727:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"2727:16:3"},"nodeType":"ModifierInvocation","src":"2727:16:3"}],"name":"__ReentrancyGuard_init","nameLocation":"2693:22:3","nodeType":"FunctionDefinition","parameters":{"id":1411,"nodeType":"ParameterList","parameters":[],"src":"2715:2:3"},"returnParameters":{"id":1414,"nodeType":"ParameterList","parameters":[],"src":"2744:0:3"},"scope":1508,"src":"2684:111:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1436,"nodeType":"Block","src":"2871:113:3","statements":[{"assignments":[1426],"declarations":[{"constant":false,"id":1426,"mutability":"mutable","name":"$","nameLocation":"2912:1:3","nodeType":"VariableDeclaration","scope":1436,"src":"2881:32:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":1425,"nodeType":"UserDefinedTypeName","pathNode":{"id":1424,"name":"ReentrancyGuardStorage","nameLocations":["2881:22:3"],"nodeType":"IdentifierPath","referencedDeclaration":1396,"src":"2881:22:3"},"referencedDeclaration":1396,"src":"2881:22:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"id":1429,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1427,"name":"_getReentrancyGuardStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2916:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ReentrancyGuardStorage_$1396_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer)"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2916:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2881:63:3"},{"expression":{"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1430,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"2954:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":1432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2956:7:3","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":1395,"src":"2954:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1433,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"2966:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2954:23:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1435,"nodeType":"ExpressionStatement","src":"2954:23:3"}]},"id":1437,"implemented":true,"kind":"function","modifiers":[{"id":1422,"kind":"modifierInvocation","modifierName":{"id":1421,"name":"onlyInitializing","nameLocations":["2854:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"2854:16:3"},"nodeType":"ModifierInvocation","src":"2854:16:3"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"2810:32:3","nodeType":"FunctionDefinition","parameters":{"id":1420,"nodeType":"ParameterList","parameters":[],"src":"2842:2:3"},"returnParameters":{"id":1423,"nodeType":"ParameterList","parameters":[],"src":"2871:0:3"},"scope":1508,"src":"2801:183:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1447,"nodeType":"Block","src":"3385:79:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1440,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"3395:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3395:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1442,"nodeType":"ExpressionStatement","src":"3395:21:3"},{"id":1443,"nodeType":"PlaceholderStatement","src":"3426:1:3"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1444,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"3437:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3437:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1446,"nodeType":"ExpressionStatement","src":"3437:20:3"}]},"documentation":{"id":1438,"nodeType":"StructuredDocumentation","src":"2990:366:3","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":1448,"name":"nonReentrant","nameLocation":"3370:12:3","nodeType":"ModifierDefinition","parameters":{"id":1439,"nodeType":"ParameterList","parameters":[],"src":"3382:2:3"},"src":"3361:103:3","virtual":false,"visibility":"internal"},{"body":{"id":1472,"nodeType":"Block","src":"3509:345:3","statements":[{"assignments":[1453],"declarations":[{"constant":false,"id":1453,"mutability":"mutable","name":"$","nameLocation":"3550:1:3","nodeType":"VariableDeclaration","scope":1472,"src":"3519:32:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":1452,"nodeType":"UserDefinedTypeName","pathNode":{"id":1451,"name":"ReentrancyGuardStorage","nameLocations":["3519:22:3"],"nodeType":"IdentifierPath","referencedDeclaration":1396,"src":"3519:22:3"},"referencedDeclaration":1396,"src":"3519:22:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"id":1456,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1454,"name":"_getReentrancyGuardStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"3554:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ReentrancyGuardStorage_$1396_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer)"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3554:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3519:63:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1457,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"3670:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":1458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3672:7:3","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":1395,"src":"3670:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1459,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"3683:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3670:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1465,"nodeType":"IfStatement","src":"3666:88:3","trueBody":{"id":1464,"nodeType":"Block","src":"3692:62:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1461,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"3713:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3713:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1463,"nodeType":"RevertStatement","src":"3706:37:3"}]}},{"expression":{"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1466,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"3828:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":1468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3830:7:3","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":1395,"src":"3828:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1469,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"3840:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3828:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1471,"nodeType":"ExpressionStatement","src":"3828:19:3"}]},"id":1473,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"3479:19:3","nodeType":"FunctionDefinition","parameters":{"id":1449,"nodeType":"ParameterList","parameters":[],"src":"3498:2:3"},"returnParameters":{"id":1450,"nodeType":"ParameterList","parameters":[],"src":"3509:0:3"},"scope":1508,"src":"3470:384:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1488,"nodeType":"Block","src":"3898:245:3","statements":[{"assignments":[1478],"declarations":[{"constant":false,"id":1478,"mutability":"mutable","name":"$","nameLocation":"3939:1:3","nodeType":"VariableDeclaration","scope":1488,"src":"3908:32:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":1477,"nodeType":"UserDefinedTypeName","pathNode":{"id":1476,"name":"ReentrancyGuardStorage","nameLocations":["3908:22:3"],"nodeType":"IdentifierPath","referencedDeclaration":1396,"src":"3908:22:3"},"referencedDeclaration":1396,"src":"3908:22:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"id":1481,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1479,"name":"_getReentrancyGuardStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"3943:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ReentrancyGuardStorage_$1396_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer)"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3943:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3908:63:3"},{"expression":{"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1482,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"4113:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":1484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4115:7:3","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":1395,"src":"4113:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1485,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"4125:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4113:23:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1487,"nodeType":"ExpressionStatement","src":"4113:23:3"}]},"id":1489,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"3869:18:3","nodeType":"FunctionDefinition","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[],"src":"3887:2:3"},"returnParameters":{"id":1475,"nodeType":"ParameterList","parameters":[],"src":"3898:0:3"},"scope":1508,"src":"3860:283:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1506,"nodeType":"Block","src":"4386:117:3","statements":[{"assignments":[1497],"declarations":[{"constant":false,"id":1497,"mutability":"mutable","name":"$","nameLocation":"4427:1:3","nodeType":"VariableDeclaration","scope":1506,"src":"4396:32:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":1496,"nodeType":"UserDefinedTypeName","pathNode":{"id":1495,"name":"ReentrancyGuardStorage","nameLocations":["4396:22:3"],"nodeType":"IdentifierPath","referencedDeclaration":1396,"src":"4396:22:3"},"referencedDeclaration":1396,"src":"4396:22:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"id":1500,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1498,"name":"_getReentrancyGuardStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"4431:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ReentrancyGuardStorage_$1396_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4431:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4396:63:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1501,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"4476:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$1396_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":1502,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4478:7:3","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":1395,"src":"4476:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1503,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"4489:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4476:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1494,"id":1505,"nodeType":"Return","src":"4469:27:3"}]},"documentation":{"id":1490,"nodeType":"StructuredDocumentation","src":"4149:168:3","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":1507,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"4331:23:3","nodeType":"FunctionDefinition","parameters":{"id":1491,"nodeType":"ParameterList","parameters":[],"src":"4354:2:3"},"returnParameters":{"id":1494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1507,"src":"4380:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1492,"name":"bool","nodeType":"ElementaryTypeName","src":"4380:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4379:6:3"},"scope":1508,"src":"4322:181:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1509,"src":"1094:3411:3","usedErrors":[16,19,1410],"usedEvents":[24]}],"src":"109:4397:3"},"id":3},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"ERC165Upgradeable":[1548],"IERC165":[3169],"Initializable":[253]},"id":1549,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1510,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":1512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1549,"sourceUnit":3170,"src":"140:80:4","symbolAliases":[{"foreign":{"id":1511,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"148:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":1514,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1549,"sourceUnit":254,"src":"221:66:4","symbolAliases":[{"foreign":{"id":1513,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"229:13:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1516,"name":"Initializable","nameLocations":["808:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":253,"src":"808:13:4"},"id":1517,"nodeType":"InheritanceSpecifier","src":"808:13:4"},{"baseName":{"id":1518,"name":"IERC165","nameLocations":["823:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":3169,"src":"823:7:4"},"id":1519,"nodeType":"InheritanceSpecifier","src":"823:7:4"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1515,"nodeType":"StructuredDocumentation","src":"289:479:4","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1548,"linearizedBaseContracts":[1548,3169,253],"name":"ERC165Upgradeable","nameLocation":"787:17:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":1524,"nodeType":"Block","src":"888:7:4","statements":[]},"id":1525,"implemented":true,"kind":"function","modifiers":[{"id":1522,"kind":"modifierInvocation","modifierName":{"id":1521,"name":"onlyInitializing","nameLocations":["871:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"871:16:4"},"nodeType":"ModifierInvocation","src":"871:16:4"}],"name":"__ERC165_init","nameLocation":"846:13:4","nodeType":"FunctionDefinition","parameters":{"id":1520,"nodeType":"ParameterList","parameters":[],"src":"859:2:4"},"returnParameters":{"id":1523,"nodeType":"ParameterList","parameters":[],"src":"888:0:4"},"scope":1548,"src":"837:58:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1530,"nodeType":"Block","src":"962:7:4","statements":[]},"id":1531,"implemented":true,"kind":"function","modifiers":[{"id":1528,"kind":"modifierInvocation","modifierName":{"id":1527,"name":"onlyInitializing","nameLocations":["945:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"945:16:4"},"nodeType":"ModifierInvocation","src":"945:16:4"}],"name":"__ERC165_init_unchained","nameLocation":"910:23:4","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[],"src":"933:2:4"},"returnParameters":{"id":1529,"nodeType":"ParameterList","parameters":[],"src":"962:0:4"},"scope":1548,"src":"901:68:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3168],"body":{"id":1546,"nodeType":"Block","src":"1117:64:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1539,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"1134:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1541,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"1154:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3169_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3169_$","typeString":"type(contract IERC165)"}],"id":1540,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1149:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3169","typeString":"type(contract IERC165)"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1163:11:4","memberName":"interfaceId","nodeType":"MemberAccess","src":"1149:25:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1134:40:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1538,"id":1545,"nodeType":"Return","src":"1127:47:4"}]},"documentation":{"id":1532,"nodeType":"StructuredDocumentation","src":"974:56:4","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1547,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1044:17:4","nodeType":"FunctionDefinition","parameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1534,"mutability":"mutable","name":"interfaceId","nameLocation":"1069:11:4","nodeType":"VariableDeclaration","scope":1547,"src":"1062:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1533,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1062:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1061:20:4"},"returnParameters":{"id":1538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1547,"src":"1111:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1536,"name":"bool","nodeType":"ElementaryTypeName","src":"1111:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1110:6:4"},"scope":1548,"src":"1035:146:4","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1549,"src":"769:414:4","usedErrors":[16,19],"usedEvents":[24]}],"src":"114:1070:4"},"id":4},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","exportedSymbols":{"IERC1363":[1630],"IERC165":[3169],"IERC20":[1853]},"id":1631,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1550,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:5"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"./IERC20.sol","id":1552,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1631,"sourceUnit":1639,"src":"133:36:5","symbolAliases":[{"foreign":{"id":1551,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"141:6:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":1554,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1631,"sourceUnit":1635,"src":"170:38:5","symbolAliases":[{"foreign":{"id":1553,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"178:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1556,"name":"IERC20","nameLocations":["590:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"590:6:5"},"id":1557,"nodeType":"InheritanceSpecifier","src":"590:6:5"},{"baseName":{"id":1558,"name":"IERC165","nameLocations":["598:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":3169,"src":"598:7:5"},"id":1559,"nodeType":"InheritanceSpecifier","src":"598:7:5"}],"canonicalName":"IERC1363","contractDependencies":[],"contractKind":"interface","documentation":{"id":1555,"nodeType":"StructuredDocumentation","src":"210:357:5","text":" @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."},"fullyImplemented":false,"id":1630,"linearizedBaseContracts":[1630,3169,1853],"name":"IERC1363","nameLocation":"578:8:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1560,"nodeType":"StructuredDocumentation","src":"1148:370:5","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"1296ee62","id":1569,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"1532:15:5","nodeType":"FunctionDefinition","parameters":{"id":1565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"to","nameLocation":"1556:2:5","nodeType":"VariableDeclaration","scope":1569,"src":"1548:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1561,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1564,"mutability":"mutable","name":"value","nameLocation":"1568:5:5","nodeType":"VariableDeclaration","scope":1569,"src":"1560:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1563,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1547:27:5"},"returnParameters":{"id":1568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1569,"src":"1593:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1566,"name":"bool","nodeType":"ElementaryTypeName","src":"1593:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1592:6:5"},"scope":1630,"src":"1523:76:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1570,"nodeType":"StructuredDocumentation","src":"1605:453:5","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"4000aea0","id":1581,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"2072:15:5","nodeType":"FunctionDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1572,"mutability":"mutable","name":"to","nameLocation":"2096:2:5","nodeType":"VariableDeclaration","scope":1581,"src":"2088:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1571,"name":"address","nodeType":"ElementaryTypeName","src":"2088:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1574,"mutability":"mutable","name":"value","nameLocation":"2108:5:5","nodeType":"VariableDeclaration","scope":1581,"src":"2100:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1573,"name":"uint256","nodeType":"ElementaryTypeName","src":"2100:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1576,"mutability":"mutable","name":"data","nameLocation":"2130:4:5","nodeType":"VariableDeclaration","scope":1581,"src":"2115:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1575,"name":"bytes","nodeType":"ElementaryTypeName","src":"2115:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2087:48:5"},"returnParameters":{"id":1580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1581,"src":"2154:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1578,"name":"bool","nodeType":"ElementaryTypeName","src":"2154:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2153:6:5"},"scope":1630,"src":"2063:97:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1582,"nodeType":"StructuredDocumentation","src":"2166:453:5","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"d8fbe994","id":1593,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"2633:19:5","nodeType":"FunctionDefinition","parameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1584,"mutability":"mutable","name":"from","nameLocation":"2661:4:5","nodeType":"VariableDeclaration","scope":1593,"src":"2653:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1583,"name":"address","nodeType":"ElementaryTypeName","src":"2653:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"to","nameLocation":"2675:2:5","nodeType":"VariableDeclaration","scope":1593,"src":"2667:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1585,"name":"address","nodeType":"ElementaryTypeName","src":"2667:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1588,"mutability":"mutable","name":"value","nameLocation":"2687:5:5","nodeType":"VariableDeclaration","scope":1593,"src":"2679:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1587,"name":"uint256","nodeType":"ElementaryTypeName","src":"2679:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2652:41:5"},"returnParameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1593,"src":"2712:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1590,"name":"bool","nodeType":"ElementaryTypeName","src":"2712:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2711:6:5"},"scope":1630,"src":"2624:94:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"2724:536:5","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"c1d34b89","id":1607,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"3274:19:5","nodeType":"FunctionDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"from","nameLocation":"3302:4:5","nodeType":"VariableDeclaration","scope":1607,"src":"3294:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1595,"name":"address","nodeType":"ElementaryTypeName","src":"3294:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1598,"mutability":"mutable","name":"to","nameLocation":"3316:2:5","nodeType":"VariableDeclaration","scope":1607,"src":"3308:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1597,"name":"address","nodeType":"ElementaryTypeName","src":"3308:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"value","nameLocation":"3328:5:5","nodeType":"VariableDeclaration","scope":1607,"src":"3320:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1599,"name":"uint256","nodeType":"ElementaryTypeName","src":"3320:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1602,"mutability":"mutable","name":"data","nameLocation":"3350:4:5","nodeType":"VariableDeclaration","scope":1607,"src":"3335:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1601,"name":"bytes","nodeType":"ElementaryTypeName","src":"3335:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3293:62:5"},"returnParameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1607,"src":"3374:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1604,"name":"bool","nodeType":"ElementaryTypeName","src":"3374:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3373:6:5"},"scope":1630,"src":"3265:115:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1608,"nodeType":"StructuredDocumentation","src":"3386:390:5","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"3177029f","id":1617,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"3790:14:5","nodeType":"FunctionDefinition","parameters":{"id":1613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"spender","nameLocation":"3813:7:5","nodeType":"VariableDeclaration","scope":1617,"src":"3805:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1609,"name":"address","nodeType":"ElementaryTypeName","src":"3805:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1612,"mutability":"mutable","name":"value","nameLocation":"3830:5:5","nodeType":"VariableDeclaration","scope":1617,"src":"3822:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1611,"name":"uint256","nodeType":"ElementaryTypeName","src":"3822:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3804:32:5"},"returnParameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1617,"src":"3855:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1614,"name":"bool","nodeType":"ElementaryTypeName","src":"3855:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3854:6:5"},"scope":1630,"src":"3781:80:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"3867:478:5","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"cae9ca51","id":1629,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"4359:14:5","nodeType":"FunctionDefinition","parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1620,"mutability":"mutable","name":"spender","nameLocation":"4382:7:5","nodeType":"VariableDeclaration","scope":1629,"src":"4374:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1619,"name":"address","nodeType":"ElementaryTypeName","src":"4374:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1622,"mutability":"mutable","name":"value","nameLocation":"4399:5:5","nodeType":"VariableDeclaration","scope":1629,"src":"4391:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1621,"name":"uint256","nodeType":"ElementaryTypeName","src":"4391:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1624,"mutability":"mutable","name":"data","nameLocation":"4421:4:5","nodeType":"VariableDeclaration","scope":1629,"src":"4406:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1623,"name":"bytes","nodeType":"ElementaryTypeName","src":"4406:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4373:53:5"},"returnParameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1629,"src":"4445:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1626,"name":"bool","nodeType":"ElementaryTypeName","src":"4445:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4444:6:5"},"scope":1630,"src":"4350:101:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1631,"src":"568:3885:5","usedErrors":[],"usedEvents":[1787,1796]}],"src":"107:4347:5"},"id":5},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[3169]},"id":1635,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1632,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":1634,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1635,"sourceUnit":3170,"src":"132:59:6","symbolAliases":[{"foreign":{"id":1633,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"140:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:6"},"id":6},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[1853]},"id":1639,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1636,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":1638,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1639,"sourceUnit":1854,"src":"131:49:7","symbolAliases":[{"foreign":{"id":1637,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"139:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"105:76:7"},"id":7},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[1775],"IERC20Errors":[1680],"IERC721Errors":[1728]},"id":1776,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1640,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1641,"nodeType":"StructuredDocumentation","src":"138:141:8","text":" @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."},"fullyImplemented":true,"id":1680,"linearizedBaseContracts":[1680],"name":"IERC20Errors","nameLocation":"290:12:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1642,"nodeType":"StructuredDocumentation","src":"309:309:8","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":1650,"name":"ERC20InsufficientBalance","nameLocation":"629:24:8","nodeType":"ErrorDefinition","parameters":{"id":1649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1644,"mutability":"mutable","name":"sender","nameLocation":"662:6:8","nodeType":"VariableDeclaration","scope":1650,"src":"654:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1643,"name":"address","nodeType":"ElementaryTypeName","src":"654:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"balance","nameLocation":"678:7:8","nodeType":"VariableDeclaration","scope":1650,"src":"670:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"670:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1648,"mutability":"mutable","name":"needed","nameLocation":"695:6:8","nodeType":"VariableDeclaration","scope":1650,"src":"687:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1647,"name":"uint256","nodeType":"ElementaryTypeName","src":"687:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"653:49:8"},"src":"623:80:8"},{"documentation":{"id":1651,"nodeType":"StructuredDocumentation","src":"709:152:8","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":1655,"name":"ERC20InvalidSender","nameLocation":"872:18:8","nodeType":"ErrorDefinition","parameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1653,"mutability":"mutable","name":"sender","nameLocation":"899:6:8","nodeType":"VariableDeclaration","scope":1655,"src":"891:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1652,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:16:8"},"src":"866:41:8"},{"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"913:159:8","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":1660,"name":"ERC20InvalidReceiver","nameLocation":"1083:20:8","nodeType":"ErrorDefinition","parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"receiver","nameLocation":"1112:8:8","nodeType":"VariableDeclaration","scope":1660,"src":"1104:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1657,"name":"address","nodeType":"ElementaryTypeName","src":"1104:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1103:18:8"},"src":"1077:45:8"},{"documentation":{"id":1661,"nodeType":"StructuredDocumentation","src":"1128:345:8","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":1669,"name":"ERC20InsufficientAllowance","nameLocation":"1484:26:8","nodeType":"ErrorDefinition","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"spender","nameLocation":"1519:7:8","nodeType":"VariableDeclaration","scope":1669,"src":"1511:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1662,"name":"address","nodeType":"ElementaryTypeName","src":"1511:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"allowance","nameLocation":"1536:9:8","nodeType":"VariableDeclaration","scope":1669,"src":"1528:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1667,"mutability":"mutable","name":"needed","nameLocation":"1555:6:8","nodeType":"VariableDeclaration","scope":1669,"src":"1547:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1666,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1510:52:8"},"src":"1478:85:8"},{"documentation":{"id":1670,"nodeType":"StructuredDocumentation","src":"1569:174:8","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":1674,"name":"ERC20InvalidApprover","nameLocation":"1754:20:8","nodeType":"ErrorDefinition","parameters":{"id":1673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1672,"mutability":"mutable","name":"approver","nameLocation":"1783:8:8","nodeType":"VariableDeclaration","scope":1674,"src":"1775:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1671,"name":"address","nodeType":"ElementaryTypeName","src":"1775:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1774:18:8"},"src":"1748:45:8"},{"documentation":{"id":1675,"nodeType":"StructuredDocumentation","src":"1799:195:8","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":1679,"name":"ERC20InvalidSpender","nameLocation":"2005:19:8","nodeType":"ErrorDefinition","parameters":{"id":1678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1677,"mutability":"mutable","name":"spender","nameLocation":"2033:7:8","nodeType":"VariableDeclaration","scope":1679,"src":"2025:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1676,"name":"address","nodeType":"ElementaryTypeName","src":"2025:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2024:17:8"},"src":"1999:43:8"}],"scope":1776,"src":"280:1764:8","usedErrors":[1650,1655,1660,1669,1674,1679],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1681,"nodeType":"StructuredDocumentation","src":"2046:143:8","text":" @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."},"fullyImplemented":true,"id":1728,"linearizedBaseContracts":[1728],"name":"IERC721Errors","nameLocation":"2200:13:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"2220:219:8","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":1686,"name":"ERC721InvalidOwner","nameLocation":"2450:18:8","nodeType":"ErrorDefinition","parameters":{"id":1685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"mutability":"mutable","name":"owner","nameLocation":"2477:5:8","nodeType":"VariableDeclaration","scope":1686,"src":"2469:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1683,"name":"address","nodeType":"ElementaryTypeName","src":"2469:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2468:15:8"},"src":"2444:40:8"},{"documentation":{"id":1687,"nodeType":"StructuredDocumentation","src":"2490:132:8","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":1691,"name":"ERC721NonexistentToken","nameLocation":"2633:22:8","nodeType":"ErrorDefinition","parameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"tokenId","nameLocation":"2664:7:8","nodeType":"VariableDeclaration","scope":1691,"src":"2656:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1688,"name":"uint256","nodeType":"ElementaryTypeName","src":"2656:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2655:17:8"},"src":"2627:46:8"},{"documentation":{"id":1692,"nodeType":"StructuredDocumentation","src":"2679:289:8","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":1700,"name":"ERC721IncorrectOwner","nameLocation":"2979:20:8","nodeType":"ErrorDefinition","parameters":{"id":1699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1694,"mutability":"mutable","name":"sender","nameLocation":"3008:6:8","nodeType":"VariableDeclaration","scope":1700,"src":"3000:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1693,"name":"address","nodeType":"ElementaryTypeName","src":"3000:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1696,"mutability":"mutable","name":"tokenId","nameLocation":"3024:7:8","nodeType":"VariableDeclaration","scope":1700,"src":"3016:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"3016:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1698,"mutability":"mutable","name":"owner","nameLocation":"3041:5:8","nodeType":"VariableDeclaration","scope":1700,"src":"3033:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1697,"name":"address","nodeType":"ElementaryTypeName","src":"3033:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2999:48:8"},"src":"2973:75:8"},{"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"3054:152:8","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":1705,"name":"ERC721InvalidSender","nameLocation":"3217:19:8","nodeType":"ErrorDefinition","parameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"sender","nameLocation":"3245:6:8","nodeType":"VariableDeclaration","scope":1705,"src":"3237:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"3237:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3236:16:8"},"src":"3211:42:8"},{"documentation":{"id":1706,"nodeType":"StructuredDocumentation","src":"3259:159:8","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":1710,"name":"ERC721InvalidReceiver","nameLocation":"3429:21:8","nodeType":"ErrorDefinition","parameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"receiver","nameLocation":"3459:8:8","nodeType":"VariableDeclaration","scope":1710,"src":"3451:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1707,"name":"address","nodeType":"ElementaryTypeName","src":"3451:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3450:18:8"},"src":"3423:46:8"},{"documentation":{"id":1711,"nodeType":"StructuredDocumentation","src":"3475:247:8","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":1717,"name":"ERC721InsufficientApproval","nameLocation":"3733:26:8","nodeType":"ErrorDefinition","parameters":{"id":1716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"operator","nameLocation":"3768:8:8","nodeType":"VariableDeclaration","scope":1717,"src":"3760:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1712,"name":"address","nodeType":"ElementaryTypeName","src":"3760:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1715,"mutability":"mutable","name":"tokenId","nameLocation":"3786:7:8","nodeType":"VariableDeclaration","scope":1717,"src":"3778:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1714,"name":"uint256","nodeType":"ElementaryTypeName","src":"3778:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3759:35:8"},"src":"3727:68:8"},{"documentation":{"id":1718,"nodeType":"StructuredDocumentation","src":"3801:174:8","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":1722,"name":"ERC721InvalidApprover","nameLocation":"3986:21:8","nodeType":"ErrorDefinition","parameters":{"id":1721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1720,"mutability":"mutable","name":"approver","nameLocation":"4016:8:8","nodeType":"VariableDeclaration","scope":1722,"src":"4008:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1719,"name":"address","nodeType":"ElementaryTypeName","src":"4008:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4007:18:8"},"src":"3980:46:8"},{"documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"4032:197:8","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":1727,"name":"ERC721InvalidOperator","nameLocation":"4240:21:8","nodeType":"ErrorDefinition","parameters":{"id":1726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"mutability":"mutable","name":"operator","nameLocation":"4270:8:8","nodeType":"VariableDeclaration","scope":1727,"src":"4262:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1724,"name":"address","nodeType":"ElementaryTypeName","src":"4262:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4261:18:8"},"src":"4234:46:8"}],"scope":1776,"src":"2190:2092:8","usedErrors":[1686,1691,1700,1705,1710,1717,1722,1727],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1729,"nodeType":"StructuredDocumentation","src":"4284:145:8","text":" @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."},"fullyImplemented":true,"id":1775,"linearizedBaseContracts":[1775],"name":"IERC1155Errors","nameLocation":"4440:14:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1730,"nodeType":"StructuredDocumentation","src":"4461:361:8","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":1740,"name":"ERC1155InsufficientBalance","nameLocation":"4833:26:8","nodeType":"ErrorDefinition","parameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1732,"mutability":"mutable","name":"sender","nameLocation":"4868:6:8","nodeType":"VariableDeclaration","scope":1740,"src":"4860:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1731,"name":"address","nodeType":"ElementaryTypeName","src":"4860:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1734,"mutability":"mutable","name":"balance","nameLocation":"4884:7:8","nodeType":"VariableDeclaration","scope":1740,"src":"4876:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1733,"name":"uint256","nodeType":"ElementaryTypeName","src":"4876:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1736,"mutability":"mutable","name":"needed","nameLocation":"4901:6:8","nodeType":"VariableDeclaration","scope":1740,"src":"4893:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1735,"name":"uint256","nodeType":"ElementaryTypeName","src":"4893:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"tokenId","nameLocation":"4917:7:8","nodeType":"VariableDeclaration","scope":1740,"src":"4909:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"4909:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4859:66:8"},"src":"4827:99:8"},{"documentation":{"id":1741,"nodeType":"StructuredDocumentation","src":"4932:152:8","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":1745,"name":"ERC1155InvalidSender","nameLocation":"5095:20:8","nodeType":"ErrorDefinition","parameters":{"id":1744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1743,"mutability":"mutable","name":"sender","nameLocation":"5124:6:8","nodeType":"VariableDeclaration","scope":1745,"src":"5116:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1742,"name":"address","nodeType":"ElementaryTypeName","src":"5116:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5115:16:8"},"src":"5089:43:8"},{"documentation":{"id":1746,"nodeType":"StructuredDocumentation","src":"5138:159:8","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":1750,"name":"ERC1155InvalidReceiver","nameLocation":"5308:22:8","nodeType":"ErrorDefinition","parameters":{"id":1749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1748,"mutability":"mutable","name":"receiver","nameLocation":"5339:8:8","nodeType":"VariableDeclaration","scope":1750,"src":"5331:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1747,"name":"address","nodeType":"ElementaryTypeName","src":"5331:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5330:18:8"},"src":"5302:47:8"},{"documentation":{"id":1751,"nodeType":"StructuredDocumentation","src":"5355:256:8","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":1757,"name":"ERC1155MissingApprovalForAll","nameLocation":"5622:28:8","nodeType":"ErrorDefinition","parameters":{"id":1756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"operator","nameLocation":"5659:8:8","nodeType":"VariableDeclaration","scope":1757,"src":"5651:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1752,"name":"address","nodeType":"ElementaryTypeName","src":"5651:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1755,"mutability":"mutable","name":"owner","nameLocation":"5677:5:8","nodeType":"VariableDeclaration","scope":1757,"src":"5669:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1754,"name":"address","nodeType":"ElementaryTypeName","src":"5669:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5650:33:8"},"src":"5616:68:8"},{"documentation":{"id":1758,"nodeType":"StructuredDocumentation","src":"5690:174:8","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":1762,"name":"ERC1155InvalidApprover","nameLocation":"5875:22:8","nodeType":"ErrorDefinition","parameters":{"id":1761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1760,"mutability":"mutable","name":"approver","nameLocation":"5906:8:8","nodeType":"VariableDeclaration","scope":1762,"src":"5898:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1759,"name":"address","nodeType":"ElementaryTypeName","src":"5898:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5897:18:8"},"src":"5869:47:8"},{"documentation":{"id":1763,"nodeType":"StructuredDocumentation","src":"5922:197:8","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":1767,"name":"ERC1155InvalidOperator","nameLocation":"6130:22:8","nodeType":"ErrorDefinition","parameters":{"id":1766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1765,"mutability":"mutable","name":"operator","nameLocation":"6161:8:8","nodeType":"VariableDeclaration","scope":1767,"src":"6153:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1764,"name":"address","nodeType":"ElementaryTypeName","src":"6153:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6152:18:8"},"src":"6124:47:8"},{"documentation":{"id":1768,"nodeType":"StructuredDocumentation","src":"6177:280:8","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":1774,"name":"ERC1155InvalidArrayLength","nameLocation":"6468:25:8","nodeType":"ErrorDefinition","parameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"idsLength","nameLocation":"6502:9:8","nodeType":"VariableDeclaration","scope":1774,"src":"6494:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1769,"name":"uint256","nodeType":"ElementaryTypeName","src":"6494:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1772,"mutability":"mutable","name":"valuesLength","nameLocation":"6521:12:8","nodeType":"VariableDeclaration","scope":1774,"src":"6513:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"6513:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6493:41:8"},"src":"6462:73:8"}],"scope":1776,"src":"4430:2107:8","usedErrors":[1740,1745,1750,1757,1762,1767,1774],"usedEvents":[]}],"src":"112:6426:8"},"id":8},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1853]},"id":1854,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1777,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1778,"nodeType":"StructuredDocumentation","src":"132:71:9","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":1853,"linearizedBaseContracts":[1853],"name":"IERC20","nameLocation":"214:6:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1779,"nodeType":"StructuredDocumentation","src":"227:158:9","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1787,"name":"Transfer","nameLocation":"396:8:9","nodeType":"EventDefinition","parameters":{"id":1786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1781,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"421:4:9","nodeType":"VariableDeclaration","scope":1787,"src":"405:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1780,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1783,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"443:2:9","nodeType":"VariableDeclaration","scope":1787,"src":"427:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1782,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1785,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"455:5:9","nodeType":"VariableDeclaration","scope":1787,"src":"447:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1784,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:57:9"},"src":"390:72:9"},{"anonymous":false,"documentation":{"id":1788,"nodeType":"StructuredDocumentation","src":"468:148:9","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1796,"name":"Approval","nameLocation":"627:8:9","nodeType":"EventDefinition","parameters":{"id":1795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"652:5:9","nodeType":"VariableDeclaration","scope":1796,"src":"636:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1789,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1792,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"675:7:9","nodeType":"VariableDeclaration","scope":1796,"src":"659:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1791,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1794,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"692:5:9","nodeType":"VariableDeclaration","scope":1796,"src":"684:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1793,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"635:63:9"},"src":"621:78:9"},{"documentation":{"id":1797,"nodeType":"StructuredDocumentation","src":"705:65:9","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":1802,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"784:11:9","nodeType":"FunctionDefinition","parameters":{"id":1798,"nodeType":"ParameterList","parameters":[],"src":"795:2:9"},"returnParameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1802,"src":"821:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1799,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:9:9"},"scope":1853,"src":"775:55:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1803,"nodeType":"StructuredDocumentation","src":"836:71:9","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":1810,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:9","nodeType":"FunctionDefinition","parameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"account","nameLocation":"939:7:9","nodeType":"VariableDeclaration","scope":1810,"src":"931:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1804,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:9"},"returnParameters":{"id":1809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1810,"src":"971:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1807,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:9"},"scope":1853,"src":"912:68:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1811,"nodeType":"StructuredDocumentation","src":"986:213:9","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1820,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:9","nodeType":"FunctionDefinition","parameters":{"id":1816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1813,"mutability":"mutable","name":"to","nameLocation":"1230:2:9","nodeType":"VariableDeclaration","scope":1820,"src":"1222:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1812,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1815,"mutability":"mutable","name":"value","nameLocation":"1242:5:9","nodeType":"VariableDeclaration","scope":1820,"src":"1234:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1814,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:27:9"},"returnParameters":{"id":1819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1820,"src":"1267:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1817,"name":"bool","nodeType":"ElementaryTypeName","src":"1267:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1266:6:9"},"scope":1853,"src":"1204:69:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"1279:264:9","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1830,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1557:9:9","nodeType":"FunctionDefinition","parameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"owner","nameLocation":"1575:5:9","nodeType":"VariableDeclaration","scope":1830,"src":"1567:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"spender","nameLocation":"1590:7:9","nodeType":"VariableDeclaration","scope":1830,"src":"1582:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1824,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:32:9"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1830,"src":"1622:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:9:9"},"scope":1853,"src":"1548:83:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1831,"nodeType":"StructuredDocumentation","src":"1637:667:9","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1840,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2318:7:9","nodeType":"FunctionDefinition","parameters":{"id":1836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"spender","nameLocation":"2334:7:9","nodeType":"VariableDeclaration","scope":1840,"src":"2326:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1832,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"value","nameLocation":"2351:5:9","nodeType":"VariableDeclaration","scope":1840,"src":"2343:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1834,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2325:32:9"},"returnParameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1840,"src":"2376:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1837,"name":"bool","nodeType":"ElementaryTypeName","src":"2376:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2375:6:9"},"scope":1853,"src":"2309:73:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1841,"nodeType":"StructuredDocumentation","src":"2388:297:9","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1852,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2699:12:9","nodeType":"FunctionDefinition","parameters":{"id":1848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"from","nameLocation":"2720:4:9","nodeType":"VariableDeclaration","scope":1852,"src":"2712:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1842,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1845,"mutability":"mutable","name":"to","nameLocation":"2734:2:9","nodeType":"VariableDeclaration","scope":1852,"src":"2726:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1844,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1847,"mutability":"mutable","name":"value","nameLocation":"2746:5:9","nodeType":"VariableDeclaration","scope":1852,"src":"2738:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1846,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:41:9"},"returnParameters":{"id":1851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1852,"src":"2771:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1849,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:9"},"scope":1853,"src":"2690:87:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1854,"src":"204:2575:9","usedErrors":[],"usedEvents":[1787,1796]}],"src":"106:2674:9"},"id":9},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[2763],"IERC1363":[1630],"IERC20":[1853],"SafeERC20":[2264]},"id":2265,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1855,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2265,"sourceUnit":1854,"src":"141:37:10","symbolAliases":[{"foreign":{"id":1856,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"149:6:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","file":"../../../interfaces/IERC1363.sol","id":1859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2265,"sourceUnit":1631,"src":"179:58:10","symbolAliases":[{"foreign":{"id":1858,"name":"IERC1363","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"187:8:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":1861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2265,"sourceUnit":2764,"src":"238:51:10","symbolAliases":[{"foreign":{"id":1860,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"246:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":1862,"nodeType":"StructuredDocumentation","src":"291:458:10","text":" @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":2264,"linearizedBaseContracts":[2264],"name":"SafeERC20","nameLocation":"758:9:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1863,"nodeType":"StructuredDocumentation","src":"774:65:10","text":" @dev An operation with an ERC-20 token failed."},"errorSelector":"5274afe7","id":1867,"name":"SafeERC20FailedOperation","nameLocation":"850:24:10","nodeType":"ErrorDefinition","parameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"mutability":"mutable","name":"token","nameLocation":"883:5:10","nodeType":"VariableDeclaration","scope":1867,"src":"875:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1864,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"874:15:10"},"src":"844:46:10"},{"documentation":{"id":1868,"nodeType":"StructuredDocumentation","src":"896:71:10","text":" @dev Indicates a failed `decreaseAllowance` request."},"errorSelector":"e570110f","id":1876,"name":"SafeERC20FailedDecreaseAllowance","nameLocation":"978:32:10","nodeType":"ErrorDefinition","parameters":{"id":1875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"spender","nameLocation":"1019:7:10","nodeType":"VariableDeclaration","scope":1876,"src":"1011:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1869,"name":"address","nodeType":"ElementaryTypeName","src":"1011:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1872,"mutability":"mutable","name":"currentAllowance","nameLocation":"1036:16:10","nodeType":"VariableDeclaration","scope":1876,"src":"1028:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1871,"name":"uint256","nodeType":"ElementaryTypeName","src":"1028:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1874,"mutability":"mutable","name":"requestedDecrease","nameLocation":"1062:17:10","nodeType":"VariableDeclaration","scope":1876,"src":"1054:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1873,"name":"uint256","nodeType":"ElementaryTypeName","src":"1054:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:70:10"},"src":"972:109:10"},{"body":{"id":1899,"nodeType":"Block","src":"1343:88:10","statements":[{"expression":{"arguments":[{"id":1888,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"1373:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":1891,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"1395:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1401:8:10","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1820,"src":"1395:14:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":1893,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"1412:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"1416:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1895,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1411:11:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":1889,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"1380:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1384:10:10","memberName":"encodeCall","nodeType":"MemberAccess","src":"1380:14:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1380:43:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1887,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1353:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1353:71:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1898,"nodeType":"ExpressionStatement","src":"1353:71:10"}]},"documentation":{"id":1877,"nodeType":"StructuredDocumentation","src":"1087:179:10","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1900,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1280:12:10","nodeType":"FunctionDefinition","parameters":{"id":1885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"token","nameLocation":"1300:5:10","nodeType":"VariableDeclaration","scope":1900,"src":"1293:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":1879,"nodeType":"UserDefinedTypeName","pathNode":{"id":1878,"name":"IERC20","nameLocations":["1293:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"1293:6:10"},"referencedDeclaration":1853,"src":"1293:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1882,"mutability":"mutable","name":"to","nameLocation":"1315:2:10","nodeType":"VariableDeclaration","scope":1900,"src":"1307:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1881,"name":"address","nodeType":"ElementaryTypeName","src":"1307:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1884,"mutability":"mutable","name":"value","nameLocation":"1327:5:10","nodeType":"VariableDeclaration","scope":1900,"src":"1319:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"1319:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1292:41:10"},"returnParameters":{"id":1886,"nodeType":"ParameterList","parameters":[],"src":"1343:0:10"},"scope":2264,"src":"1271:160:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1926,"nodeType":"Block","src":"1760:98:10","statements":[{"expression":{"arguments":[{"id":1914,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"1790:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":1917,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"1812:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1818:12:10","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1852,"src":"1812:18:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},{"components":[{"id":1919,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"1833:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1920,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"1839:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1843:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1922,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1832:17:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}],"expression":{"id":1915,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"1797:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1801:10:10","memberName":"encodeCall","nodeType":"MemberAccess","src":"1797:14:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1797:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1913,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"1770:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1770:81:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1925,"nodeType":"ExpressionStatement","src":"1770:81:10"}]},"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"1437:228:10","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":1927,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1679:16:10","nodeType":"FunctionDefinition","parameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1904,"mutability":"mutable","name":"token","nameLocation":"1703:5:10","nodeType":"VariableDeclaration","scope":1927,"src":"1696:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":1903,"nodeType":"UserDefinedTypeName","pathNode":{"id":1902,"name":"IERC20","nameLocations":["1696:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"1696:6:10"},"referencedDeclaration":1853,"src":"1696:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"from","nameLocation":"1718:4:10","nodeType":"VariableDeclaration","scope":1927,"src":"1710:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1905,"name":"address","nodeType":"ElementaryTypeName","src":"1710:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1908,"mutability":"mutable","name":"to","nameLocation":"1732:2:10","nodeType":"VariableDeclaration","scope":1927,"src":"1724:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1907,"name":"address","nodeType":"ElementaryTypeName","src":"1724:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1910,"mutability":"mutable","name":"value","nameLocation":"1744:5:10","nodeType":"VariableDeclaration","scope":1927,"src":"1736:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1909,"name":"uint256","nodeType":"ElementaryTypeName","src":"1736:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1695:55:10"},"returnParameters":{"id":1912,"nodeType":"ParameterList","parameters":[],"src":"1760:0:10"},"scope":2264,"src":"1670:188:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1957,"nodeType":"Block","src":"2600:139:10","statements":[{"assignments":[1939],"declarations":[{"constant":false,"id":1939,"mutability":"mutable","name":"oldAllowance","nameLocation":"2618:12:10","nodeType":"VariableDeclaration","scope":1957,"src":"2610:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"2610:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1948,"initialValue":{"arguments":[{"arguments":[{"id":1944,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2657:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$2264","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$2264","typeString":"library SafeERC20"}],"id":1943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2649:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1942,"name":"address","nodeType":"ElementaryTypeName","src":"2649:7:10","typeDescriptions":{}}},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2649:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1946,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"2664:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1940,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"2633:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2639:9:10","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1830,"src":"2633:15:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2633:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2610:62:10"},{"expression":{"arguments":[{"id":1950,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"2695:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},{"id":1951,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"2702:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1952,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"2711:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1953,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"2726:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2711:20:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1949,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"2682:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2682:50:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1956,"nodeType":"ExpressionStatement","src":"2682:50:10"}]},"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"1864:645:10","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":1958,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2523:21:10","nodeType":"FunctionDefinition","parameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1931,"mutability":"mutable","name":"token","nameLocation":"2552:5:10","nodeType":"VariableDeclaration","scope":1958,"src":"2545:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":1930,"nodeType":"UserDefinedTypeName","pathNode":{"id":1929,"name":"IERC20","nameLocations":["2545:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"2545:6:10"},"referencedDeclaration":1853,"src":"2545:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1933,"mutability":"mutable","name":"spender","nameLocation":"2567:7:10","nodeType":"VariableDeclaration","scope":1958,"src":"2559:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1932,"name":"address","nodeType":"ElementaryTypeName","src":"2559:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1935,"mutability":"mutable","name":"value","nameLocation":"2584:5:10","nodeType":"VariableDeclaration","scope":1958,"src":"2576:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"2576:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2544:46:10"},"returnParameters":{"id":1937,"nodeType":"ParameterList","parameters":[],"src":"2600:0:10"},"scope":2264,"src":"2514:225:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2000,"nodeType":"Block","src":"3505:370:10","statements":[{"id":1999,"nodeType":"UncheckedBlock","src":"3515:354:10","statements":[{"assignments":[1970],"declarations":[{"constant":false,"id":1970,"mutability":"mutable","name":"currentAllowance","nameLocation":"3547:16:10","nodeType":"VariableDeclaration","scope":1999,"src":"3539:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1969,"name":"uint256","nodeType":"ElementaryTypeName","src":"3539:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1979,"initialValue":{"arguments":[{"arguments":[{"id":1975,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3590:4:10","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$2264","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$2264","typeString":"library SafeERC20"}],"id":1974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3582:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1973,"name":"address","nodeType":"ElementaryTypeName","src":"3582:7:10","typeDescriptions":{}}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3582:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1977,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"3597:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1971,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"3566:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3572:9:10","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1830,"src":"3566:15:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3566:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3539:66:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1980,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"3623:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1981,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"3642:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3623:36:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1990,"nodeType":"IfStatement","src":"3619:160:10","trueBody":{"id":1989,"nodeType":"Block","src":"3661:118:10","statements":[{"errorCall":{"arguments":[{"id":1984,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"3719:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1985,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"3728:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1986,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"3746:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1983,"name":"SafeERC20FailedDecreaseAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1876,"src":"3686:32:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:78:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1988,"nodeType":"RevertStatement","src":"3679:85:10"}]}},{"expression":{"arguments":[{"id":1992,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"3805:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},{"id":1993,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"3812:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1994,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1970,"src":"3821:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1995,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"3840:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3821:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1991,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"3792:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3792:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1998,"nodeType":"ExpressionStatement","src":"3792:66:10"}]}]},"documentation":{"id":1959,"nodeType":"StructuredDocumentation","src":"2745:657:10","text":" @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3416:21:10","nodeType":"FunctionDefinition","parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"token","nameLocation":"3445:5:10","nodeType":"VariableDeclaration","scope":2001,"src":"3438:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":1961,"nodeType":"UserDefinedTypeName","pathNode":{"id":1960,"name":"IERC20","nameLocations":["3438:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"3438:6:10"},"referencedDeclaration":1853,"src":"3438:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1964,"mutability":"mutable","name":"spender","nameLocation":"3460:7:10","nodeType":"VariableDeclaration","scope":2001,"src":"3452:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1963,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1966,"mutability":"mutable","name":"requestedDecrease","nameLocation":"3477:17:10","nodeType":"VariableDeclaration","scope":2001,"src":"3469:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1965,"name":"uint256","nodeType":"ElementaryTypeName","src":"3469:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3437:58:10"},"returnParameters":{"id":1968,"nodeType":"ParameterList","parameters":[],"src":"3505:0:10"},"scope":2264,"src":"3407:468:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2047,"nodeType":"Block","src":"4529:303:10","statements":[{"assignments":[2013],"declarations":[{"constant":false,"id":2013,"mutability":"mutable","name":"approvalCall","nameLocation":"4552:12:10","nodeType":"VariableDeclaration","scope":2047,"src":"4539:25:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2012,"name":"bytes","nodeType":"ElementaryTypeName","src":"4539:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2022,"initialValue":{"arguments":[{"expression":{"id":2016,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"4582:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4588:7:10","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1840,"src":"4582:13:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":2018,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"4598:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2019,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"4607:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2020,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4597:16:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":2014,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4567:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4571:10:10","memberName":"encodeCall","nodeType":"MemberAccess","src":"4567:14:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4567:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4539:75:10"},{"condition":{"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4629:45:10","subExpression":{"arguments":[{"id":2024,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"4654:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},{"id":2025,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"4661:12:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2023,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"4630:23:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4630:44:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2046,"nodeType":"IfStatement","src":"4625:201:10","trueBody":{"id":2045,"nodeType":"Block","src":"4676:150:10","statements":[{"expression":{"arguments":[{"id":2029,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"4710:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":2032,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"4732:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4738:7:10","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1840,"src":"4732:13:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":2034,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"4748:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":2035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2036,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4747:12:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}],"expression":{"id":2030,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4717:3:10","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4721:10:10","memberName":"encodeCall","nodeType":"MemberAccess","src":"4717:14:10","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4717:43:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2028,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4690:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4690:71:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2039,"nodeType":"ExpressionStatement","src":"4690:71:10"},{"expression":{"arguments":[{"id":2041,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"4795:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},{"id":2042,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"4802:12:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2040,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4775:19:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4775:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2044,"nodeType":"ExpressionStatement","src":"4775:40:10"}]}}]},"documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"3881:566:10","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."},"id":2048,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"4461:12:10","nodeType":"FunctionDefinition","parameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2005,"mutability":"mutable","name":"token","nameLocation":"4481:5:10","nodeType":"VariableDeclaration","scope":2048,"src":"4474:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":2004,"nodeType":"UserDefinedTypeName","pathNode":{"id":2003,"name":"IERC20","nameLocations":["4474:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"4474:6:10"},"referencedDeclaration":1853,"src":"4474:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2007,"mutability":"mutable","name":"spender","nameLocation":"4496:7:10","nodeType":"VariableDeclaration","scope":2048,"src":"4488:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2006,"name":"address","nodeType":"ElementaryTypeName","src":"4488:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2009,"mutability":"mutable","name":"value","nameLocation":"4513:5:10","nodeType":"VariableDeclaration","scope":2048,"src":"4505:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2008,"name":"uint256","nodeType":"ElementaryTypeName","src":"4505:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4473:46:10"},"returnParameters":{"id":2011,"nodeType":"ParameterList","parameters":[],"src":"4529:0:10"},"scope":2264,"src":"4452:380:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2090,"nodeType":"Block","src":"5279:219:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2061,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"5293:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5296:4:10","memberName":"code","nodeType":"MemberAccess","src":"5293:7:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5301:6:10","memberName":"length","nodeType":"MemberAccess","src":"5293:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5311:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5293:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5379:39:10","subExpression":{"arguments":[{"id":2075,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"5402:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2076,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"5406:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2077,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"5413:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2073,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"5380:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5386:15:10","memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":1581,"src":"5380:21:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5380:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2088,"nodeType":"IfStatement","src":"5375:117:10","trueBody":{"id":2087,"nodeType":"Block","src":"5420:72:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2083,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"5474:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}],"id":2082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5466:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2081,"name":"address","nodeType":"ElementaryTypeName","src":"5466:7:10","typeDescriptions":{}}},"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5466:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2080,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"5441:24:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5441:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2086,"nodeType":"RevertStatement","src":"5434:47:10"}]}},"id":2089,"nodeType":"IfStatement","src":"5289:203:10","trueBody":{"id":2072,"nodeType":"Block","src":"5314:55:10","statements":[{"expression":{"arguments":[{"id":2067,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"5341:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},{"id":2068,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"5348:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2069,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"5352:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2066,"name":"safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"5328:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5328:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2071,"nodeType":"ExpressionStatement","src":"5328:30:10"}]}}]},"documentation":{"id":2049,"nodeType":"StructuredDocumentation","src":"4838:333:10","text":" @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":2091,"implemented":true,"kind":"function","modifiers":[],"name":"transferAndCallRelaxed","nameLocation":"5185:22:10","nodeType":"FunctionDefinition","parameters":{"id":2059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"token","nameLocation":"5217:5:10","nodeType":"VariableDeclaration","scope":2091,"src":"5208:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"},"typeName":{"id":2051,"nodeType":"UserDefinedTypeName","pathNode":{"id":2050,"name":"IERC1363","nameLocations":["5208:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1630,"src":"5208:8:10"},"referencedDeclaration":1630,"src":"5208:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":2054,"mutability":"mutable","name":"to","nameLocation":"5232:2:10","nodeType":"VariableDeclaration","scope":2091,"src":"5224:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2053,"name":"address","nodeType":"ElementaryTypeName","src":"5224:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2056,"mutability":"mutable","name":"value","nameLocation":"5244:5:10","nodeType":"VariableDeclaration","scope":2091,"src":"5236:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2055,"name":"uint256","nodeType":"ElementaryTypeName","src":"5236:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2058,"mutability":"mutable","name":"data","nameLocation":"5264:4:10","nodeType":"VariableDeclaration","scope":2091,"src":"5251:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2057,"name":"bytes","nodeType":"ElementaryTypeName","src":"5251:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5207:62:10"},"returnParameters":{"id":2060,"nodeType":"ParameterList","parameters":[],"src":"5279:0:10"},"scope":2264,"src":"5176:322:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2137,"nodeType":"Block","src":"6017:239:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2106,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"6031:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6034:4:10","memberName":"code","nodeType":"MemberAccess","src":"6031:7:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6039:6:10","memberName":"length","nodeType":"MemberAccess","src":"6031:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6049:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6031:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6127:49:10","subExpression":{"arguments":[{"id":2121,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"6154:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2122,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"6160:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2123,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"6164:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2124,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"6171:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2119,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"6128:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6134:19:10","memberName":"transferFromAndCall","nodeType":"MemberAccess","referencedDeclaration":1607,"src":"6128:25:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) external returns (bool)"}},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:48:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2135,"nodeType":"IfStatement","src":"6123:127:10","trueBody":{"id":2134,"nodeType":"Block","src":"6178:72:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2130,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"6232:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}],"id":2129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6224:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2128,"name":"address","nodeType":"ElementaryTypeName","src":"6224:7:10","typeDescriptions":{}}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6224:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2127,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"6199:24:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6199:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2133,"nodeType":"RevertStatement","src":"6192:47:10"}]}},"id":2136,"nodeType":"IfStatement","src":"6027:223:10","trueBody":{"id":2118,"nodeType":"Block","src":"6052:65:10","statements":[{"expression":{"arguments":[{"id":2112,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"6083:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},{"id":2113,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"6090:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2114,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"6096:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2101,"src":"6100:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2111,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"6066:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6066:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2117,"nodeType":"ExpressionStatement","src":"6066:40:10"}]}}]},"documentation":{"id":2092,"nodeType":"StructuredDocumentation","src":"5504:341:10","text":" @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":2138,"implemented":true,"kind":"function","modifiers":[],"name":"transferFromAndCallRelaxed","nameLocation":"5859:26:10","nodeType":"FunctionDefinition","parameters":{"id":2104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"token","nameLocation":"5904:5:10","nodeType":"VariableDeclaration","scope":2138,"src":"5895:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"},"typeName":{"id":2094,"nodeType":"UserDefinedTypeName","pathNode":{"id":2093,"name":"IERC1363","nameLocations":["5895:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1630,"src":"5895:8:10"},"referencedDeclaration":1630,"src":"5895:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":2097,"mutability":"mutable","name":"from","nameLocation":"5927:4:10","nodeType":"VariableDeclaration","scope":2138,"src":"5919:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2096,"name":"address","nodeType":"ElementaryTypeName","src":"5919:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2099,"mutability":"mutable","name":"to","nameLocation":"5949:2:10","nodeType":"VariableDeclaration","scope":2138,"src":"5941:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2098,"name":"address","nodeType":"ElementaryTypeName","src":"5941:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2101,"mutability":"mutable","name":"value","nameLocation":"5969:5:10","nodeType":"VariableDeclaration","scope":2138,"src":"5961:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2100,"name":"uint256","nodeType":"ElementaryTypeName","src":"5961:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"data","nameLocation":"5997:4:10","nodeType":"VariableDeclaration","scope":2138,"src":"5984:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2102,"name":"bytes","nodeType":"ElementaryTypeName","src":"5984:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5885:122:10"},"returnParameters":{"id":2105,"nodeType":"ParameterList","parameters":[],"src":"6017:0:10"},"scope":2264,"src":"5850:406:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2180,"nodeType":"Block","src":"7023:218:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2151,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"7037:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7040:4:10","memberName":"code","nodeType":"MemberAccess","src":"7037:7:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7045:6:10","memberName":"length","nodeType":"MemberAccess","src":"7037:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7055:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7037:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7123:38:10","subExpression":{"arguments":[{"id":2165,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"7145:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"7149:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2167,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"7156:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2163,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"7124:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7130:14:10","memberName":"approveAndCall","nodeType":"MemberAccess","referencedDeclaration":1629,"src":"7124:20:10","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7124:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2178,"nodeType":"IfStatement","src":"7119:116:10","trueBody":{"id":2177,"nodeType":"Block","src":"7163:72:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2173,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"7217:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}],"id":2172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7209:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2171,"name":"address","nodeType":"ElementaryTypeName","src":"7209:7:10","typeDescriptions":{}}},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7209:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2170,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"7184:24:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7184:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2176,"nodeType":"RevertStatement","src":"7177:47:10"}]}},"id":2179,"nodeType":"IfStatement","src":"7033:202:10","trueBody":{"id":2162,"nodeType":"Block","src":"7058:55:10","statements":[{"expression":{"arguments":[{"id":2157,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"7085:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},{"id":2158,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"7092:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2159,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"7096:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2156,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"7072:12:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7072:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2161,"nodeType":"ExpressionStatement","src":"7072:30:10"}]}}]},"documentation":{"id":2139,"nodeType":"StructuredDocumentation","src":"6262:654:10","text":" @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."},"id":2181,"implemented":true,"kind":"function","modifiers":[],"name":"approveAndCallRelaxed","nameLocation":"6930:21:10","nodeType":"FunctionDefinition","parameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2142,"mutability":"mutable","name":"token","nameLocation":"6961:5:10","nodeType":"VariableDeclaration","scope":2181,"src":"6952:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"},"typeName":{"id":2141,"nodeType":"UserDefinedTypeName","pathNode":{"id":2140,"name":"IERC1363","nameLocations":["6952:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1630,"src":"6952:8:10"},"referencedDeclaration":1630,"src":"6952:8:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1630","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":2144,"mutability":"mutable","name":"to","nameLocation":"6976:2:10","nodeType":"VariableDeclaration","scope":2181,"src":"6968:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2143,"name":"address","nodeType":"ElementaryTypeName","src":"6968:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2146,"mutability":"mutable","name":"value","nameLocation":"6988:5:10","nodeType":"VariableDeclaration","scope":2181,"src":"6980:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2145,"name":"uint256","nodeType":"ElementaryTypeName","src":"6980:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2148,"mutability":"mutable","name":"data","nameLocation":"7008:4:10","nodeType":"VariableDeclaration","scope":2181,"src":"6995:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2147,"name":"bytes","nodeType":"ElementaryTypeName","src":"6995:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6951:62:10"},"returnParameters":{"id":2150,"nodeType":"ParameterList","parameters":[],"src":"7023:0:10"},"scope":2264,"src":"6921:320:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2221,"nodeType":"Block","src":"7808:650:10","statements":[{"assignments":[2191],"declarations":[{"constant":false,"id":2191,"mutability":"mutable","name":"returnSize","nameLocation":"7826:10:10","nodeType":"VariableDeclaration","scope":2221,"src":"7818:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"7818:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2192,"nodeType":"VariableDeclarationStatement","src":"7818:18:10"},{"assignments":[2194],"declarations":[{"constant":false,"id":2194,"mutability":"mutable","name":"returnValue","nameLocation":"7854:11:10","nodeType":"VariableDeclaration","scope":2221,"src":"7846:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"7846:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2195,"nodeType":"VariableDeclarationStatement","src":"7846:19:10"},{"AST":{"nodeType":"YulBlock","src":"7900:396:10","statements":[{"nodeType":"YulVariableDeclaration","src":"7914:75:10","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"7934:3:10"},"nodeType":"YulFunctionCall","src":"7934:5:10"},{"name":"token","nodeType":"YulIdentifier","src":"7941:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"7948:1:10","type":"","value":"0"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7955:4:10"},{"kind":"number","nodeType":"YulLiteral","src":"7961:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7951:3:10"},"nodeType":"YulFunctionCall","src":"7951:15:10"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7974:4:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7968:5:10"},"nodeType":"YulFunctionCall","src":"7968:11:10"},{"kind":"number","nodeType":"YulLiteral","src":"7981:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7984:4:10","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"7929:4:10"},"nodeType":"YulFunctionCall","src":"7929:60:10"},"variables":[{"name":"success","nodeType":"YulTypedName","src":"7918:7:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"8050:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"8068:22:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8085:4:10","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8079:5:10"},"nodeType":"YulFunctionCall","src":"8079:11:10"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8072:3:10","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8122:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"8127:1:10","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8130:14:10"},"nodeType":"YulFunctionCall","src":"8130:16:10"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"8107:14:10"},"nodeType":"YulFunctionCall","src":"8107:40:10"},"nodeType":"YulExpressionStatement","src":"8107:40:10"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8171:3:10"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8176:14:10"},"nodeType":"YulFunctionCall","src":"8176:16:10"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8164:6:10"},"nodeType":"YulFunctionCall","src":"8164:29:10"},"nodeType":"YulExpressionStatement","src":"8164:29:10"}]},"condition":{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"8041:7:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8034:6:10"},"nodeType":"YulFunctionCall","src":"8034:15:10"},"nodeType":"YulIf","src":"8031:176:10"},{"nodeType":"YulAssignment","src":"8220:30:10","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"8234:14:10"},"nodeType":"YulFunctionCall","src":"8234:16:10"},"variableNames":[{"name":"returnSize","nodeType":"YulIdentifier","src":"8220:10:10"}]},{"nodeType":"YulAssignment","src":"8263:23:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8284:1:10","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8278:5:10"},"nodeType":"YulFunctionCall","src":"8278:8:10"},"variableNames":[{"name":"returnValue","nodeType":"YulIdentifier","src":"8263:11:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2187,"isOffset":false,"isSlot":false,"src":"7955:4:10","valueSize":1},{"declaration":2187,"isOffset":false,"isSlot":false,"src":"7974:4:10","valueSize":1},{"declaration":2191,"isOffset":false,"isSlot":false,"src":"8220:10:10","valueSize":1},{"declaration":2194,"isOffset":false,"isSlot":false,"src":"8263:11:10","valueSize":1},{"declaration":2185,"isOffset":false,"isSlot":false,"src":"7941:5:10","valueSize":1}],"flags":["memory-safe"],"id":2196,"nodeType":"InlineAssembly","src":"7875:421:10"},{"condition":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2197,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"8310:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8324:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8310:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2208,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"8362:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8377:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8362:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8310:68:10","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":2202,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"8336:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}],"id":2201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8328:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2200,"name":"address","nodeType":"ElementaryTypeName","src":"8328:7:10","typeDescriptions":{}}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8328:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8343:4:10","memberName":"code","nodeType":"MemberAccess","src":"8328:19:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8348:6:10","memberName":"length","nodeType":"MemberAccess","src":"8328:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8358:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8328:31:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2220,"nodeType":"IfStatement","src":"8306:146:10","trueBody":{"id":2219,"nodeType":"Block","src":"8380:72:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2215,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"8434:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}],"id":2214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2213,"name":"address","nodeType":"ElementaryTypeName","src":"8426:7:10","typeDescriptions":{}}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2212,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"8401:24:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8401:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2218,"nodeType":"RevertStatement","src":"8394:47:10"}]}}]},"documentation":{"id":2182,"nodeType":"StructuredDocumentation","src":"7247:486:10","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."},"id":2222,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"7747:19:10","nodeType":"FunctionDefinition","parameters":{"id":2188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"mutability":"mutable","name":"token","nameLocation":"7774:5:10","nodeType":"VariableDeclaration","scope":2222,"src":"7767:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":2184,"nodeType":"UserDefinedTypeName","pathNode":{"id":2183,"name":"IERC20","nameLocations":["7767:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"7767:6:10"},"referencedDeclaration":1853,"src":"7767:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2187,"mutability":"mutable","name":"data","nameLocation":"7794:4:10","nodeType":"VariableDeclaration","scope":2222,"src":"7781:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2186,"name":"bytes","nodeType":"ElementaryTypeName","src":"7781:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7766:33:10"},"returnParameters":{"id":2189,"nodeType":"ParameterList","parameters":[],"src":"7808:0:10"},"scope":2264,"src":"7738:720:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2262,"nodeType":"Block","src":"9049:391:10","statements":[{"assignments":[2234],"declarations":[{"constant":false,"id":2234,"mutability":"mutable","name":"success","nameLocation":"9064:7:10","nodeType":"VariableDeclaration","scope":2262,"src":"9059:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2233,"name":"bool","nodeType":"ElementaryTypeName","src":"9059:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2235,"nodeType":"VariableDeclarationStatement","src":"9059:12:10"},{"assignments":[2237],"declarations":[{"constant":false,"id":2237,"mutability":"mutable","name":"returnSize","nameLocation":"9089:10:10","nodeType":"VariableDeclaration","scope":2262,"src":"9081:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2236,"name":"uint256","nodeType":"ElementaryTypeName","src":"9081:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2238,"nodeType":"VariableDeclarationStatement","src":"9081:18:10"},{"assignments":[2240],"declarations":[{"constant":false,"id":2240,"mutability":"mutable","name":"returnValue","nameLocation":"9117:11:10","nodeType":"VariableDeclaration","scope":2262,"src":"9109:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2239,"name":"uint256","nodeType":"ElementaryTypeName","src":"9109:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2241,"nodeType":"VariableDeclarationStatement","src":"9109:19:10"},{"AST":{"nodeType":"YulBlock","src":"9163:174:10","statements":[{"nodeType":"YulAssignment","src":"9177:71:10","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"9193:3:10"},"nodeType":"YulFunctionCall","src":"9193:5:10"},{"name":"token","nodeType":"YulIdentifier","src":"9200:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"9207:1:10","type":"","value":"0"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9214:4:10"},{"kind":"number","nodeType":"YulLiteral","src":"9220:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9210:3:10"},"nodeType":"YulFunctionCall","src":"9210:15:10"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9233:4:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9227:5:10"},"nodeType":"YulFunctionCall","src":"9227:11:10"},{"kind":"number","nodeType":"YulLiteral","src":"9240:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9243:4:10","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"9188:4:10"},"nodeType":"YulFunctionCall","src":"9188:60:10"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"9177:7:10"}]},{"nodeType":"YulAssignment","src":"9261:30:10","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"9275:14:10"},"nodeType":"YulFunctionCall","src":"9275:16:10"},"variableNames":[{"name":"returnSize","nodeType":"YulIdentifier","src":"9261:10:10"}]},{"nodeType":"YulAssignment","src":"9304:23:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9325:1:10","type":"","value":"0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9319:5:10"},"nodeType":"YulFunctionCall","src":"9319:8:10"},"variableNames":[{"name":"returnValue","nodeType":"YulIdentifier","src":"9304:11:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2228,"isOffset":false,"isSlot":false,"src":"9214:4:10","valueSize":1},{"declaration":2228,"isOffset":false,"isSlot":false,"src":"9233:4:10","valueSize":1},{"declaration":2237,"isOffset":false,"isSlot":false,"src":"9261:10:10","valueSize":1},{"declaration":2240,"isOffset":false,"isSlot":false,"src":"9304:11:10","valueSize":1},{"declaration":2234,"isOffset":false,"isSlot":false,"src":"9177:7:10","valueSize":1},{"declaration":2226,"isOffset":false,"isSlot":false,"src":"9200:5:10","valueSize":1}],"flags":["memory-safe"],"id":2242,"nodeType":"InlineAssembly","src":"9138:199:10"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2243,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"9353:7:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2244,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2237,"src":"9365:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9379:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9365:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2255,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2240,"src":"9416:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9416:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9365:67:10","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":2249,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"9391:5:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}],"id":2248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9383:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2247,"name":"address","nodeType":"ElementaryTypeName","src":"9383:7:10","typeDescriptions":{}}},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9383:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9398:4:10","memberName":"code","nodeType":"MemberAccess","src":"9383:19:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9403:6:10","memberName":"length","nodeType":"MemberAccess","src":"9383:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9383:30:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9364:69:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9353:80:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2232,"id":2261,"nodeType":"Return","src":"9346:87:10"}]},"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"8464:491:10","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."},"id":2263,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"8969:23:10","nodeType":"FunctionDefinition","parameters":{"id":2229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2226,"mutability":"mutable","name":"token","nameLocation":"9000:5:10","nodeType":"VariableDeclaration","scope":2263,"src":"8993:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":2225,"nodeType":"UserDefinedTypeName","pathNode":{"id":2224,"name":"IERC20","nameLocations":["8993:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"8993:6:10"},"referencedDeclaration":1853,"src":"8993:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2228,"mutability":"mutable","name":"data","nameLocation":"9020:4:10","nodeType":"VariableDeclaration","scope":2263,"src":"9007:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2227,"name":"bytes","nodeType":"ElementaryTypeName","src":"9007:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8992:33:10"},"returnParameters":{"id":2232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2263,"src":"9043:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2230,"name":"bool","nodeType":"ElementaryTypeName","src":"9043:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9042:6:10"},"scope":2264,"src":"8960:480:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2265,"src":"750:8692:10","usedErrors":[1867,1876],"usedEvents":[]}],"src":"115:9328:10"},"id":10},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[3169],"IERC721":[2381]},"id":2382,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2266,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:11"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2268,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2382,"sourceUnit":3170,"src":"134:62:11","symbolAliases":[{"foreign":{"id":2267,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"142:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2270,"name":"IERC165","nameLocations":["288:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":3169,"src":"288:7:11"},"id":2271,"nodeType":"InheritanceSpecifier","src":"288:7:11"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"198:68:11","text":" @dev Required interface of an ERC-721 compliant contract."},"fullyImplemented":false,"id":2381,"linearizedBaseContracts":[2381,3169],"name":"IERC721","nameLocation":"277:7:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2272,"nodeType":"StructuredDocumentation","src":"302:88:11","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2280,"name":"Transfer","nameLocation":"401:8:11","nodeType":"EventDefinition","parameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"426:4:11","nodeType":"VariableDeclaration","scope":2280,"src":"410:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2273,"name":"address","nodeType":"ElementaryTypeName","src":"410:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2276,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"448:2:11","nodeType":"VariableDeclaration","scope":2280,"src":"432:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2275,"name":"address","nodeType":"ElementaryTypeName","src":"432:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2278,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"468:7:11","nodeType":"VariableDeclaration","scope":2280,"src":"452:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"452:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"409:67:11"},"src":"395:82:11"},{"anonymous":false,"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"483:94:11","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2289,"name":"Approval","nameLocation":"588:8:11","nodeType":"EventDefinition","parameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2283,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"613:5:11","nodeType":"VariableDeclaration","scope":2289,"src":"597:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"597:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2285,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"636:8:11","nodeType":"VariableDeclaration","scope":2289,"src":"620:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2284,"name":"address","nodeType":"ElementaryTypeName","src":"620:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2287,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"662:7:11","nodeType":"VariableDeclaration","scope":2289,"src":"646:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"596:74:11"},"src":"582:89:11"},{"anonymous":false,"documentation":{"id":2290,"nodeType":"StructuredDocumentation","src":"677:117:11","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2298,"name":"ApprovalForAll","nameLocation":"805:14:11","nodeType":"EventDefinition","parameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2292,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"836:5:11","nodeType":"VariableDeclaration","scope":2298,"src":"820:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2291,"name":"address","nodeType":"ElementaryTypeName","src":"820:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2294,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"859:8:11","nodeType":"VariableDeclaration","scope":2298,"src":"843:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2293,"name":"address","nodeType":"ElementaryTypeName","src":"843:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2296,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"874:8:11","nodeType":"VariableDeclaration","scope":2298,"src":"869:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2295,"name":"bool","nodeType":"ElementaryTypeName","src":"869:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"819:64:11"},"src":"799:85:11"},{"documentation":{"id":2299,"nodeType":"StructuredDocumentation","src":"890:76:11","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2306,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"980:9:11","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"owner","nameLocation":"998:5:11","nodeType":"VariableDeclaration","scope":2306,"src":"990:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"990:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"989:15:11"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"balance","nameLocation":"1036:7:11","nodeType":"VariableDeclaration","scope":2306,"src":"1028:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1028:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1027:17:11"},"scope":2381,"src":"971:74:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2307,"nodeType":"StructuredDocumentation","src":"1051:131:11","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2314,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1196:7:11","nodeType":"FunctionDefinition","parameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"tokenId","nameLocation":"1212:7:11","nodeType":"VariableDeclaration","scope":2314,"src":"1204:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2308,"name":"uint256","nodeType":"ElementaryTypeName","src":"1204:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1203:17:11"},"returnParameters":{"id":2313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"owner","nameLocation":"1252:5:11","nodeType":"VariableDeclaration","scope":2314,"src":"1244:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2311,"name":"address","nodeType":"ElementaryTypeName","src":"1244:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1243:15:11"},"scope":2381,"src":"1187:72:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2315,"nodeType":"StructuredDocumentation","src":"1265:565:11","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2326,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1844:16:11","nodeType":"FunctionDefinition","parameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2317,"mutability":"mutable","name":"from","nameLocation":"1869:4:11","nodeType":"VariableDeclaration","scope":2326,"src":"1861:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2316,"name":"address","nodeType":"ElementaryTypeName","src":"1861:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2319,"mutability":"mutable","name":"to","nameLocation":"1883:2:11","nodeType":"VariableDeclaration","scope":2326,"src":"1875:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2318,"name":"address","nodeType":"ElementaryTypeName","src":"1875:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2321,"mutability":"mutable","name":"tokenId","nameLocation":"1895:7:11","nodeType":"VariableDeclaration","scope":2326,"src":"1887:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2320,"name":"uint256","nodeType":"ElementaryTypeName","src":"1887:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2323,"mutability":"mutable","name":"data","nameLocation":"1919:4:11","nodeType":"VariableDeclaration","scope":2326,"src":"1904:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2322,"name":"bytes","nodeType":"ElementaryTypeName","src":"1904:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1860:64:11"},"returnParameters":{"id":2325,"nodeType":"ParameterList","parameters":[],"src":"1933:0:11"},"scope":2381,"src":"1835:99:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2327,"nodeType":"StructuredDocumentation","src":"1940:706:11","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2336,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2660:16:11","nodeType":"FunctionDefinition","parameters":{"id":2334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2329,"mutability":"mutable","name":"from","nameLocation":"2685:4:11","nodeType":"VariableDeclaration","scope":2336,"src":"2677:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2328,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2331,"mutability":"mutable","name":"to","nameLocation":"2699:2:11","nodeType":"VariableDeclaration","scope":2336,"src":"2691:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2330,"name":"address","nodeType":"ElementaryTypeName","src":"2691:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2333,"mutability":"mutable","name":"tokenId","nameLocation":"2711:7:11","nodeType":"VariableDeclaration","scope":2336,"src":"2703:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2332,"name":"uint256","nodeType":"ElementaryTypeName","src":"2703:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:11"},"returnParameters":{"id":2335,"nodeType":"ParameterList","parameters":[],"src":"2728:0:11"},"scope":2381,"src":"2651:78:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2337,"nodeType":"StructuredDocumentation","src":"2735:733:11","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2346,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3482:12:11","nodeType":"FunctionDefinition","parameters":{"id":2344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2339,"mutability":"mutable","name":"from","nameLocation":"3503:4:11","nodeType":"VariableDeclaration","scope":2346,"src":"3495:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2338,"name":"address","nodeType":"ElementaryTypeName","src":"3495:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2341,"mutability":"mutable","name":"to","nameLocation":"3517:2:11","nodeType":"VariableDeclaration","scope":2346,"src":"3509:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2340,"name":"address","nodeType":"ElementaryTypeName","src":"3509:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2343,"mutability":"mutable","name":"tokenId","nameLocation":"3529:7:11","nodeType":"VariableDeclaration","scope":2346,"src":"3521:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2342,"name":"uint256","nodeType":"ElementaryTypeName","src":"3521:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3494:43:11"},"returnParameters":{"id":2345,"nodeType":"ParameterList","parameters":[],"src":"3546:0:11"},"scope":2381,"src":"3473:74:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2347,"nodeType":"StructuredDocumentation","src":"3553:452:11","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2354,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4019:7:11","nodeType":"FunctionDefinition","parameters":{"id":2352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2349,"mutability":"mutable","name":"to","nameLocation":"4035:2:11","nodeType":"VariableDeclaration","scope":2354,"src":"4027:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2348,"name":"address","nodeType":"ElementaryTypeName","src":"4027:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2351,"mutability":"mutable","name":"tokenId","nameLocation":"4047:7:11","nodeType":"VariableDeclaration","scope":2354,"src":"4039:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2350,"name":"uint256","nodeType":"ElementaryTypeName","src":"4039:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4026:29:11"},"returnParameters":{"id":2353,"nodeType":"ParameterList","parameters":[],"src":"4064:0:11"},"scope":2381,"src":"4010:55:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2355,"nodeType":"StructuredDocumentation","src":"4071:315:11","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2362,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4400:17:11","nodeType":"FunctionDefinition","parameters":{"id":2360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2357,"mutability":"mutable","name":"operator","nameLocation":"4426:8:11","nodeType":"VariableDeclaration","scope":2362,"src":"4418:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2356,"name":"address","nodeType":"ElementaryTypeName","src":"4418:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"approved","nameLocation":"4441:8:11","nodeType":"VariableDeclaration","scope":2362,"src":"4436:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2358,"name":"bool","nodeType":"ElementaryTypeName","src":"4436:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4417:33:11"},"returnParameters":{"id":2361,"nodeType":"ParameterList","parameters":[],"src":"4459:0:11"},"scope":2381,"src":"4391:69:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2363,"nodeType":"StructuredDocumentation","src":"4466:139:11","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2370,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4619:11:11","nodeType":"FunctionDefinition","parameters":{"id":2366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2365,"mutability":"mutable","name":"tokenId","nameLocation":"4639:7:11","nodeType":"VariableDeclaration","scope":2370,"src":"4631:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2364,"name":"uint256","nodeType":"ElementaryTypeName","src":"4631:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4630:17:11"},"returnParameters":{"id":2369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2368,"mutability":"mutable","name":"operator","nameLocation":"4679:8:11","nodeType":"VariableDeclaration","scope":2370,"src":"4671:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2367,"name":"address","nodeType":"ElementaryTypeName","src":"4671:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4670:18:11"},"scope":2381,"src":"4610:79:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2371,"nodeType":"StructuredDocumentation","src":"4695:138:11","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2380,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4847:16:11","nodeType":"FunctionDefinition","parameters":{"id":2376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2373,"mutability":"mutable","name":"owner","nameLocation":"4872:5:11","nodeType":"VariableDeclaration","scope":2380,"src":"4864:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2372,"name":"address","nodeType":"ElementaryTypeName","src":"4864:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2375,"mutability":"mutable","name":"operator","nameLocation":"4887:8:11","nodeType":"VariableDeclaration","scope":2380,"src":"4879:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2374,"name":"address","nodeType":"ElementaryTypeName","src":"4879:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4863:33:11"},"returnParameters":{"id":2379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2380,"src":"4920:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2377,"name":"bool","nodeType":"ElementaryTypeName","src":"4920:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4919:6:11"},"scope":2381,"src":"4838:88:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2382,"src":"267:4661:11","usedErrors":[],"usedEvents":[2280,2289,2298]}],"src":"108:4821:11"},"id":11},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[2399]},"id":2400,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2383,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2384,"nodeType":"StructuredDocumentation","src":"142:154:12","text":" @title ERC-721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC-721 asset contracts."},"fullyImplemented":false,"id":2399,"linearizedBaseContracts":[2399],"name":"IERC721Receiver","nameLocation":"307:15:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2385,"nodeType":"StructuredDocumentation","src":"329:500:12","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2398,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"843:16:12","nodeType":"FunctionDefinition","parameters":{"id":2394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2387,"mutability":"mutable","name":"operator","nameLocation":"877:8:12","nodeType":"VariableDeclaration","scope":2398,"src":"869:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2386,"name":"address","nodeType":"ElementaryTypeName","src":"869:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2389,"mutability":"mutable","name":"from","nameLocation":"903:4:12","nodeType":"VariableDeclaration","scope":2398,"src":"895:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"895:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2391,"mutability":"mutable","name":"tokenId","nameLocation":"925:7:12","nodeType":"VariableDeclaration","scope":2398,"src":"917:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2390,"name":"uint256","nodeType":"ElementaryTypeName","src":"917:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2393,"mutability":"mutable","name":"data","nameLocation":"957:4:12","nodeType":"VariableDeclaration","scope":2398,"src":"942:19:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2392,"name":"bytes","nodeType":"ElementaryTypeName","src":"942:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"859:108:12"},"returnParameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2398,"src":"986:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2395,"name":"bytes4","nodeType":"ElementaryTypeName","src":"986:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"985:8:12"},"scope":2399,"src":"834:160:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2400,"src":"297:699:12","usedErrors":[],"usedEvents":[]}],"src":"116:881:12"},"id":12},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[2381],"IERC721Metadata":[2427]},"id":2428,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2401,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2403,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2428,"sourceUnit":2382,"src":"153:39:13","symbolAliases":[{"foreign":{"id":2402,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2381,"src":"161:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2405,"name":"IERC721","nameLocations":["357:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":2381,"src":"357:7:13"},"id":2406,"nodeType":"InheritanceSpecifier","src":"357:7:13"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2404,"nodeType":"StructuredDocumentation","src":"194:133:13","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2427,"linearizedBaseContracts":[2427,2381,3169],"name":"IERC721Metadata","nameLocation":"338:15:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2407,"nodeType":"StructuredDocumentation","src":"371:58:13","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2412,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:13","nodeType":"FunctionDefinition","parameters":{"id":2408,"nodeType":"ParameterList","parameters":[],"src":"447:2:13"},"returnParameters":{"id":2411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2412,"src":"473:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2409,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:13"},"scope":2427,"src":"434:54:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2413,"nodeType":"StructuredDocumentation","src":"494:60:13","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2418,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:13","nodeType":"FunctionDefinition","parameters":{"id":2414,"nodeType":"ParameterList","parameters":[],"src":"574:2:13"},"returnParameters":{"id":2417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2418,"src":"600:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2415,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:13"},"scope":2427,"src":"559:56:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2419,"nodeType":"StructuredDocumentation","src":"621:90:13","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2426,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:13","nodeType":"FunctionDefinition","parameters":{"id":2422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2421,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:13","nodeType":"VariableDeclaration","scope":2426,"src":"734:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2420,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:13"},"returnParameters":{"id":2425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2426,"src":"774:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2423,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:13"},"scope":2427,"src":"716:73:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2428,"src":"328:463:13","usedErrors":[],"usedEvents":[2280,2289,2298]}],"src":"127:665:13"},"id":13},"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol","exportedSymbols":{"ERC721Utils":[2504],"IERC721Errors":[1728],"IERC721Receiver":[2399]},"id":2505,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2429,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"118:24:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"../IERC721Receiver.sol","id":2431,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2505,"sourceUnit":2400,"src":"144:55:14","symbolAliases":[{"foreign":{"id":2430,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"152:15:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../../interfaces/draft-IERC6093.sol","id":2433,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2505,"sourceUnit":1776,"src":"200:69:14","symbolAliases":[{"foreign":{"id":2432,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"208:13:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC721Utils","contractDependencies":[],"contractKind":"library","documentation":{"id":2434,"nodeType":"StructuredDocumentation","src":"271:159:14","text":" @dev Library that provide common ERC-721 utility functions.\n See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\n _Available since v5.1._"},"fullyImplemented":true,"id":2504,"linearizedBaseContracts":[2504],"name":"ERC721Utils","nameLocation":"439:11:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":2502,"nodeType":"Block","src":"1151:758:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2448,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"1165:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1168:4:14","memberName":"code","nodeType":"MemberAccess","src":"1165:7:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1173:6:14","memberName":"length","nodeType":"MemberAccess","src":"1165:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1165:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2501,"nodeType":"IfStatement","src":"1161:742:14","trueBody":{"id":2500,"nodeType":"Block","src":"1185:718:14","statements":[{"clauses":[{"block":{"id":2478,"nodeType":"Block","src":"1295:214:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2465,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"1317:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":2466,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"1327:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2399_$","typeString":"type(contract IERC721Receiver)"}},"id":2467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1343:16:14","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2398,"src":"1327:32:14","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1360:8:14","memberName":"selector","nodeType":"MemberAccess","src":"1327:41:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1317:51:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2477,"nodeType":"IfStatement","src":"1313:182:14","trueBody":{"id":2476,"nodeType":"Block","src":"1370:125:14","statements":[{"errorCall":{"arguments":[{"id":2473,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"1473:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2470,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"1437:13:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Errors_$1728_$","typeString":"type(contract IERC721Errors)"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:21:14","memberName":"ERC721InvalidReceiver","nodeType":"MemberAccess","referencedDeclaration":1710,"src":"1437:35:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1437:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2475,"nodeType":"RevertStatement","src":"1430:46:14"}]}}]},"errorName":"","id":2479,"nodeType":"TryCatchClause","parameters":{"id":2464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2463,"mutability":"mutable","name":"retval","nameLocation":"1287:6:14","nodeType":"VariableDeclaration","scope":2479,"src":"1280:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2462,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1280:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1279:15:14"},"src":"1271:238:14"},{"block":{"id":2497,"nodeType":"Block","src":"1538:355:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2483,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"1560:6:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1567:6:14","memberName":"length","nodeType":"MemberAccess","src":"1560:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1577:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1560:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2495,"nodeType":"Block","src":"1728:151:14","statements":[{"AST":{"nodeType":"YulBlock","src":"1775:86:14","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1812:2:14","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"1816:6:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1808:3:14"},"nodeType":"YulFunctionCall","src":"1808:15:14"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"1831:6:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1825:5:14"},"nodeType":"YulFunctionCall","src":"1825:13:14"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1801:6:14"},"nodeType":"YulFunctionCall","src":"1801:38:14"},"nodeType":"YulExpressionStatement","src":"1801:38:14"}]},"evmVersion":"paris","externalReferences":[{"declaration":2481,"isOffset":false,"isSlot":false,"src":"1816:6:14","valueSize":1},{"declaration":2481,"isOffset":false,"isSlot":false,"src":"1831:6:14","valueSize":1}],"flags":["memory-safe"],"id":2494,"nodeType":"InlineAssembly","src":"1750:111:14"}]},"id":2496,"nodeType":"IfStatement","src":"1556:323:14","trueBody":{"id":2493,"nodeType":"Block","src":"1580:142:14","statements":[{"errorCall":{"arguments":[{"id":2490,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"1700:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2487,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"1664:13:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Errors_$1728_$","typeString":"type(contract IERC721Errors)"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1678:21:14","memberName":"ERC721InvalidReceiver","nodeType":"MemberAccess","referencedDeclaration":1710,"src":"1664:35:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1664:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2492,"nodeType":"RevertStatement","src":"1657:46:14"}]}}]},"errorName":"","id":2498,"nodeType":"TryCatchClause","parameters":{"id":2482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2481,"mutability":"mutable","name":"reason","nameLocation":"1530:6:14","nodeType":"VariableDeclaration","scope":2498,"src":"1517:19:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2480,"name":"bytes","nodeType":"ElementaryTypeName","src":"1517:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1516:21:14"},"src":"1510:383:14"}],"externalCall":{"arguments":[{"id":2457,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"1240:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2458,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"1250:4:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2459,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"1256:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2460,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"1265:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2454,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"1219:2:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2453,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"1203:15:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2399_$","typeString":"type(contract IERC721Receiver)"}},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1203:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$2399","typeString":"contract IERC721Receiver"}},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1223:16:14","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2398,"src":"1203:36:14","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1203:67:14","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2499,"nodeType":"TryStatement","src":"1199:694:14"}]}}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"457:523:14","text":" @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\n on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\n The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\n Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\n the transfer."},"id":2503,"implemented":true,"kind":"function","modifiers":[],"name":"checkOnERC721Received","nameLocation":"994:21:14","nodeType":"FunctionDefinition","parameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"operator","nameLocation":"1033:8:14","nodeType":"VariableDeclaration","scope":2503,"src":"1025:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2436,"name":"address","nodeType":"ElementaryTypeName","src":"1025:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2439,"mutability":"mutable","name":"from","nameLocation":"1059:4:14","nodeType":"VariableDeclaration","scope":2503,"src":"1051:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2438,"name":"address","nodeType":"ElementaryTypeName","src":"1051:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"to","nameLocation":"1081:2:14","nodeType":"VariableDeclaration","scope":2503,"src":"1073:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2440,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"tokenId","nameLocation":"1101:7:14","nodeType":"VariableDeclaration","scope":2503,"src":"1093:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2442,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2445,"mutability":"mutable","name":"data","nameLocation":"1131:4:14","nodeType":"VariableDeclaration","scope":2503,"src":"1118:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2444,"name":"bytes","nodeType":"ElementaryTypeName","src":"1118:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1015:126:14"},"returnParameters":{"id":2447,"nodeType":"ParameterList","parameters":[],"src":"1151:0:14"},"scope":2504,"src":"985:924:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2505,"src":"431:1480:14","usedErrors":[],"usedEvents":[]}],"src":"118:1794:14"},"id":14},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2763],"Errors":[2785]},"id":2764,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2506,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:15"},{"absolutePath":"@openzeppelin/contracts/utils/Errors.sol","file":"./Errors.sol","id":2508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2764,"sourceUnit":2786,"src":"127:36:15","symbolAliases":[{"foreign":{"id":2507,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"135:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2509,"nodeType":"StructuredDocumentation","src":"165:67:15","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2763,"linearizedBaseContracts":[2763],"name":"Address","nameLocation":"241:7:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2510,"nodeType":"StructuredDocumentation","src":"255:75:15","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":2514,"name":"AddressEmptyCode","nameLocation":"341:16:15","nodeType":"ErrorDefinition","parameters":{"id":2513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2512,"mutability":"mutable","name":"target","nameLocation":"366:6:15","nodeType":"VariableDeclaration","scope":2514,"src":"358:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2511,"name":"address","nodeType":"ElementaryTypeName","src":"358:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"357:16:15"},"src":"335:39:15"},{"body":{"id":2560,"nodeType":"Block","src":"1361:278:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2524,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"1383:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2763","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2763","typeString":"library Address"}],"id":2523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1375:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2522,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:15","typeDescriptions":{}}},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1375:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1389:7:15","memberName":"balance","nodeType":"MemberAccess","src":"1375:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2527,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"1399:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1375:30:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2541,"nodeType":"IfStatement","src":"1371:125:15","trueBody":{"id":2540,"nodeType":"Block","src":"1407:89:15","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":2534,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"1463:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2763","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2763","typeString":"library Address"}],"id":2533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1455:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2532,"name":"address","nodeType":"ElementaryTypeName","src":"1455:7:15","typeDescriptions":{}}},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1469:7:15","memberName":"balance","nodeType":"MemberAccess","src":"1455:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2537,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"1478:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2529,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"1428:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$2785_$","typeString":"type(library Errors)"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1435:19:15","memberName":"InsufficientBalance","nodeType":"MemberAccess","referencedDeclaration":2773,"src":"1428:26:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1428:57:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2539,"nodeType":"RevertStatement","src":"1421:64:15"}]}},{"assignments":[2543,null],"declarations":[{"constant":false,"id":2543,"mutability":"mutable","name":"success","nameLocation":"1512:7:15","nodeType":"VariableDeclaration","scope":2560,"src":"1507:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2542,"name":"bool","nodeType":"ElementaryTypeName","src":"1507:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2550,"initialValue":{"arguments":[{"hexValue":"","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1555:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2544,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"1525:9:15","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:4:15","memberName":"call","nodeType":"MemberAccess","src":"1525:14:15","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2546,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"1547:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1525:29:15","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1525:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1506:52:15"},{"condition":{"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1572:8:15","subExpression":{"id":2551,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2543,"src":"1573:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2559,"nodeType":"IfStatement","src":"1568:65:15","trueBody":{"id":2558,"nodeType":"Block","src":"1582:51:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2553,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"1603:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$2785_$","typeString":"type(library Errors)"}},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1610:10:15","memberName":"FailedCall","nodeType":"MemberAccess","referencedDeclaration":2776,"src":"1603:17:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1603:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2557,"nodeType":"RevertStatement","src":"1596:26:15"}]}}]},"documentation":{"id":2515,"nodeType":"StructuredDocumentation","src":"380:905:15","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2561,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1299:9:15","nodeType":"FunctionDefinition","parameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2517,"mutability":"mutable","name":"recipient","nameLocation":"1325:9:15","nodeType":"VariableDeclaration","scope":2561,"src":"1309:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2516,"name":"address","nodeType":"ElementaryTypeName","src":"1309:15:15","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"amount","nameLocation":"1344:6:15","nodeType":"VariableDeclaration","scope":2561,"src":"1336:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"1336:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1308:43:15"},"returnParameters":{"id":2521,"nodeType":"ParameterList","parameters":[],"src":"1361:0:15"},"scope":2763,"src":"1290:349:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2577,"nodeType":"Block","src":"2573:62:15","statements":[{"expression":{"arguments":[{"id":2572,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"2612:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2573,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"2620:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2626:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2571,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2628,"src":"2590:21:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2590:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2570,"id":2576,"nodeType":"Return","src":"2583:45:15"}]},"documentation":{"id":2562,"nodeType":"StructuredDocumentation","src":"1645:834:15","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {Errors.FailedCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":2578,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2493:12:15","nodeType":"FunctionDefinition","parameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2564,"mutability":"mutable","name":"target","nameLocation":"2514:6:15","nodeType":"VariableDeclaration","scope":2578,"src":"2506:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2563,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2566,"mutability":"mutable","name":"data","nameLocation":"2535:4:15","nodeType":"VariableDeclaration","scope":2578,"src":"2522:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2565,"name":"bytes","nodeType":"ElementaryTypeName","src":"2522:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2505:35:15"},"returnParameters":{"id":2570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2578,"src":"2559:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2568,"name":"bytes","nodeType":"ElementaryTypeName","src":"2559:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2558:14:15"},"scope":2763,"src":"2484:151:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2627,"nodeType":"Block","src":"3072:294:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2592,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3094:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2763","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2763","typeString":"library Address"}],"id":2591,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3086:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2590,"name":"address","nodeType":"ElementaryTypeName","src":"3086:7:15","typeDescriptions":{}}},"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3086:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3100:7:15","memberName":"balance","nodeType":"MemberAccess","src":"3086:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"3110:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3086:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2609,"nodeType":"IfStatement","src":"3082:123:15","trueBody":{"id":2608,"nodeType":"Block","src":"3117:88:15","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":2602,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3173:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2763","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2763","typeString":"library Address"}],"id":2601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3165:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2600,"name":"address","nodeType":"ElementaryTypeName","src":"3165:7:15","typeDescriptions":{}}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3165:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3179:7:15","memberName":"balance","nodeType":"MemberAccess","src":"3165:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2605,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"3188:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2597,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"3138:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$2785_$","typeString":"type(library Errors)"}},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3145:19:15","memberName":"InsufficientBalance","nodeType":"MemberAccess","referencedDeclaration":2773,"src":"3138:26:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3138:56:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2607,"nodeType":"RevertStatement","src":"3131:63:15"}]}},{"assignments":[2611,2613],"declarations":[{"constant":false,"id":2611,"mutability":"mutable","name":"success","nameLocation":"3220:7:15","nodeType":"VariableDeclaration","scope":2627,"src":"3215:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2610,"name":"bool","nodeType":"ElementaryTypeName","src":"3215:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2613,"mutability":"mutable","name":"returndata","nameLocation":"3242:10:15","nodeType":"VariableDeclaration","scope":2627,"src":"3229:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2612,"name":"bytes","nodeType":"ElementaryTypeName","src":"3229:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2620,"initialValue":{"arguments":[{"id":2618,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"3282:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2614,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2581,"src":"3256:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3263:4:15","memberName":"call","nodeType":"MemberAccess","src":"3256:11:15","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2616,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"3275:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3256:25:15","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3256:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3214:73:15"},{"expression":{"arguments":[{"id":2622,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2581,"src":"3331:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2623,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"3339:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2624,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"3348:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2621,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"3304:26:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3304:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2589,"id":2626,"nodeType":"Return","src":"3297:62:15"}]},"documentation":{"id":2579,"nodeType":"StructuredDocumentation","src":"2641:313:15","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":2628,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"2968:21:15","nodeType":"FunctionDefinition","parameters":{"id":2586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2581,"mutability":"mutable","name":"target","nameLocation":"2998:6:15","nodeType":"VariableDeclaration","scope":2628,"src":"2990:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2580,"name":"address","nodeType":"ElementaryTypeName","src":"2990:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2583,"mutability":"mutable","name":"data","nameLocation":"3019:4:15","nodeType":"VariableDeclaration","scope":2628,"src":"3006:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2582,"name":"bytes","nodeType":"ElementaryTypeName","src":"3006:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2585,"mutability":"mutable","name":"value","nameLocation":"3033:5:15","nodeType":"VariableDeclaration","scope":2628,"src":"3025:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2584,"name":"uint256","nodeType":"ElementaryTypeName","src":"3025:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2989:50:15"},"returnParameters":{"id":2589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2628,"src":"3058:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2587,"name":"bytes","nodeType":"ElementaryTypeName","src":"3058:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3057:14:15"},"scope":2763,"src":"2959:407:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2653,"nodeType":"Block","src":"3605:154:15","statements":[{"assignments":[2639,2641],"declarations":[{"constant":false,"id":2639,"mutability":"mutable","name":"success","nameLocation":"3621:7:15","nodeType":"VariableDeclaration","scope":2653,"src":"3616:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2638,"name":"bool","nodeType":"ElementaryTypeName","src":"3616:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"returndata","nameLocation":"3643:10:15","nodeType":"VariableDeclaration","scope":2653,"src":"3630:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2640,"name":"bytes","nodeType":"ElementaryTypeName","src":"3630:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2646,"initialValue":{"arguments":[{"id":2644,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"3675:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2642,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"3657:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3664:10:15","memberName":"staticcall","nodeType":"MemberAccess","src":"3657:17:15","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3657:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3615:65:15"},{"expression":{"arguments":[{"id":2648,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"3724:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2649,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"3732:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2650,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"3741:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2647,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"3697:26:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3697:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2637,"id":2652,"nodeType":"Return","src":"3690:62:15"}]},"documentation":{"id":2629,"nodeType":"StructuredDocumentation","src":"3372:128:15","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":2654,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3514:18:15","nodeType":"FunctionDefinition","parameters":{"id":2634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2631,"mutability":"mutable","name":"target","nameLocation":"3541:6:15","nodeType":"VariableDeclaration","scope":2654,"src":"3533:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2630,"name":"address","nodeType":"ElementaryTypeName","src":"3533:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2633,"mutability":"mutable","name":"data","nameLocation":"3562:4:15","nodeType":"VariableDeclaration","scope":2654,"src":"3549:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2632,"name":"bytes","nodeType":"ElementaryTypeName","src":"3549:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3532:35:15"},"returnParameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2636,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2654,"src":"3591:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2635,"name":"bytes","nodeType":"ElementaryTypeName","src":"3591:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3590:14:15"},"scope":2763,"src":"3505:254:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2679,"nodeType":"Block","src":"3997:156:15","statements":[{"assignments":[2665,2667],"declarations":[{"constant":false,"id":2665,"mutability":"mutable","name":"success","nameLocation":"4013:7:15","nodeType":"VariableDeclaration","scope":2679,"src":"4008:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2664,"name":"bool","nodeType":"ElementaryTypeName","src":"4008:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2667,"mutability":"mutable","name":"returndata","nameLocation":"4035:10:15","nodeType":"VariableDeclaration","scope":2679,"src":"4022:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2666,"name":"bytes","nodeType":"ElementaryTypeName","src":"4022:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2672,"initialValue":{"arguments":[{"id":2670,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"4069:4:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2668,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"4049:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4056:12:15","memberName":"delegatecall","nodeType":"MemberAccess","src":"4049:19:15","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4049:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4007:67:15"},{"expression":{"arguments":[{"id":2674,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"4118:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2675,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"4126:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2676,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"4135:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2673,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"4091:26:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4091:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2663,"id":2678,"nodeType":"Return","src":"4084:62:15"}]},"documentation":{"id":2655,"nodeType":"StructuredDocumentation","src":"3765:130:15","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":2680,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"3909:20:15","nodeType":"FunctionDefinition","parameters":{"id":2660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"target","nameLocation":"3938:6:15","nodeType":"VariableDeclaration","scope":2680,"src":"3930:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2656,"name":"address","nodeType":"ElementaryTypeName","src":"3930:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"data","nameLocation":"3959:4:15","nodeType":"VariableDeclaration","scope":2680,"src":"3946:17:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2658,"name":"bytes","nodeType":"ElementaryTypeName","src":"3946:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3929:35:15"},"returnParameters":{"id":2663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2680,"src":"3983:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2661,"name":"bytes","nodeType":"ElementaryTypeName","src":"3983:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3982:14:15"},"scope":2763,"src":"3900:253:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2719,"nodeType":"Block","src":"4579:424:15","statements":[{"condition":{"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4593:8:15","subExpression":{"id":2692,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"4594:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2717,"nodeType":"Block","src":"4653:344:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2699,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"4841:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4852:6:15","memberName":"length","nodeType":"MemberAccess","src":"4841:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4862:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4841:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2703,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"4867:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4874:4:15","memberName":"code","nodeType":"MemberAccess","src":"4867:11:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4879:6:15","memberName":"length","nodeType":"MemberAccess","src":"4867:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4889:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4867:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4841:49:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2714,"nodeType":"IfStatement","src":"4837:119:15","trueBody":{"id":2713,"nodeType":"Block","src":"4892:64:15","statements":[{"errorCall":{"arguments":[{"id":2710,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"4934:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2709,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"4917:16:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4917:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2712,"nodeType":"RevertStatement","src":"4910:31:15"}]}},{"expression":{"id":2715,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"4976:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2691,"id":2716,"nodeType":"Return","src":"4969:17:15"}]},"id":2718,"nodeType":"IfStatement","src":"4589:408:15","trueBody":{"id":2698,"nodeType":"Block","src":"4603:44:15","statements":[{"expression":{"arguments":[{"id":2695,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"4625:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2694,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"4617:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2697,"nodeType":"ExpressionStatement","src":"4617:19:15"}]}}]},"documentation":{"id":2681,"nodeType":"StructuredDocumentation","src":"4159:257:15","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n of an unsuccessful call."},"id":2720,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4430:26:15","nodeType":"FunctionDefinition","parameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"target","nameLocation":"4474:6:15","nodeType":"VariableDeclaration","scope":2720,"src":"4466:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2682,"name":"address","nodeType":"ElementaryTypeName","src":"4466:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2685,"mutability":"mutable","name":"success","nameLocation":"4495:7:15","nodeType":"VariableDeclaration","scope":2720,"src":"4490:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2684,"name":"bool","nodeType":"ElementaryTypeName","src":"4490:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2687,"mutability":"mutable","name":"returndata","nameLocation":"4525:10:15","nodeType":"VariableDeclaration","scope":2720,"src":"4512:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2686,"name":"bytes","nodeType":"ElementaryTypeName","src":"4512:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4456:85:15"},"returnParameters":{"id":2691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2690,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2720,"src":"4565:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2689,"name":"bytes","nodeType":"ElementaryTypeName","src":"4565:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4564:14:15"},"scope":2763,"src":"4421:582:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2741,"nodeType":"Block","src":"5307:122:15","statements":[{"condition":{"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5321:8:15","subExpression":{"id":2730,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"5322:7:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2739,"nodeType":"Block","src":"5381:42:15","statements":[{"expression":{"id":2737,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"5402:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2729,"id":2738,"nodeType":"Return","src":"5395:17:15"}]},"id":2740,"nodeType":"IfStatement","src":"5317:106:15","trueBody":{"id":2736,"nodeType":"Block","src":"5331:44:15","statements":[{"expression":{"arguments":[{"id":2733,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"5353:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2732,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2762,"src":"5345:7:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5345:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2735,"nodeType":"ExpressionStatement","src":"5345:19:15"}]}}]},"documentation":{"id":2721,"nodeType":"StructuredDocumentation","src":"5009:191:15","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {Errors.FailedCall} error."},"id":2742,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5214:16:15","nodeType":"FunctionDefinition","parameters":{"id":2726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2723,"mutability":"mutable","name":"success","nameLocation":"5236:7:15","nodeType":"VariableDeclaration","scope":2742,"src":"5231:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2722,"name":"bool","nodeType":"ElementaryTypeName","src":"5231:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2725,"mutability":"mutable","name":"returndata","nameLocation":"5258:10:15","nodeType":"VariableDeclaration","scope":2742,"src":"5245:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2724,"name":"bytes","nodeType":"ElementaryTypeName","src":"5245:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5230:39:15"},"returnParameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2742,"src":"5293:12:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2727,"name":"bytes","nodeType":"ElementaryTypeName","src":"5293:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5292:14:15"},"scope":2763,"src":"5205:224:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2761,"nodeType":"Block","src":"5598:432:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2748,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"5674:10:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5685:6:15","memberName":"length","nodeType":"MemberAccess","src":"5674:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5694:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5674:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2759,"nodeType":"Block","src":"5973:51:15","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2754,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"5994:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$2785_$","typeString":"type(library Errors)"}},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6001:10:15","memberName":"FailedCall","nodeType":"MemberAccess","referencedDeclaration":2776,"src":"5994:17:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5994:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2758,"nodeType":"RevertStatement","src":"5987:26:15"}]},"id":2760,"nodeType":"IfStatement","src":"5670:354:15","trueBody":{"id":2753,"nodeType":"Block","src":"5697:270:15","statements":[{"AST":{"nodeType":"YulBlock","src":"5824:133:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5842:40:15","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"5871:10:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5865:5:15"},"nodeType":"YulFunctionCall","src":"5865:17:15"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"5846:15:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5910:2:15","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"5914:10:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5906:3:15"},"nodeType":"YulFunctionCall","src":"5906:19:15"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"5927:15:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5899:6:15"},"nodeType":"YulFunctionCall","src":"5899:44:15"},"nodeType":"YulExpressionStatement","src":"5899:44:15"}]},"evmVersion":"paris","externalReferences":[{"declaration":2745,"isOffset":false,"isSlot":false,"src":"5871:10:15","valueSize":1},{"declaration":2745,"isOffset":false,"isSlot":false,"src":"5914:10:15","valueSize":1}],"flags":["memory-safe"],"id":2752,"nodeType":"InlineAssembly","src":"5799:158:15"}]}}]},"documentation":{"id":2743,"nodeType":"StructuredDocumentation","src":"5435:103:15","text":" @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}."},"id":2762,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5552:7:15","nodeType":"FunctionDefinition","parameters":{"id":2746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2745,"mutability":"mutable","name":"returndata","nameLocation":"5573:10:15","nodeType":"VariableDeclaration","scope":2762,"src":"5560:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2744,"name":"bytes","nodeType":"ElementaryTypeName","src":"5560:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5559:25:15"},"returnParameters":{"id":2747,"nodeType":"ParameterList","parameters":[],"src":"5598:0:15"},"scope":2763,"src":"5543:487:15","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2764,"src":"233:5799:15","usedErrors":[2514],"usedEvents":[]}],"src":"101:5932:15"},"id":15},"@openzeppelin/contracts/utils/Errors.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Errors.sol","exportedSymbols":{"Errors":[2785]},"id":2786,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2765,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"100:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Errors","contractDependencies":[],"contractKind":"library","documentation":{"id":2766,"nodeType":"StructuredDocumentation","src":"126:284:16","text":" @dev Collection of common custom errors used in multiple contracts\n IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n It is recommended to avoid relying on the error API for critical functionality.\n _Available since v5.1._"},"fullyImplemented":true,"id":2785,"linearizedBaseContracts":[2785],"name":"Errors","nameLocation":"419:6:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"432:94:16","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cf479181","id":2773,"name":"InsufficientBalance","nameLocation":"537:19:16","nodeType":"ErrorDefinition","parameters":{"id":2772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2769,"mutability":"mutable","name":"balance","nameLocation":"565:7:16","nodeType":"VariableDeclaration","scope":2773,"src":"557:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2768,"name":"uint256","nodeType":"ElementaryTypeName","src":"557:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2771,"mutability":"mutable","name":"needed","nameLocation":"582:6:16","nodeType":"VariableDeclaration","scope":2773,"src":"574:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2770,"name":"uint256","nodeType":"ElementaryTypeName","src":"574:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"556:33:16"},"src":"531:59:16"},{"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"596:89:16","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"d6bda275","id":2776,"name":"FailedCall","nameLocation":"696:10:16","nodeType":"ErrorDefinition","parameters":{"id":2775,"nodeType":"ParameterList","parameters":[],"src":"706:2:16"},"src":"690:19:16"},{"documentation":{"id":2777,"nodeType":"StructuredDocumentation","src":"715:46:16","text":" @dev The deployment failed."},"errorSelector":"b06ebf3d","id":2779,"name":"FailedDeployment","nameLocation":"772:16:16","nodeType":"ErrorDefinition","parameters":{"id":2778,"nodeType":"ParameterList","parameters":[],"src":"788:2:16"},"src":"766:25:16"},{"documentation":{"id":2780,"nodeType":"StructuredDocumentation","src":"797:58:16","text":" @dev A necessary precompile is missing."},"errorSelector":"42b01bce","id":2784,"name":"MissingPrecompile","nameLocation":"866:17:16","nodeType":"ErrorDefinition","parameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2784,"src":"884:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2781,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"883:9:16"},"src":"860:33:16"}],"scope":2786,"src":"411:484:16","usedErrors":[2773,2776,2779,2784],"usedEvents":[]}],"src":"100:796:16"},"id":16},"@openzeppelin/contracts/utils/Panic.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Panic.sol","exportedSymbols":{"Panic":[2837]},"id":2838,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2787,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"99:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"Panic","contractDependencies":[],"contractKind":"library","documentation":{"id":2788,"nodeType":"StructuredDocumentation","src":"125:489:17","text":" @dev Helper library for emitting standardized panic codes.\n ```solidity\n contract Example {\n      using Panic for uint256;\n      // Use any of the declared internal constants\n      function foo() { Panic.GENERIC.panic(); }\n      // Alternatively\n      function foo() { Panic.panic(Panic.GENERIC); }\n }\n ```\n Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n _Available since v5.1._"},"fullyImplemented":true,"id":2837,"linearizedBaseContracts":[2837],"name":"Panic","nameLocation":"665:5:17","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":2789,"nodeType":"StructuredDocumentation","src":"677:36:17","text":"@dev generic / unspecified error"},"id":2792,"mutability":"constant","name":"GENERIC","nameLocation":"744:7:17","nodeType":"VariableDeclaration","scope":2837,"src":"718:40:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2790,"name":"uint256","nodeType":"ElementaryTypeName","src":"718:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783030","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"754:4:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"internal"},{"constant":true,"documentation":{"id":2793,"nodeType":"StructuredDocumentation","src":"764:37:17","text":"@dev used by the assert() builtin"},"id":2796,"mutability":"constant","name":"ASSERT","nameLocation":"832:6:17","nodeType":"VariableDeclaration","scope":2837,"src":"806:39:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2794,"name":"uint256","nodeType":"ElementaryTypeName","src":"806:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783031","id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"841:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"},"visibility":"internal"},{"constant":true,"documentation":{"id":2797,"nodeType":"StructuredDocumentation","src":"851:41:17","text":"@dev arithmetic underflow or overflow"},"id":2800,"mutability":"constant","name":"UNDER_OVERFLOW","nameLocation":"923:14:17","nodeType":"VariableDeclaration","scope":2837,"src":"897:47:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2798,"name":"uint256","nodeType":"ElementaryTypeName","src":"897:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783131","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"940:4:17","typeDescriptions":{"typeIdentifier":"t_rational_17_by_1","typeString":"int_const 17"},"value":"0x11"},"visibility":"internal"},{"constant":true,"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"950:35:17","text":"@dev division or modulo by zero"},"id":2804,"mutability":"constant","name":"DIVISION_BY_ZERO","nameLocation":"1016:16:17","nodeType":"VariableDeclaration","scope":2837,"src":"990:49:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"990:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783132","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1035:4:17","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"0x12"},"visibility":"internal"},{"constant":true,"documentation":{"id":2805,"nodeType":"StructuredDocumentation","src":"1045:30:17","text":"@dev enum conversion error"},"id":2808,"mutability":"constant","name":"ENUM_CONVERSION_ERROR","nameLocation":"1106:21:17","nodeType":"VariableDeclaration","scope":2837,"src":"1080:54:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2806,"name":"uint256","nodeType":"ElementaryTypeName","src":"1080:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783231","id":2807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:4:17","typeDescriptions":{"typeIdentifier":"t_rational_33_by_1","typeString":"int_const 33"},"value":"0x21"},"visibility":"internal"},{"constant":true,"documentation":{"id":2809,"nodeType":"StructuredDocumentation","src":"1140:36:17","text":"@dev invalid encoding in storage"},"id":2812,"mutability":"constant","name":"STORAGE_ENCODING_ERROR","nameLocation":"1207:22:17","nodeType":"VariableDeclaration","scope":2837,"src":"1181:55:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2810,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783232","id":2811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:4:17","typeDescriptions":{"typeIdentifier":"t_rational_34_by_1","typeString":"int_const 34"},"value":"0x22"},"visibility":"internal"},{"constant":true,"documentation":{"id":2813,"nodeType":"StructuredDocumentation","src":"1242:24:17","text":"@dev empty array pop"},"id":2816,"mutability":"constant","name":"EMPTY_ARRAY_POP","nameLocation":"1297:15:17","nodeType":"VariableDeclaration","scope":2837,"src":"1271:48:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2814,"name":"uint256","nodeType":"ElementaryTypeName","src":"1271:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783331","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1315:4:17","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"0x31"},"visibility":"internal"},{"constant":true,"documentation":{"id":2817,"nodeType":"StructuredDocumentation","src":"1325:35:17","text":"@dev array out of bounds access"},"id":2820,"mutability":"constant","name":"ARRAY_OUT_OF_BOUNDS","nameLocation":"1391:19:17","nodeType":"VariableDeclaration","scope":2837,"src":"1365:52:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"1365:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783332","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1413:4:17","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"0x32"},"visibility":"internal"},{"constant":true,"documentation":{"id":2821,"nodeType":"StructuredDocumentation","src":"1423:65:17","text":"@dev resource error (too large allocation or too large array)"},"id":2824,"mutability":"constant","name":"RESOURCE_ERROR","nameLocation":"1519:14:17","nodeType":"VariableDeclaration","scope":2837,"src":"1493:47:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2822,"name":"uint256","nodeType":"ElementaryTypeName","src":"1493:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783431","id":2823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1536:4:17","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"0x41"},"visibility":"internal"},{"constant":true,"documentation":{"id":2825,"nodeType":"StructuredDocumentation","src":"1546:42:17","text":"@dev calling invalid internal function"},"id":2828,"mutability":"constant","name":"INVALID_INTERNAL_FUNCTION","nameLocation":"1619:25:17","nodeType":"VariableDeclaration","scope":2837,"src":"1593:58:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2826,"name":"uint256","nodeType":"ElementaryTypeName","src":"1593:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30783531","id":2827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1647:4:17","typeDescriptions":{"typeIdentifier":"t_rational_81_by_1","typeString":"int_const 81"},"value":"0x51"},"visibility":"internal"},{"body":{"id":2835,"nodeType":"Block","src":"1819:151:17","statements":[{"AST":{"nodeType":"YulBlock","src":"1854:110:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1875:4:17","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"1881:10:17","type":"","value":"0x4e487b71"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1868:6:17"},"nodeType":"YulFunctionCall","src":"1868:24:17"},"nodeType":"YulExpressionStatement","src":"1868:24:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1912:4:17","type":"","value":"0x20"},{"name":"code","nodeType":"YulIdentifier","src":"1918:4:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1905:6:17"},"nodeType":"YulFunctionCall","src":"1905:18:17"},"nodeType":"YulExpressionStatement","src":"1905:18:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1943:4:17","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"1949:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1936:6:17"},"nodeType":"YulFunctionCall","src":"1936:18:17"},"nodeType":"YulExpressionStatement","src":"1936:18:17"}]},"evmVersion":"paris","externalReferences":[{"declaration":2831,"isOffset":false,"isSlot":false,"src":"1918:4:17","valueSize":1}],"flags":["memory-safe"],"id":2834,"nodeType":"InlineAssembly","src":"1829:135:17"}]},"documentation":{"id":2829,"nodeType":"StructuredDocumentation","src":"1658:113:17","text":"@dev Reverts with a panic code. Recommended to use with\n the internal constants with predefined codes."},"id":2836,"implemented":true,"kind":"function","modifiers":[],"name":"panic","nameLocation":"1785:5:17","nodeType":"FunctionDefinition","parameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"mutability":"mutable","name":"code","nameLocation":"1799:4:17","nodeType":"VariableDeclaration","scope":2836,"src":"1791:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2830,"name":"uint256","nodeType":"ElementaryTypeName","src":"1791:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1790:14:17"},"returnParameters":{"id":2833,"nodeType":"ParameterList","parameters":[],"src":"1819:0:17"},"scope":2837,"src":"1776:194:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2838,"src":"657:1315:17","usedErrors":[],"usedEvents":[]}],"src":"99:1874:17"},"id":17},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4775],"SignedMath":[6684],"Strings":[3157]},"id":3158,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2839,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:18"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2841,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3158,"sourceUnit":4776,"src":"127:37:18","symbolAliases":[{"foreign":{"id":2840,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"135:4:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":2843,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3158,"sourceUnit":6685,"src":"165:49:18","symbolAliases":[{"foreign":{"id":2842,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6684,"src":"173:10:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2844,"nodeType":"StructuredDocumentation","src":"216:34:18","text":" @dev String operations."},"fullyImplemented":true,"id":3157,"linearizedBaseContracts":[3157],"name":"Strings","nameLocation":"259:7:18","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2847,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:18","nodeType":"VariableDeclaration","scope":3157,"src":"273:56:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2845,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:18","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2850,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:18","nodeType":"VariableDeclaration","scope":3157,"src":"335:42:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2848,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:18","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":2851,"nodeType":"StructuredDocumentation","src":"384:81:18","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":2857,"name":"StringsInsufficientHexLength","nameLocation":"476:28:18","nodeType":"ErrorDefinition","parameters":{"id":2856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2853,"mutability":"mutable","name":"value","nameLocation":"513:5:18","nodeType":"VariableDeclaration","scope":2857,"src":"505:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2852,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2855,"mutability":"mutable","name":"length","nameLocation":"528:6:18","nodeType":"VariableDeclaration","scope":2857,"src":"520:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2854,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:18"},"src":"470:66:18"},{"body":{"id":2904,"nodeType":"Block","src":"708:561:18","statements":[{"id":2903,"nodeType":"UncheckedBlock","src":"718:545:18","statements":[{"assignments":[2866],"declarations":[{"constant":false,"id":2866,"mutability":"mutable","name":"length","nameLocation":"750:6:18","nodeType":"VariableDeclaration","scope":2903,"src":"742:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2865,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2873,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"770:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2867,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"759:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4775_$","typeString":"type(library Math)"}},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:18","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4547,"src":"759:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:18"},{"assignments":[2875],"declarations":[{"constant":false,"id":2875,"mutability":"mutable","name":"buffer","nameLocation":"808:6:18","nodeType":"VariableDeclaration","scope":2903,"src":"794:20:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2874,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2880,"initialValue":{"arguments":[{"id":2878,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"828:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:18","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2876,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:18"},{"assignments":[2882],"declarations":[{"constant":false,"id":2882,"mutability":"mutable","name":"ptr","nameLocation":"857:3:18","nodeType":"VariableDeclaration","scope":2903,"src":"849:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2881,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2883,"nodeType":"VariableDeclarationStatement","src":"849:11:18"},{"AST":{"nodeType":"YulBlock","src":"899:67:18","statements":[{"nodeType":"YulAssignment","src":"917:35:18","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"928:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"940:2:18","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"944:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"936:3:18"},"nodeType":"YulFunctionCall","src":"936:15:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"924:3:18"},"nodeType":"YulFunctionCall","src":"924:28:18"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"917:3:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2875,"isOffset":false,"isSlot":false,"src":"928:6:18","valueSize":1},{"declaration":2866,"isOffset":false,"isSlot":false,"src":"944:6:18","valueSize":1},{"declaration":2882,"isOffset":false,"isSlot":false,"src":"917:3:18","valueSize":1}],"flags":["memory-safe"],"id":2884,"nodeType":"InlineAssembly","src":"874:92:18"},{"body":{"id":2899,"nodeType":"Block","src":"992:234:18","statements":[{"expression":{"id":2887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1010:5:18","subExpression":{"id":2886,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2882,"src":"1010:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2888,"nodeType":"ExpressionStatement","src":"1010:5:18"},{"AST":{"nodeType":"YulBlock","src":"1058:86:18","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1088:3:18"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1102:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"1109:2:18","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1098:3:18"},"nodeType":"YulFunctionCall","src":"1098:14:18"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1114:10:18"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1093:4:18"},"nodeType":"YulFunctionCall","src":"1093:32:18"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1080:7:18"},"nodeType":"YulFunctionCall","src":"1080:46:18"},"nodeType":"YulExpressionStatement","src":"1080:46:18"}]},"evmVersion":"paris","externalReferences":[{"declaration":2847,"isOffset":false,"isSlot":false,"src":"1114:10:18","valueSize":1},{"declaration":2882,"isOffset":false,"isSlot":false,"src":"1088:3:18","valueSize":1},{"declaration":2860,"isOffset":false,"isSlot":false,"src":"1102:5:18","valueSize":1}],"flags":["memory-safe"],"id":2889,"nodeType":"InlineAssembly","src":"1033:111:18"},{"expression":{"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2890,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"1161:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1170:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1161:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2893,"nodeType":"ExpressionStatement","src":"1161:11:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2860,"src":"1194:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1203:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1194:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2898,"nodeType":"IfStatement","src":"1190:21:18","trueBody":{"id":2897,"nodeType":"Break","src":"1206:5:18"}}]},"condition":{"hexValue":"74727565","id":2885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"986:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2900,"nodeType":"WhileStatement","src":"979:247:18"},{"expression":{"id":2901,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"1246:6:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2864,"id":2902,"nodeType":"Return","src":"1239:13:18"}]}]},"documentation":{"id":2858,"nodeType":"StructuredDocumentation","src":"542:90:18","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2905,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:18","nodeType":"FunctionDefinition","parameters":{"id":2861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2860,"mutability":"mutable","name":"value","nameLocation":"663:5:18","nodeType":"VariableDeclaration","scope":2905,"src":"655:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:18"},"returnParameters":{"id":2864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2905,"src":"693:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2862,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:18"},"scope":3157,"src":"637:632:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2930,"nodeType":"Block","src":"1445:92:18","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"1476:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1484:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1494:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1476:20:18","trueExpression":{"hexValue":"2d","id":2919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1488:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2925,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"1522:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2923,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6684,"src":"1507:10:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$6684_$","typeString":"type(library SignedMath)"}},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1518:3:18","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":6683,"src":"1507:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1507:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2922,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"1498:8:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1498:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1462:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2913,"name":"string","nodeType":"ElementaryTypeName","src":"1462:6:18","typeDescriptions":{}}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1469:6:18","memberName":"concat","nodeType":"MemberAccess","src":"1462:13:18","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1462:68:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2912,"id":2929,"nodeType":"Return","src":"1455:75:18"}]},"documentation":{"id":2906,"nodeType":"StructuredDocumentation","src":"1275:89:18","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2931,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1378:14:18","nodeType":"FunctionDefinition","parameters":{"id":2909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2908,"mutability":"mutable","name":"value","nameLocation":"1400:5:18","nodeType":"VariableDeclaration","scope":2931,"src":"1393:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2907,"name":"int256","nodeType":"ElementaryTypeName","src":"1393:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1392:14:18"},"returnParameters":{"id":2912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2911,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2931,"src":"1430:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2910,"name":"string","nodeType":"ElementaryTypeName","src":"1430:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1429:15:18"},"scope":3157,"src":"1369:168:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2950,"nodeType":"Block","src":"1716:100:18","statements":[{"id":2949,"nodeType":"UncheckedBlock","src":"1726:84:18","statements":[{"expression":{"arguments":[{"id":2940,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"1769:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"1788:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2941,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"1776:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4775_$","typeString":"type(library Math)"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1781:6:18","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4718,"src":"1776:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1776:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1797:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1776:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2939,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2951,3034,3054],"referencedDeclaration":3034,"src":"1757:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2938,"id":2948,"nodeType":"Return","src":"1750:49:18"}]}]},"documentation":{"id":2932,"nodeType":"StructuredDocumentation","src":"1543:94:18","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2951,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1651:11:18","nodeType":"FunctionDefinition","parameters":{"id":2935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2934,"mutability":"mutable","name":"value","nameLocation":"1671:5:18","nodeType":"VariableDeclaration","scope":2951,"src":"1663:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2933,"name":"uint256","nodeType":"ElementaryTypeName","src":"1663:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1662:15:18"},"returnParameters":{"id":2938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2951,"src":"1701:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2936,"name":"string","nodeType":"ElementaryTypeName","src":"1701:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1700:15:18"},"scope":3157,"src":"1642:174:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3033,"nodeType":"Block","src":"2029:435:18","statements":[{"assignments":[2962],"declarations":[{"constant":false,"id":2962,"mutability":"mutable","name":"localValue","nameLocation":"2047:10:18","nodeType":"VariableDeclaration","scope":3033,"src":"2039:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2961,"name":"uint256","nodeType":"ElementaryTypeName","src":"2039:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2964,"initialValue":{"id":2963,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"2060:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2039:26:18"},{"assignments":[2966],"declarations":[{"constant":false,"id":2966,"mutability":"mutable","name":"buffer","nameLocation":"2088:6:18","nodeType":"VariableDeclaration","scope":3033,"src":"2075:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2965,"name":"bytes","nodeType":"ElementaryTypeName","src":"2075:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2975,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2107:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2970,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"2111:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2107:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2120:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2107:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2097:9:18","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2967,"name":"bytes","nodeType":"ElementaryTypeName","src":"2101:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2097:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2075:47:18"},{"expression":{"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2976,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"2132:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2978,"indexExpression":{"hexValue":"30","id":2977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2139:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2132:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2144:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2132:15:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2981,"nodeType":"ExpressionStatement","src":"2132:15:18"},{"expression":{"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2982,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"2157:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2984,"indexExpression":{"hexValue":"31","id":2983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2164:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2157:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2169:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2157:15:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2987,"nodeType":"ExpressionStatement","src":"2157:15:18"},{"body":{"id":3016,"nodeType":"Block","src":"2227:95:18","statements":[{"expression":{"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3002,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"2241:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3004,"indexExpression":{"id":3003,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"2248:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2241:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3005,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"2253:10:18","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3009,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3006,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"2264:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2277:3:18","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2264:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2253:28:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2241:40:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3011,"nodeType":"ExpressionStatement","src":"2241:40:18"},{"expression":{"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3012,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"2295:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2310:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2295:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3015,"nodeType":"ExpressionStatement","src":"2295:16:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2996,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"2215:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2219:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2215:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3017,"initializationExpression":{"assignments":[2989],"declarations":[{"constant":false,"id":2989,"mutability":"mutable","name":"i","nameLocation":"2195:1:18","nodeType":"VariableDeclaration","scope":3017,"src":"2187:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2988,"name":"uint256","nodeType":"ElementaryTypeName","src":"2187:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2995,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2199:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2991,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"2203:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2199:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2212:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2199:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2187:26:18"},"loopExpression":{"expression":{"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2222:3:18","subExpression":{"id":2999,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"2224:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3001,"nodeType":"ExpressionStatement","src":"2222:3:18"},"nodeType":"ForStatement","src":"2182:140:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3018,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"2335:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2335:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3027,"nodeType":"IfStatement","src":"2331:96:18","trueBody":{"id":3026,"nodeType":"Block","src":"2352:75:18","statements":[{"errorCall":{"arguments":[{"id":3022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"2402:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3023,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"2409:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3021,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"2373:28:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2373:43:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3025,"nodeType":"RevertStatement","src":"2366:50:18"}]}},{"expression":{"arguments":[{"id":3030,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2966,"src":"2450:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2443:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3028,"name":"string","nodeType":"ElementaryTypeName","src":"2443:6:18","typeDescriptions":{}}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2443:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2960,"id":3032,"nodeType":"Return","src":"2436:21:18"}]},"documentation":{"id":2952,"nodeType":"StructuredDocumentation","src":"1822:112:18","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3034,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1948:11:18","nodeType":"FunctionDefinition","parameters":{"id":2957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2954,"mutability":"mutable","name":"value","nameLocation":"1968:5:18","nodeType":"VariableDeclaration","scope":3034,"src":"1960:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2953,"name":"uint256","nodeType":"ElementaryTypeName","src":"1960:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2956,"mutability":"mutable","name":"length","nameLocation":"1983:6:18","nodeType":"VariableDeclaration","scope":3034,"src":"1975:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2955,"name":"uint256","nodeType":"ElementaryTypeName","src":"1975:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1959:31:18"},"returnParameters":{"id":2960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2959,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3034,"src":"2014:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2958,"name":"string","nodeType":"ElementaryTypeName","src":"2014:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2013:15:18"},"scope":3157,"src":"1939:525:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3053,"nodeType":"Block","src":"2696:75:18","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3047,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3037,"src":"2741:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2733:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3045,"name":"uint160","nodeType":"ElementaryTypeName","src":"2733:7:18","typeDescriptions":{}}},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2733:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2725:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"2725:7:18","typeDescriptions":{}}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2725:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3050,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2850,"src":"2749:14:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3042,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2951,3034,3054],"referencedDeclaration":3034,"src":"2713:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2713:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3041,"id":3052,"nodeType":"Return","src":"2706:58:18"}]},"documentation":{"id":3035,"nodeType":"StructuredDocumentation","src":"2470:148:18","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":3054,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2632:11:18","nodeType":"FunctionDefinition","parameters":{"id":3038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3037,"mutability":"mutable","name":"addr","nameLocation":"2652:4:18","nodeType":"VariableDeclaration","scope":3054,"src":"2644:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3036,"name":"address","nodeType":"ElementaryTypeName","src":"2644:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2643:14:18"},"returnParameters":{"id":3041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3054,"src":"2681:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3039,"name":"string","nodeType":"ElementaryTypeName","src":"2681:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2680:15:18"},"scope":3157,"src":"2623:148:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3118,"nodeType":"Block","src":"3028:642:18","statements":[{"assignments":[3063],"declarations":[{"constant":false,"id":3063,"mutability":"mutable","name":"buffer","nameLocation":"3051:6:18","nodeType":"VariableDeclaration","scope":3118,"src":"3038:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3062,"name":"bytes","nodeType":"ElementaryTypeName","src":"3038:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3070,"initialValue":{"arguments":[{"arguments":[{"id":3067,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"3078:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3066,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2951,3034,3054],"referencedDeclaration":3054,"src":"3066:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3066:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3060:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3064,"name":"bytes","nodeType":"ElementaryTypeName","src":"3060:5:18","typeDescriptions":{}}},"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3060:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3038:46:18"},{"assignments":[3072],"declarations":[{"constant":false,"id":3072,"mutability":"mutable","name":"hashValue","nameLocation":"3177:9:18","nodeType":"VariableDeclaration","scope":3118,"src":"3169:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"3169:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3073,"nodeType":"VariableDeclarationStatement","src":"3169:17:18"},{"AST":{"nodeType":"YulBlock","src":"3221:78:18","statements":[{"nodeType":"YulAssignment","src":"3235:54:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3252:2:18","type":"","value":"96"},{"arguments":[{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"3270:6:18"},{"kind":"number","nodeType":"YulLiteral","src":"3278:4:18","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3266:3:18"},"nodeType":"YulFunctionCall","src":"3266:17:18"},{"kind":"number","nodeType":"YulLiteral","src":"3285:2:18","type":"","value":"40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3256:9:18"},"nodeType":"YulFunctionCall","src":"3256:32:18"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3248:3:18"},"nodeType":"YulFunctionCall","src":"3248:41:18"},"variableNames":[{"name":"hashValue","nodeType":"YulIdentifier","src":"3235:9:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3063,"isOffset":false,"isSlot":false,"src":"3270:6:18","valueSize":1},{"declaration":3072,"isOffset":false,"isSlot":false,"src":"3235:9:18","valueSize":1}],"flags":["memory-safe"],"id":3074,"nodeType":"InlineAssembly","src":"3196:103:18"},{"body":{"id":3111,"nodeType":"Block","src":"3342:291:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3085,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"3448:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3460:3:18","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"3448:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"37","id":3088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3466:1:18","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"3448:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"baseExpression":{"id":3092,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"3477:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3094,"indexExpression":{"id":3093,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"3484:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3477:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":3091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3471:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3090,"name":"uint8","nodeType":"ElementaryTypeName","src":"3471:5:18","typeDescriptions":{}}},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3471:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3936","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3490:2:18","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},"src":"3471:21:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3448:44:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3106,"nodeType":"IfStatement","src":"3444:150:18","trueBody":{"id":3105,"nodeType":"Block","src":"3494:100:18","statements":[{"expression":{"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3099,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"3562:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3101,"indexExpression":{"id":3100,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"3569:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3562:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"^=","rightHandSide":{"hexValue":"30783230","id":3102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3575:4:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"3562:17:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3104,"nodeType":"ExpressionStatement","src":"3562:17:18"}]}},{"expression":{"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3107,"name":"hashValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"3607:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3621:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"3607:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3110,"nodeType":"ExpressionStatement","src":"3607:15:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3079,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"3330:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3334:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3330:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3112,"initializationExpression":{"assignments":[3076],"declarations":[{"constant":false,"id":3076,"mutability":"mutable","name":"i","nameLocation":"3322:1:18","nodeType":"VariableDeclaration","scope":3112,"src":"3314:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3075,"name":"uint256","nodeType":"ElementaryTypeName","src":"3314:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3078,"initialValue":{"hexValue":"3431","id":3077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3326:2:18","typeDescriptions":{"typeIdentifier":"t_rational_41_by_1","typeString":"int_const 41"},"value":"41"},"nodeType":"VariableDeclarationStatement","src":"3314:14:18"},"loopExpression":{"expression":{"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"3337:3:18","subExpression":{"id":3082,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"3339:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3084,"nodeType":"ExpressionStatement","src":"3337:3:18"},"nodeType":"ForStatement","src":"3309:324:18"},{"expression":{"arguments":[{"id":3115,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"3656:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3649:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3113,"name":"string","nodeType":"ElementaryTypeName","src":"3649:6:18","typeDescriptions":{}}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3649:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3061,"id":3117,"nodeType":"Return","src":"3642:21:18"}]},"documentation":{"id":3055,"nodeType":"StructuredDocumentation","src":"2777:165:18","text":" @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\n representation, according to EIP-55."},"id":3119,"implemented":true,"kind":"function","modifiers":[],"name":"toChecksumHexString","nameLocation":"2956:19:18","nodeType":"FunctionDefinition","parameters":{"id":3058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3057,"mutability":"mutable","name":"addr","nameLocation":"2984:4:18","nodeType":"VariableDeclaration","scope":3119,"src":"2976:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3056,"name":"address","nodeType":"ElementaryTypeName","src":"2976:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2975:14:18"},"returnParameters":{"id":3061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3119,"src":"3013:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3059,"name":"string","nodeType":"ElementaryTypeName","src":"3013:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3012:15:18"},"scope":3157,"src":"2947:723:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3155,"nodeType":"Block","src":"3825:104:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3131,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"3848:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3842:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3129,"name":"bytes","nodeType":"ElementaryTypeName","src":"3842:5:18","typeDescriptions":{}}},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3842:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3851:6:18","memberName":"length","nodeType":"MemberAccess","src":"3842:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3136,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"3867:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3861:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3134,"name":"bytes","nodeType":"ElementaryTypeName","src":"3861:5:18","typeDescriptions":{}}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3861:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:6:18","memberName":"length","nodeType":"MemberAccess","src":"3861:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3842:34:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3143,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"3896:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3890:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3141,"name":"bytes","nodeType":"ElementaryTypeName","src":"3890:5:18","typeDescriptions":{}}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3890:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3140,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3880:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3880:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3149,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"3919:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3913:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3147,"name":"bytes","nodeType":"ElementaryTypeName","src":"3913:5:18","typeDescriptions":{}}},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3913:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3146,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3903:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3903:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3880:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3842:80:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3128,"id":3154,"nodeType":"Return","src":"3835:87:18"}]},"documentation":{"id":3120,"nodeType":"StructuredDocumentation","src":"3676:66:18","text":" @dev Returns true if the two strings are equal."},"id":3156,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"3756:5:18","nodeType":"FunctionDefinition","parameters":{"id":3125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3122,"mutability":"mutable","name":"a","nameLocation":"3776:1:18","nodeType":"VariableDeclaration","scope":3156,"src":"3762:15:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3121,"name":"string","nodeType":"ElementaryTypeName","src":"3762:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3124,"mutability":"mutable","name":"b","nameLocation":"3793:1:18","nodeType":"VariableDeclaration","scope":3156,"src":"3779:15:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3123,"name":"string","nodeType":"ElementaryTypeName","src":"3779:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3761:34:18"},"returnParameters":{"id":3128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3156,"src":"3819:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3126,"name":"bool","nodeType":"ElementaryTypeName","src":"3819:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3818:6:18"},"scope":3157,"src":"3747:182:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3158,"src":"251:3680:18","usedErrors":[2857],"usedEvents":[]}],"src":"101:3831:18"},"id":18},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3169]},"id":3170,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3159,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3160,"nodeType":"StructuredDocumentation","src":"141:280:19","text":" @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3169,"linearizedBaseContracts":[3169],"name":"IERC165","nameLocation":"432:7:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3161,"nodeType":"StructuredDocumentation","src":"446:340:19","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3168,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"800:17:19","nodeType":"FunctionDefinition","parameters":{"id":3164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3163,"mutability":"mutable","name":"interfaceId","nameLocation":"825:11:19","nodeType":"VariableDeclaration","scope":3168,"src":"818:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3162,"name":"bytes4","nodeType":"ElementaryTypeName","src":"818:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"817:20:19"},"returnParameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3168,"src":"861:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3165,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:19"},"scope":3169,"src":"791:76:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3170,"src":"422:447:19","usedErrors":[],"usedEvents":[]}],"src":"115:755:19"},"id":19},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4775],"Panic":[2837],"SafeCast":[6540]},"id":4776,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3171,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:20"},{"absolutePath":"@openzeppelin/contracts/utils/Panic.sol","file":"../Panic.sol","id":3173,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4776,"sourceUnit":2838,"src":"129:35:20","symbolAliases":[{"foreign":{"id":3172,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"137:5:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./SafeCast.sol","id":3175,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4776,"sourceUnit":6541,"src":"165:40:20","symbolAliases":[{"foreign":{"id":3174,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"173:8:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3176,"nodeType":"StructuredDocumentation","src":"207:73:20","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4775,"linearizedBaseContracts":[4775],"name":"Math","nameLocation":"289:4:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":3181,"members":[{"id":3177,"name":"Floor","nameLocation":"324:5:20","nodeType":"EnumValue","src":"324:5:20"},{"id":3178,"name":"Ceil","nameLocation":"367:4:20","nodeType":"EnumValue","src":"367:4:20"},{"id":3179,"name":"Trunc","nameLocation":"409:5:20","nodeType":"EnumValue","src":"409:5:20"},{"id":3180,"name":"Expand","nameLocation":"439:6:20","nodeType":"EnumValue","src":"439:6:20"}],"name":"Rounding","nameLocation":"305:8:20","nodeType":"EnumDefinition","src":"300:169:20"},{"body":{"id":3212,"nodeType":"Block","src":"677:140:20","statements":[{"id":3211,"nodeType":"UncheckedBlock","src":"687:124:20","statements":[{"assignments":[3194],"declarations":[{"constant":false,"id":3194,"mutability":"mutable","name":"c","nameLocation":"719:1:20","nodeType":"VariableDeclaration","scope":3211,"src":"711:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3193,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3198,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"723:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3196,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3186,"src":"727:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"723:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"711:17:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3199,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"746:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3200,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3184,"src":"750:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"746:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3206,"nodeType":"IfStatement","src":"742:28:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"761:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"768:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3204,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"760:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3192,"id":3205,"nodeType":"Return","src":"753:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":3207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"792:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3208,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3194,"src":"798:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3209,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"791:9:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3192,"id":3210,"nodeType":"Return","src":"784:16:20"}]}]},"documentation":{"id":3182,"nodeType":"StructuredDocumentation","src":"475:106:20","text":" @dev Returns the addition of two unsigned integers, with an success flag (no overflow)."},"id":3213,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"595:6:20","nodeType":"FunctionDefinition","parameters":{"id":3187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"a","nameLocation":"610:1:20","nodeType":"VariableDeclaration","scope":3213,"src":"602:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3183,"name":"uint256","nodeType":"ElementaryTypeName","src":"602:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3186,"mutability":"mutable","name":"b","nameLocation":"621:1:20","nodeType":"VariableDeclaration","scope":3213,"src":"613:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3185,"name":"uint256","nodeType":"ElementaryTypeName","src":"613:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"601:22:20"},"returnParameters":{"id":3192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3189,"mutability":"mutable","name":"success","nameLocation":"652:7:20","nodeType":"VariableDeclaration","scope":3213,"src":"647:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3188,"name":"bool","nodeType":"ElementaryTypeName","src":"647:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3191,"mutability":"mutable","name":"result","nameLocation":"669:6:20","nodeType":"VariableDeclaration","scope":3213,"src":"661:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3190,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"646:30:20"},"scope":4775,"src":"586:231:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3240,"nodeType":"Block","src":"1028:113:20","statements":[{"id":3239,"nodeType":"UncheckedBlock","src":"1038:97:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3225,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"1066:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3226,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"1070:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1066:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3232,"nodeType":"IfStatement","src":"1062:28:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1081:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1080:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3224,"id":3231,"nodeType":"Return","src":"1073:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":3233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1112:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3234,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3216,"src":"1118:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3235,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"1122:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1118:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3237,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1111:13:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3224,"id":3238,"nodeType":"Return","src":"1104:20:20"}]}]},"documentation":{"id":3214,"nodeType":"StructuredDocumentation","src":"823:109:20","text":" @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow)."},"id":3241,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"946:6:20","nodeType":"FunctionDefinition","parameters":{"id":3219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3216,"mutability":"mutable","name":"a","nameLocation":"961:1:20","nodeType":"VariableDeclaration","scope":3241,"src":"953:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3215,"name":"uint256","nodeType":"ElementaryTypeName","src":"953:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3218,"mutability":"mutable","name":"b","nameLocation":"972:1:20","nodeType":"VariableDeclaration","scope":3241,"src":"964:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3217,"name":"uint256","nodeType":"ElementaryTypeName","src":"964:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"952:22:20"},"returnParameters":{"id":3224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3221,"mutability":"mutable","name":"success","nameLocation":"1003:7:20","nodeType":"VariableDeclaration","scope":3241,"src":"998:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3220,"name":"bool","nodeType":"ElementaryTypeName","src":"998:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3223,"mutability":"mutable","name":"result","nameLocation":"1020:6:20","nodeType":"VariableDeclaration","scope":3241,"src":"1012:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3222,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"997:30:20"},"scope":4775,"src":"937:204:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3282,"nodeType":"Block","src":"1355:417:20","statements":[{"id":3281,"nodeType":"UncheckedBlock","src":"1365:401:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3253,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"1623:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1628:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1623:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3260,"nodeType":"IfStatement","src":"1619:28:20","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":3256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1639:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":3257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3258,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1638:9:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3252,"id":3259,"nodeType":"Return","src":"1631:16:20"}},{"assignments":[3262],"declarations":[{"constant":false,"id":3262,"mutability":"mutable","name":"c","nameLocation":"1669:1:20","nodeType":"VariableDeclaration","scope":3281,"src":"1661:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3261,"name":"uint256","nodeType":"ElementaryTypeName","src":"1661:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3266,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3263,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"1673:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3264,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"1677:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1673:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1661:17:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3267,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"1696:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3268,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"1700:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1696:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3270,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"1705:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1696:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3276,"nodeType":"IfStatement","src":"1692:33:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1716:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1723:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3274,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1715:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3252,"id":3275,"nodeType":"Return","src":"1708:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":3277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1747:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3278,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"1753:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3279,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1746:9:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3252,"id":3280,"nodeType":"Return","src":"1739:16:20"}]}]},"documentation":{"id":3242,"nodeType":"StructuredDocumentation","src":"1147:112:20","text":" @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow)."},"id":3283,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1273:6:20","nodeType":"FunctionDefinition","parameters":{"id":3247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3244,"mutability":"mutable","name":"a","nameLocation":"1288:1:20","nodeType":"VariableDeclaration","scope":3283,"src":"1280:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1280:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3246,"mutability":"mutable","name":"b","nameLocation":"1299:1:20","nodeType":"VariableDeclaration","scope":3283,"src":"1291:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3245,"name":"uint256","nodeType":"ElementaryTypeName","src":"1291:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1279:22:20"},"returnParameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"success","nameLocation":"1330:7:20","nodeType":"VariableDeclaration","scope":3283,"src":"1325:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3248,"name":"bool","nodeType":"ElementaryTypeName","src":"1325:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3251,"mutability":"mutable","name":"result","nameLocation":"1347:6:20","nodeType":"VariableDeclaration","scope":3283,"src":"1339:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3250,"name":"uint256","nodeType":"ElementaryTypeName","src":"1339:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1324:30:20"},"scope":4775,"src":"1264:508:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3310,"nodeType":"Block","src":"1987:114:20","statements":[{"id":3309,"nodeType":"UncheckedBlock","src":"1997:98:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3295,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"2025:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2030:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2025:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3302,"nodeType":"IfStatement","src":"2021:29:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2041:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3300,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2040:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3294,"id":3301,"nodeType":"Return","src":"2033:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2072:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3304,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"2078:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3305,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"2082:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2078:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2071:13:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3294,"id":3308,"nodeType":"Return","src":"2064:20:20"}]}]},"documentation":{"id":3284,"nodeType":"StructuredDocumentation","src":"1778:113:20","text":" @dev Returns the division of two unsigned integers, with a success flag (no division by zero)."},"id":3311,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1905:6:20","nodeType":"FunctionDefinition","parameters":{"id":3289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3286,"mutability":"mutable","name":"a","nameLocation":"1920:1:20","nodeType":"VariableDeclaration","scope":3311,"src":"1912:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3285,"name":"uint256","nodeType":"ElementaryTypeName","src":"1912:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3288,"mutability":"mutable","name":"b","nameLocation":"1931:1:20","nodeType":"VariableDeclaration","scope":3311,"src":"1923:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3287,"name":"uint256","nodeType":"ElementaryTypeName","src":"1923:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1911:22:20"},"returnParameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3291,"mutability":"mutable","name":"success","nameLocation":"1962:7:20","nodeType":"VariableDeclaration","scope":3311,"src":"1957:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3290,"name":"bool","nodeType":"ElementaryTypeName","src":"1957:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3293,"mutability":"mutable","name":"result","nameLocation":"1979:6:20","nodeType":"VariableDeclaration","scope":3311,"src":"1971:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3292,"name":"uint256","nodeType":"ElementaryTypeName","src":"1971:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1956:30:20"},"scope":4775,"src":"1896:205:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3338,"nodeType":"Block","src":"2326:114:20","statements":[{"id":3337,"nodeType":"UncheckedBlock","src":"2336:98:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3323,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"2364:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2369:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2364:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3330,"nodeType":"IfStatement","src":"2360:29:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2380:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2387:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3328,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2379:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3322,"id":3329,"nodeType":"Return","src":"2372:17:20"}},{"expression":{"components":[{"hexValue":"74727565","id":3331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2411:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3332,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3314,"src":"2417:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3333,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"2421:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2417:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3335,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2410:13:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3322,"id":3336,"nodeType":"Return","src":"2403:20:20"}]}]},"documentation":{"id":3312,"nodeType":"StructuredDocumentation","src":"2107:123:20","text":" @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero)."},"id":3339,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2244:6:20","nodeType":"FunctionDefinition","parameters":{"id":3317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3314,"mutability":"mutable","name":"a","nameLocation":"2259:1:20","nodeType":"VariableDeclaration","scope":3339,"src":"2251:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3313,"name":"uint256","nodeType":"ElementaryTypeName","src":"2251:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3316,"mutability":"mutable","name":"b","nameLocation":"2270:1:20","nodeType":"VariableDeclaration","scope":3339,"src":"2262:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3315,"name":"uint256","nodeType":"ElementaryTypeName","src":"2262:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2250:22:20"},"returnParameters":{"id":3322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3319,"mutability":"mutable","name":"success","nameLocation":"2301:7:20","nodeType":"VariableDeclaration","scope":3339,"src":"2296:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3318,"name":"bool","nodeType":"ElementaryTypeName","src":"2296:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3321,"mutability":"mutable","name":"result","nameLocation":"2318:6:20","nodeType":"VariableDeclaration","scope":3339,"src":"2310:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3320,"name":"uint256","nodeType":"ElementaryTypeName","src":"2310:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2295:30:20"},"scope":4775,"src":"2235:205:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3365,"nodeType":"Block","src":"2912:207:20","statements":[{"id":3364,"nodeType":"UncheckedBlock","src":"2922:191:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3351,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"3060:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3352,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"3066:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3353,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"3070:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3066:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3355,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3065:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":3358,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"3091:9:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3356,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"3075:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3084:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"3075:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3075:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3065:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3361,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3064:38:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3060:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3350,"id":3363,"nodeType":"Return","src":"3053:49:20"}]}]},"documentation":{"id":3340,"nodeType":"StructuredDocumentation","src":"2446:374:20","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":3366,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"2834:7:20","nodeType":"FunctionDefinition","parameters":{"id":3347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3342,"mutability":"mutable","name":"condition","nameLocation":"2847:9:20","nodeType":"VariableDeclaration","scope":3366,"src":"2842:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3341,"name":"bool","nodeType":"ElementaryTypeName","src":"2842:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3344,"mutability":"mutable","name":"a","nameLocation":"2866:1:20","nodeType":"VariableDeclaration","scope":3366,"src":"2858:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3343,"name":"uint256","nodeType":"ElementaryTypeName","src":"2858:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3346,"mutability":"mutable","name":"b","nameLocation":"2877:1:20","nodeType":"VariableDeclaration","scope":3366,"src":"2869:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3345,"name":"uint256","nodeType":"ElementaryTypeName","src":"2869:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2841:38:20"},"returnParameters":{"id":3350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3366,"src":"2903:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3348,"name":"uint256","nodeType":"ElementaryTypeName","src":"2903:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2902:9:20"},"scope":4775,"src":"2825:294:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3384,"nodeType":"Block","src":"3256:44:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3377,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"3281:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3378,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"3285:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3281:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3380,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"3288:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3381,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"3291:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3376,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"3273:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3273:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3375,"id":3383,"nodeType":"Return","src":"3266:27:20"}]},"documentation":{"id":3367,"nodeType":"StructuredDocumentation","src":"3125:59:20","text":" @dev Returns the largest of two numbers."},"id":3385,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"3198:3:20","nodeType":"FunctionDefinition","parameters":{"id":3372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3369,"mutability":"mutable","name":"a","nameLocation":"3210:1:20","nodeType":"VariableDeclaration","scope":3385,"src":"3202:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"3202:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3371,"mutability":"mutable","name":"b","nameLocation":"3221:1:20","nodeType":"VariableDeclaration","scope":3385,"src":"3213:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3370,"name":"uint256","nodeType":"ElementaryTypeName","src":"3213:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3201:22:20"},"returnParameters":{"id":3375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3385,"src":"3247:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3373,"name":"uint256","nodeType":"ElementaryTypeName","src":"3247:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3246:9:20"},"scope":4775,"src":"3189:111:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3403,"nodeType":"Block","src":"3438:44:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3396,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"3463:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3397,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"3467:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3463:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3399,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"3470:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3400,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"3473:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3395,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"3455:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3455:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3394,"id":3402,"nodeType":"Return","src":"3448:27:20"}]},"documentation":{"id":3386,"nodeType":"StructuredDocumentation","src":"3306:60:20","text":" @dev Returns the smallest of two numbers."},"id":3404,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"3380:3:20","nodeType":"FunctionDefinition","parameters":{"id":3391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3388,"mutability":"mutable","name":"a","nameLocation":"3392:1:20","nodeType":"VariableDeclaration","scope":3404,"src":"3384:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3387,"name":"uint256","nodeType":"ElementaryTypeName","src":"3384:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3390,"mutability":"mutable","name":"b","nameLocation":"3403:1:20","nodeType":"VariableDeclaration","scope":3404,"src":"3395:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3389,"name":"uint256","nodeType":"ElementaryTypeName","src":"3395:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3383:22:20"},"returnParameters":{"id":3394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3404,"src":"3429:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3392,"name":"uint256","nodeType":"ElementaryTypeName","src":"3429:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3428:9:20"},"scope":4775,"src":"3371:111:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3426,"nodeType":"Block","src":"3666:82:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3414,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"3721:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3415,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"3725:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3721:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3417,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3720:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3418,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3407,"src":"3731:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3419,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3409,"src":"3735:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3731:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3421,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3730:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3740:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3730:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3720:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3413,"id":3425,"nodeType":"Return","src":"3713:28:20"}]},"documentation":{"id":3405,"nodeType":"StructuredDocumentation","src":"3488:102:20","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3427,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"3604:7:20","nodeType":"FunctionDefinition","parameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3407,"mutability":"mutable","name":"a","nameLocation":"3620:1:20","nodeType":"VariableDeclaration","scope":3427,"src":"3612:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3406,"name":"uint256","nodeType":"ElementaryTypeName","src":"3612:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3409,"mutability":"mutable","name":"b","nameLocation":"3631:1:20","nodeType":"VariableDeclaration","scope":3427,"src":"3623:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3408,"name":"uint256","nodeType":"ElementaryTypeName","src":"3623:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3611:22:20"},"returnParameters":{"id":3413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3427,"src":"3657:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3411,"name":"uint256","nodeType":"ElementaryTypeName","src":"3657:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3656:9:20"},"scope":4775,"src":"3595:153:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3467,"nodeType":"Block","src":"4040:633:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3437,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"4054:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4059:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4054:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3448,"nodeType":"IfStatement","src":"4050:150:20","trueBody":{"id":3447,"nodeType":"Block","src":"4062:138:20","statements":[{"expression":{"arguments":[{"expression":{"id":3443,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"4166:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4172:16:20","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":2804,"src":"4166:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3440,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"4154:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4160:5:20","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":2836,"src":"4154:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4154:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3446,"nodeType":"ExpressionStatement","src":"4154:35:20"}]}},{"id":3466,"nodeType":"UncheckedBlock","src":"4583:84:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3451,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"4630:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4634:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4630:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3449,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"4614:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"4614:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4614:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3455,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"4641:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4645:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4641:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3458,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4640:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3459,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"4650:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4640:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4654:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4640:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3463,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4639:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4614:42:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3436,"id":3465,"nodeType":"Return","src":"4607:49:20"}]}]},"documentation":{"id":3428,"nodeType":"StructuredDocumentation","src":"3754:210:20","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3468,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3978:7:20","nodeType":"FunctionDefinition","parameters":{"id":3433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3430,"mutability":"mutable","name":"a","nameLocation":"3994:1:20","nodeType":"VariableDeclaration","scope":3468,"src":"3986:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3429,"name":"uint256","nodeType":"ElementaryTypeName","src":"3986:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3432,"mutability":"mutable","name":"b","nameLocation":"4005:1:20","nodeType":"VariableDeclaration","scope":3468,"src":"3997:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3431,"name":"uint256","nodeType":"ElementaryTypeName","src":"3997:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3985:22:20"},"returnParameters":{"id":3436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3468,"src":"4031:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3434,"name":"uint256","nodeType":"ElementaryTypeName","src":"4031:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4030:9:20"},"scope":4775,"src":"3969:704:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3604,"nodeType":"Block","src":"5094:4128:20","statements":[{"id":3603,"nodeType":"UncheckedBlock","src":"5104:4112:20","statements":[{"assignments":[3481],"declarations":[{"constant":false,"id":3481,"mutability":"mutable","name":"prod0","nameLocation":"5441:5:20","nodeType":"VariableDeclaration","scope":3603,"src":"5433:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3480,"name":"uint256","nodeType":"ElementaryTypeName","src":"5433:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3485,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3482,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"5449:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3483,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"5453:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5449:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5433:21:20"},{"assignments":[3487],"declarations":[{"constant":false,"id":3487,"mutability":"mutable","name":"prod1","nameLocation":"5521:5:20","nodeType":"VariableDeclaration","scope":3603,"src":"5513:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3486,"name":"uint256","nodeType":"ElementaryTypeName","src":"5513:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3488,"nodeType":"VariableDeclarationStatement","src":"5513:13:20"},{"AST":{"nodeType":"YulBlock","src":"5593:122:20","statements":[{"nodeType":"YulVariableDeclaration","src":"5611:30:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5628:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"5631:1:20"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5638:1:20","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5634:3:20"},"nodeType":"YulFunctionCall","src":"5634:6:20"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5621:6:20"},"nodeType":"YulFunctionCall","src":"5621:20:20"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"5615:2:20","type":""}]},{"nodeType":"YulAssignment","src":"5658:43:20","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"5675:2:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"5679:5:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5671:3:20"},"nodeType":"YulFunctionCall","src":"5671:14:20"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"5690:2:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"5694:5:20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5687:2:20"},"nodeType":"YulFunctionCall","src":"5687:13:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5667:3:20"},"nodeType":"YulFunctionCall","src":"5667:34:20"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5658:5:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3481,"isOffset":false,"isSlot":false,"src":"5679:5:20","valueSize":1},{"declaration":3481,"isOffset":false,"isSlot":false,"src":"5694:5:20","valueSize":1},{"declaration":3487,"isOffset":false,"isSlot":false,"src":"5658:5:20","valueSize":1},{"declaration":3471,"isOffset":false,"isSlot":false,"src":"5628:1:20","valueSize":1},{"declaration":3473,"isOffset":false,"isSlot":false,"src":"5631:1:20","valueSize":1}],"id":3489,"nodeType":"InlineAssembly","src":"5584:131:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3490,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"5796:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5805:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5796:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3498,"nodeType":"IfStatement","src":"5792:368:20","trueBody":{"id":3497,"nodeType":"Block","src":"5808:352:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3493,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"6126:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3494,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"6134:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6126:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3479,"id":3496,"nodeType":"Return","src":"6119:26:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3499,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"6270:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3500,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"6285:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6270:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3517,"nodeType":"IfStatement","src":"6266:143:20","trueBody":{"id":3516,"nodeType":"Block","src":"6292:117:20","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3506,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"6330:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6345:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6330:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":3509,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"6348:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6354:16:20","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":2804,"src":"6348:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3511,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"6372:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6378:14:20","memberName":"UNDER_OVERFLOW","nodeType":"MemberAccess","referencedDeclaration":2800,"src":"6372:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3505,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"6322:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6322:71:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3502,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"6310:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6316:5:20","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":2836,"src":"6310:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6310:84:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3515,"nodeType":"ExpressionStatement","src":"6310:84:20"}]}},{"assignments":[3519],"declarations":[{"constant":false,"id":3519,"mutability":"mutable","name":"remainder","nameLocation":"6672:9:20","nodeType":"VariableDeclaration","scope":3603,"src":"6664:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3518,"name":"uint256","nodeType":"ElementaryTypeName","src":"6664:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3520,"nodeType":"VariableDeclarationStatement","src":"6664:17:20"},{"AST":{"nodeType":"YulBlock","src":"6704:291:20","statements":[{"nodeType":"YulAssignment","src":"6773:38:20","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6793:1:20"},{"name":"y","nodeType":"YulIdentifier","src":"6796:1:20"},{"name":"denominator","nodeType":"YulIdentifier","src":"6799:11:20"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6786:6:20"},"nodeType":"YulFunctionCall","src":"6786:25:20"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"6773:9:20"}]},{"nodeType":"YulAssignment","src":"6893:41:20","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"6906:5:20"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"6916:9:20"},{"name":"prod0","nodeType":"YulIdentifier","src":"6927:5:20"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6913:2:20"},"nodeType":"YulFunctionCall","src":"6913:20:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6902:3:20"},"nodeType":"YulFunctionCall","src":"6902:32:20"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"6893:5:20"}]},{"nodeType":"YulAssignment","src":"6951:30:20","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6964:5:20"},{"name":"remainder","nodeType":"YulIdentifier","src":"6971:9:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6960:3:20"},"nodeType":"YulFunctionCall","src":"6960:21:20"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6951:5:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3475,"isOffset":false,"isSlot":false,"src":"6799:11:20","valueSize":1},{"declaration":3481,"isOffset":false,"isSlot":false,"src":"6927:5:20","valueSize":1},{"declaration":3481,"isOffset":false,"isSlot":false,"src":"6951:5:20","valueSize":1},{"declaration":3481,"isOffset":false,"isSlot":false,"src":"6964:5:20","valueSize":1},{"declaration":3487,"isOffset":false,"isSlot":false,"src":"6893:5:20","valueSize":1},{"declaration":3487,"isOffset":false,"isSlot":false,"src":"6906:5:20","valueSize":1},{"declaration":3519,"isOffset":false,"isSlot":false,"src":"6773:9:20","valueSize":1},{"declaration":3519,"isOffset":false,"isSlot":false,"src":"6916:9:20","valueSize":1},{"declaration":3519,"isOffset":false,"isSlot":false,"src":"6971:9:20","valueSize":1},{"declaration":3471,"isOffset":false,"isSlot":false,"src":"6793:1:20","valueSize":1},{"declaration":3473,"isOffset":false,"isSlot":false,"src":"6796:1:20","valueSize":1}],"id":3521,"nodeType":"InlineAssembly","src":"6695:300:20"},{"assignments":[3523],"declarations":[{"constant":false,"id":3523,"mutability":"mutable","name":"twos","nameLocation":"7207:4:20","nodeType":"VariableDeclaration","scope":3603,"src":"7199:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3522,"name":"uint256","nodeType":"ElementaryTypeName","src":"7199:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3530,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3524,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"7214:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7229:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3526,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"7233:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7229:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3528,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7228:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7214:31:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7199:46:20"},{"AST":{"nodeType":"YulBlock","src":"7268:366:20","statements":[{"nodeType":"YulAssignment","src":"7333:37:20","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"7352:11:20"},{"name":"twos","nodeType":"YulIdentifier","src":"7365:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7348:3:20"},"nodeType":"YulFunctionCall","src":"7348:22:20"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"7333:11:20"}]},{"nodeType":"YulAssignment","src":"7437:25:20","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"7450:5:20"},{"name":"twos","nodeType":"YulIdentifier","src":"7457:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7446:3:20"},"nodeType":"YulFunctionCall","src":"7446:16:20"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"7437:5:20"}]},{"nodeType":"YulAssignment","src":"7581:39:20","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7601:1:20","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"7604:4:20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7597:3:20"},"nodeType":"YulFunctionCall","src":"7597:12:20"},{"name":"twos","nodeType":"YulIdentifier","src":"7611:4:20"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"7593:3:20"},"nodeType":"YulFunctionCall","src":"7593:23:20"},{"kind":"number","nodeType":"YulLiteral","src":"7618:1:20","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7589:3:20"},"nodeType":"YulFunctionCall","src":"7589:31:20"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"7581:4:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3475,"isOffset":false,"isSlot":false,"src":"7333:11:20","valueSize":1},{"declaration":3475,"isOffset":false,"isSlot":false,"src":"7352:11:20","valueSize":1},{"declaration":3481,"isOffset":false,"isSlot":false,"src":"7437:5:20","valueSize":1},{"declaration":3481,"isOffset":false,"isSlot":false,"src":"7450:5:20","valueSize":1},{"declaration":3523,"isOffset":false,"isSlot":false,"src":"7365:4:20","valueSize":1},{"declaration":3523,"isOffset":false,"isSlot":false,"src":"7457:4:20","valueSize":1},{"declaration":3523,"isOffset":false,"isSlot":false,"src":"7581:4:20","valueSize":1},{"declaration":3523,"isOffset":false,"isSlot":false,"src":"7604:4:20","valueSize":1},{"declaration":3523,"isOffset":false,"isSlot":false,"src":"7611:4:20","valueSize":1}],"id":3531,"nodeType":"InlineAssembly","src":"7259:375:20"},{"expression":{"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3532,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"7700:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3533,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"7709:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3534,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"7717:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7709:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7700:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3537,"nodeType":"ExpressionStatement","src":"7700:21:20"},{"assignments":[3539],"declarations":[{"constant":false,"id":3539,"mutability":"mutable","name":"inverse","nameLocation":"8064:7:20","nodeType":"VariableDeclaration","scope":3603,"src":"8056:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3538,"name":"uint256","nodeType":"ElementaryTypeName","src":"8056:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3546,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8075:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3541,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"8079:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8075:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3543,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8074:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8094:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"8074:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8056:39:20"},{"expression":{"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3547,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8312:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8323:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3549,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"8327:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3550,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8341:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8327:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8323:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8312:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3554,"nodeType":"ExpressionStatement","src":"8312:36:20"},{"expression":{"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3555,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8382:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8393:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3557,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"8397:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3558,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8411:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8397:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8393:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8382:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3562,"nodeType":"ExpressionStatement","src":"8382:36:20"},{"expression":{"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3563,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8454:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8465:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3565,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"8469:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3566,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8483:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8469:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8465:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8454:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3570,"nodeType":"ExpressionStatement","src":"8454:36:20"},{"expression":{"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3571,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8525:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3573,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"8540:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3574,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8554:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8540:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8536:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8525:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3578,"nodeType":"ExpressionStatement","src":"8525:36:20"},{"expression":{"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3579,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8598:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8609:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3581,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"8613:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3582,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8627:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8613:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8609:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8598:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3586,"nodeType":"ExpressionStatement","src":"8598:36:20"},{"expression":{"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3587,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8672:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8683:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3589,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3475,"src":"8687:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3590,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"8701:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8687:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8683:25:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8672:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3594,"nodeType":"ExpressionStatement","src":"8672:36:20"},{"expression":{"id":3599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"9154:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3596,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"9163:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3597,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"9171:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9163:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9154:24:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3600,"nodeType":"ExpressionStatement","src":"9154:24:20"},{"expression":{"id":3601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"9199:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3479,"id":3602,"nodeType":"Return","src":"9192:13:20"}]}]},"documentation":{"id":3469,"nodeType":"StructuredDocumentation","src":"4679:312:20","text":" @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3605,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5005:6:20","nodeType":"FunctionDefinition","parameters":{"id":3476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3471,"mutability":"mutable","name":"x","nameLocation":"5020:1:20","nodeType":"VariableDeclaration","scope":3605,"src":"5012:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3470,"name":"uint256","nodeType":"ElementaryTypeName","src":"5012:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3473,"mutability":"mutable","name":"y","nameLocation":"5031:1:20","nodeType":"VariableDeclaration","scope":3605,"src":"5023:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3472,"name":"uint256","nodeType":"ElementaryTypeName","src":"5023:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3475,"mutability":"mutable","name":"denominator","nameLocation":"5042:11:20","nodeType":"VariableDeclaration","scope":3605,"src":"5034:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3474,"name":"uint256","nodeType":"ElementaryTypeName","src":"5034:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5011:43:20"},"returnParameters":{"id":3479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3478,"mutability":"mutable","name":"result","nameLocation":"5086:6:20","nodeType":"VariableDeclaration","scope":3605,"src":"5078:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3477,"name":"uint256","nodeType":"ElementaryTypeName","src":"5078:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5077:16:20"},"scope":4775,"src":"4996:4226:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3641,"nodeType":"Block","src":"9461:128:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3621,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"9485:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3622,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"9488:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3623,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"9491:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3620,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3605,3642],"referencedDeclaration":3605,"src":"9478:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9478:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3628,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"9539:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}],"id":3627,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"9522:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3181_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9522:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3631,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"9559:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3632,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3610,"src":"9562:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3633,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"9565:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3630,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967280,"src":"9552:6:20","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9552:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9580:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9552:29:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9522:59:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3625,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"9506:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9515:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"9506:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9506:76:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9478:104:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3619,"id":3640,"nodeType":"Return","src":"9471:111:20"}]},"documentation":{"id":3606,"nodeType":"StructuredDocumentation","src":"9228:118:20","text":" @dev Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3642,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"9360:6:20","nodeType":"FunctionDefinition","parameters":{"id":3616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3608,"mutability":"mutable","name":"x","nameLocation":"9375:1:20","nodeType":"VariableDeclaration","scope":3642,"src":"9367:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3607,"name":"uint256","nodeType":"ElementaryTypeName","src":"9367:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"y","nameLocation":"9386:1:20","nodeType":"VariableDeclaration","scope":3642,"src":"9378:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3609,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"denominator","nameLocation":"9397:11:20","nodeType":"VariableDeclaration","scope":3642,"src":"9389:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3611,"name":"uint256","nodeType":"ElementaryTypeName","src":"9389:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3615,"mutability":"mutable","name":"rounding","nameLocation":"9419:8:20","nodeType":"VariableDeclaration","scope":3642,"src":"9410:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"},"typeName":{"id":3614,"nodeType":"UserDefinedTypeName","pathNode":{"id":3613,"name":"Rounding","nameLocations":["9410:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3181,"src":"9410:8:20"},"referencedDeclaration":3181,"src":"9410:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9366:62:20"},"returnParameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3642,"src":"9452:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3617,"name":"uint256","nodeType":"ElementaryTypeName","src":"9452:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9451:9:20"},"scope":4775,"src":"9351:238:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3738,"nodeType":"Block","src":"10223:1849:20","statements":[{"id":3737,"nodeType":"UncheckedBlock","src":"10233:1833:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"10261:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10266:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10261:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3657,"nodeType":"IfStatement","src":"10257:20:20","trueBody":{"expression":{"hexValue":"30","id":3655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3651,"id":3656,"nodeType":"Return","src":"10269:8:20"}},{"assignments":[3659],"declarations":[{"constant":false,"id":3659,"mutability":"mutable","name":"remainder","nameLocation":"10756:9:20","nodeType":"VariableDeclaration","scope":3737,"src":"10748:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3658,"name":"uint256","nodeType":"ElementaryTypeName","src":"10748:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3663,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3660,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"10768:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3661,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"10772:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10768:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10748:25:20"},{"assignments":[3665],"declarations":[{"constant":false,"id":3665,"mutability":"mutable","name":"gcd","nameLocation":"10795:3:20","nodeType":"VariableDeclaration","scope":3737,"src":"10787:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3664,"name":"uint256","nodeType":"ElementaryTypeName","src":"10787:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3667,"initialValue":{"id":3666,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"10801:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10787:15:20"},{"assignments":[3669],"declarations":[{"constant":false,"id":3669,"mutability":"mutable","name":"x","nameLocation":"10945:1:20","nodeType":"VariableDeclaration","scope":3737,"src":"10938:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3668,"name":"int256","nodeType":"ElementaryTypeName","src":"10938:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3671,"initialValue":{"hexValue":"30","id":3670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10949:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10938:12:20"},{"assignments":[3673],"declarations":[{"constant":false,"id":3673,"mutability":"mutable","name":"y","nameLocation":"10971:1:20","nodeType":"VariableDeclaration","scope":3737,"src":"10964:8:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3672,"name":"int256","nodeType":"ElementaryTypeName","src":"10964:6:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3675,"initialValue":{"hexValue":"31","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10975:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"10964:12:20"},{"body":{"id":3712,"nodeType":"Block","src":"11014:882:20","statements":[{"assignments":[3680],"declarations":[{"constant":false,"id":3680,"mutability":"mutable","name":"quotient","nameLocation":"11040:8:20","nodeType":"VariableDeclaration","scope":3712,"src":"11032:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3679,"name":"uint256","nodeType":"ElementaryTypeName","src":"11032:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3684,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3681,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"11051:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3682,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"11057:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11051:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11032:34:20"},{"expression":{"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":3685,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"11086:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3686,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"11091:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3687,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"11085:16:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":3688,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"11191:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3689,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"11436:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3690,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"11442:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3691,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"11454:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11442:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11436:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3694,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11104:376:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"11085:395:20","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3696,"nodeType":"ExpressionStatement","src":"11085:395:20"},{"expression":{"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":3697,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"11500:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":3698,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"11503:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3699,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"11499:6:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"id":3700,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"11585:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3701,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"11839:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3702,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"11843:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"id":3705,"name":"quotient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"11854:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11847:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3703,"name":"int256","nodeType":"ElementaryTypeName","src":"11847:6:20","typeDescriptions":{}}},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11847:16:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11843:20:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"11839:24:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3709,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11508:373:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int256_$_t_int256_$","typeString":"tuple(int256,int256)"}},"src":"11499:382:20","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3711,"nodeType":"ExpressionStatement","src":"11499:382:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3676,"name":"remainder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"10998:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10998:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3713,"nodeType":"WhileStatement","src":"10991:905:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3714,"name":"gcd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"11914:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":3715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11921:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11914:8:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3719,"nodeType":"IfStatement","src":"11910:22:20","trueBody":{"expression":{"hexValue":"30","id":3717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3651,"id":3718,"nodeType":"Return","src":"11924:8:20"}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3721,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"11983:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11987:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11983:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3724,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"11990:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"id":3728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"12002:2:20","subExpression":{"id":3727,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"12003:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11994:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3725,"name":"uint256","nodeType":"ElementaryTypeName","src":"11994:7:20","typeDescriptions":{}}},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11994:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11990:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3733,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3669,"src":"12015:1:20","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12007:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3731,"name":"uint256","nodeType":"ElementaryTypeName","src":"12007:7:20","typeDescriptions":{}}},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12007:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3720,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"11975:7:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bool,uint256,uint256) pure returns (uint256)"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11975:43:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3651,"id":3736,"nodeType":"Return","src":"11968:50:20"}]}]},"documentation":{"id":3643,"nodeType":"StructuredDocumentation","src":"9595:553:20","text":" @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n If the input value is not inversible, 0 is returned.\n NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}."},"id":3739,"implemented":true,"kind":"function","modifiers":[],"name":"invMod","nameLocation":"10162:6:20","nodeType":"FunctionDefinition","parameters":{"id":3648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3645,"mutability":"mutable","name":"a","nameLocation":"10177:1:20","nodeType":"VariableDeclaration","scope":3739,"src":"10169:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3644,"name":"uint256","nodeType":"ElementaryTypeName","src":"10169:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3647,"mutability":"mutable","name":"n","nameLocation":"10188:1:20","nodeType":"VariableDeclaration","scope":3739,"src":"10180:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3646,"name":"uint256","nodeType":"ElementaryTypeName","src":"10180:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10168:22:20"},"returnParameters":{"id":3651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3650,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3739,"src":"10214:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3649,"name":"uint256","nodeType":"ElementaryTypeName","src":"10214:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10213:9:20"},"scope":4775,"src":"10153:1919:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3759,"nodeType":"Block","src":"12672:82:20","statements":[{"id":3758,"nodeType":"UncheckedBlock","src":"12682:66:20","statements":[{"expression":{"arguments":[{"id":3751,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"12725:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3752,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"12728:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":3753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12732:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12728:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3755,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"12735:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3749,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4775,"src":"12713:4:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4775_$","typeString":"type(library Math)"}},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12718:6:20","memberName":"modExp","nodeType":"MemberAccess","referencedDeclaration":3796,"src":"12713:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (uint256)"}},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12713:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3748,"id":3757,"nodeType":"Return","src":"12706:31:20"}]}]},"documentation":{"id":3740,"nodeType":"StructuredDocumentation","src":"12078:514:20","text":" @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n NOTE: this function does NOT check that `p` is a prime greater than `2`."},"id":3760,"implemented":true,"kind":"function","modifiers":[],"name":"invModPrime","nameLocation":"12606:11:20","nodeType":"FunctionDefinition","parameters":{"id":3745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3742,"mutability":"mutable","name":"a","nameLocation":"12626:1:20","nodeType":"VariableDeclaration","scope":3760,"src":"12618:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3741,"name":"uint256","nodeType":"ElementaryTypeName","src":"12618:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3744,"mutability":"mutable","name":"p","nameLocation":"12637:1:20","nodeType":"VariableDeclaration","scope":3760,"src":"12629:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3743,"name":"uint256","nodeType":"ElementaryTypeName","src":"12629:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12617:22:20"},"returnParameters":{"id":3748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3760,"src":"12663:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3746,"name":"uint256","nodeType":"ElementaryTypeName","src":"12663:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12662:9:20"},"scope":4775,"src":"12597:157:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3795,"nodeType":"Block","src":"13524:174:20","statements":[{"assignments":[3773,3775],"declarations":[{"constant":false,"id":3773,"mutability":"mutable","name":"success","nameLocation":"13540:7:20","nodeType":"VariableDeclaration","scope":3795,"src":"13535:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3772,"name":"bool","nodeType":"ElementaryTypeName","src":"13535:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3775,"mutability":"mutable","name":"result","nameLocation":"13557:6:20","nodeType":"VariableDeclaration","scope":3795,"src":"13549:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3774,"name":"uint256","nodeType":"ElementaryTypeName","src":"13549:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3781,"initialValue":{"arguments":[{"id":3777,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3763,"src":"13577:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3778,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3765,"src":"13580:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3779,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3767,"src":"13583:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3776,"name":"tryModExp","nodeType":"Identifier","overloadedDeclarations":[3820,3902],"referencedDeclaration":3820,"src":"13567:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view returns (bool,uint256)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13567:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"13534:51:20"},{"condition":{"id":3783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13599:8:20","subExpression":{"id":3782,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3773,"src":"13600:7:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3792,"nodeType":"IfStatement","src":"13595:74:20","trueBody":{"id":3791,"nodeType":"Block","src":"13609:60:20","statements":[{"expression":{"arguments":[{"expression":{"id":3787,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"13635:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13641:16:20","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":2804,"src":"13635:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3784,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"13623:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13629:5:20","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":2836,"src":"13623:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13623:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3790,"nodeType":"ExpressionStatement","src":"13623:35:20"}]}},{"expression":{"id":3793,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"13685:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3771,"id":3794,"nodeType":"Return","src":"13678:13:20"}]},"documentation":{"id":3761,"nodeType":"StructuredDocumentation","src":"12760:678:20","text":" @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n Requirements:\n - modulus can't be zero\n - underlying staticcall to precompile must succeed\n IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n sure the chain you're using it on supports the precompiled contract for modular exponentiation\n at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n interpreted as 0."},"id":3796,"implemented":true,"kind":"function","modifiers":[],"name":"modExp","nameLocation":"13452:6:20","nodeType":"FunctionDefinition","parameters":{"id":3768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3763,"mutability":"mutable","name":"b","nameLocation":"13467:1:20","nodeType":"VariableDeclaration","scope":3796,"src":"13459:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3762,"name":"uint256","nodeType":"ElementaryTypeName","src":"13459:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3765,"mutability":"mutable","name":"e","nameLocation":"13478:1:20","nodeType":"VariableDeclaration","scope":3796,"src":"13470:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3764,"name":"uint256","nodeType":"ElementaryTypeName","src":"13470:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3767,"mutability":"mutable","name":"m","nameLocation":"13489:1:20","nodeType":"VariableDeclaration","scope":3796,"src":"13481:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3766,"name":"uint256","nodeType":"ElementaryTypeName","src":"13481:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13458:33:20"},"returnParameters":{"id":3771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3796,"src":"13515:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3769,"name":"uint256","nodeType":"ElementaryTypeName","src":"13515:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13514:9:20"},"scope":4775,"src":"13443:255:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3819,"nodeType":"Block","src":"14552:1493:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3810,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3803,"src":"14566:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14571:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14566:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3817,"nodeType":"IfStatement","src":"14562:29:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14582:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14589:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3815,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"14581:10:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3809,"id":3816,"nodeType":"Return","src":"14574:17:20"}},{"AST":{"nodeType":"YulBlock","src":"14626:1413:20","statements":[{"nodeType":"YulVariableDeclaration","src":"14640:22:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14657:4:20","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14651:5:20"},"nodeType":"YulFunctionCall","src":"14651:11:20"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"14644:3:20","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15570:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15575:4:20","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15563:6:20"},"nodeType":"YulFunctionCall","src":"15563:17:20"},"nodeType":"YulExpressionStatement","src":"15563:17:20"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15604:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15609:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15600:3:20"},"nodeType":"YulFunctionCall","src":"15600:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"15616:4:20","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15593:6:20"},"nodeType":"YulFunctionCall","src":"15593:28:20"},"nodeType":"YulExpressionStatement","src":"15593:28:20"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15645:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15650:4:20","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15641:3:20"},"nodeType":"YulFunctionCall","src":"15641:14:20"},{"kind":"number","nodeType":"YulLiteral","src":"15657:4:20","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15634:6:20"},"nodeType":"YulFunctionCall","src":"15634:28:20"},"nodeType":"YulExpressionStatement","src":"15634:28:20"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15686:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15691:4:20","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15682:3:20"},"nodeType":"YulFunctionCall","src":"15682:14:20"},{"name":"b","nodeType":"YulIdentifier","src":"15698:1:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15675:6:20"},"nodeType":"YulFunctionCall","src":"15675:25:20"},"nodeType":"YulExpressionStatement","src":"15675:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15724:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15729:4:20","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15720:3:20"},"nodeType":"YulFunctionCall","src":"15720:14:20"},{"name":"e","nodeType":"YulIdentifier","src":"15736:1:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15713:6:20"},"nodeType":"YulFunctionCall","src":"15713:25:20"},"nodeType":"YulExpressionStatement","src":"15713:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15762:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15767:4:20","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15758:3:20"},"nodeType":"YulFunctionCall","src":"15758:14:20"},{"name":"m","nodeType":"YulIdentifier","src":"15774:1:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15751:6:20"},"nodeType":"YulFunctionCall","src":"15751:25:20"},"nodeType":"YulExpressionStatement","src":"15751:25:20"},{"nodeType":"YulAssignment","src":"15938:57:20","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"15960:3:20"},"nodeType":"YulFunctionCall","src":"15960:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"15967:4:20","type":"","value":"0x05"},{"name":"ptr","nodeType":"YulIdentifier","src":"15973:3:20"},{"kind":"number","nodeType":"YulLiteral","src":"15978:4:20","type":"","value":"0xc0"},{"kind":"number","nodeType":"YulLiteral","src":"15984:4:20","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"15990:4:20","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"15949:10:20"},"nodeType":"YulFunctionCall","src":"15949:46:20"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"15938:7:20"}]},{"nodeType":"YulAssignment","src":"16008:21:20","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16024:4:20","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16018:5:20"},"nodeType":"YulFunctionCall","src":"16018:11:20"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"16008:6:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3799,"isOffset":false,"isSlot":false,"src":"15698:1:20","valueSize":1},{"declaration":3801,"isOffset":false,"isSlot":false,"src":"15736:1:20","valueSize":1},{"declaration":3803,"isOffset":false,"isSlot":false,"src":"15774:1:20","valueSize":1},{"declaration":3808,"isOffset":false,"isSlot":false,"src":"16008:6:20","valueSize":1},{"declaration":3806,"isOffset":false,"isSlot":false,"src":"15938:7:20","valueSize":1}],"flags":["memory-safe"],"id":3818,"nodeType":"InlineAssembly","src":"14601:1438:20"}]},"documentation":{"id":3797,"nodeType":"StructuredDocumentation","src":"13704:738:20","text":" @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n to operate modulo 0 or if the underlying precompile reverted.\n IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n of a revert, but the result may be incorrectly interpreted as 0."},"id":3820,"implemented":true,"kind":"function","modifiers":[],"name":"tryModExp","nameLocation":"14456:9:20","nodeType":"FunctionDefinition","parameters":{"id":3804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3799,"mutability":"mutable","name":"b","nameLocation":"14474:1:20","nodeType":"VariableDeclaration","scope":3820,"src":"14466:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3798,"name":"uint256","nodeType":"ElementaryTypeName","src":"14466:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3801,"mutability":"mutable","name":"e","nameLocation":"14485:1:20","nodeType":"VariableDeclaration","scope":3820,"src":"14477:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3800,"name":"uint256","nodeType":"ElementaryTypeName","src":"14477:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3803,"mutability":"mutable","name":"m","nameLocation":"14496:1:20","nodeType":"VariableDeclaration","scope":3820,"src":"14488:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3802,"name":"uint256","nodeType":"ElementaryTypeName","src":"14488:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14465:33:20"},"returnParameters":{"id":3809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3806,"mutability":"mutable","name":"success","nameLocation":"14527:7:20","nodeType":"VariableDeclaration","scope":3820,"src":"14522:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3805,"name":"bool","nodeType":"ElementaryTypeName","src":"14522:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3808,"mutability":"mutable","name":"result","nameLocation":"14544:6:20","nodeType":"VariableDeclaration","scope":3820,"src":"14536:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3807,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14521:30:20"},"scope":4775,"src":"14447:1598:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3855,"nodeType":"Block","src":"16242:179:20","statements":[{"assignments":[3833,3835],"declarations":[{"constant":false,"id":3833,"mutability":"mutable","name":"success","nameLocation":"16258:7:20","nodeType":"VariableDeclaration","scope":3855,"src":"16253:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3832,"name":"bool","nodeType":"ElementaryTypeName","src":"16253:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3835,"mutability":"mutable","name":"result","nameLocation":"16280:6:20","nodeType":"VariableDeclaration","scope":3855,"src":"16267:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3834,"name":"bytes","nodeType":"ElementaryTypeName","src":"16267:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3841,"initialValue":{"arguments":[{"id":3837,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"16300:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3838,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3825,"src":"16303:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3839,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3827,"src":"16306:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3836,"name":"tryModExp","nodeType":"Identifier","overloadedDeclarations":[3820,3902],"referencedDeclaration":3902,"src":"16290:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,bytes memory,bytes memory) view returns (bool,bytes memory)"}},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16290:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"16252:56:20"},{"condition":{"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"16322:8:20","subExpression":{"id":3842,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"16323:7:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3852,"nodeType":"IfStatement","src":"16318:74:20","trueBody":{"id":3851,"nodeType":"Block","src":"16332:60:20","statements":[{"expression":{"arguments":[{"expression":{"id":3847,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"16358:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16364:16:20","memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":2804,"src":"16358:22:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3844,"name":"Panic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"16346:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Panic_$2837_$","typeString":"type(library Panic)"}},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16352:5:20","memberName":"panic","nodeType":"MemberAccess","referencedDeclaration":2836,"src":"16346:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16346:35:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3850,"nodeType":"ExpressionStatement","src":"16346:35:20"}]}},{"expression":{"id":3853,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"16408:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3831,"id":3854,"nodeType":"Return","src":"16401:13:20"}]},"documentation":{"id":3821,"nodeType":"StructuredDocumentation","src":"16051:85:20","text":" @dev Variant of {modExp} that supports inputs of arbitrary length."},"id":3856,"implemented":true,"kind":"function","modifiers":[],"name":"modExp","nameLocation":"16150:6:20","nodeType":"FunctionDefinition","parameters":{"id":3828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3823,"mutability":"mutable","name":"b","nameLocation":"16170:1:20","nodeType":"VariableDeclaration","scope":3856,"src":"16157:14:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3822,"name":"bytes","nodeType":"ElementaryTypeName","src":"16157:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3825,"mutability":"mutable","name":"e","nameLocation":"16186:1:20","nodeType":"VariableDeclaration","scope":3856,"src":"16173:14:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3824,"name":"bytes","nodeType":"ElementaryTypeName","src":"16173:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3827,"mutability":"mutable","name":"m","nameLocation":"16202:1:20","nodeType":"VariableDeclaration","scope":3856,"src":"16189:14:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3826,"name":"bytes","nodeType":"ElementaryTypeName","src":"16189:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16156:48:20"},"returnParameters":{"id":3831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3856,"src":"16228:12:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3829,"name":"bytes","nodeType":"ElementaryTypeName","src":"16228:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16227:14:20"},"scope":4775,"src":"16141:280:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3901,"nodeType":"Block","src":"16675:771:20","statements":[{"condition":{"arguments":[{"id":3871,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"16700:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3870,"name":"_zeroBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3935,"src":"16689:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (bytes memory) pure returns (bool)"}},"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16689:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3880,"nodeType":"IfStatement","src":"16685:47:20","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16712:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"arguments":[{"hexValue":"30","id":3876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16729:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"16719:9:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3874,"name":"bytes","nodeType":"ElementaryTypeName","src":"16723:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16719:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":3878,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"16711:21:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"functionReturnParameters":3869,"id":3879,"nodeType":"Return","src":"16704:28:20"}},{"assignments":[3882],"declarations":[{"constant":false,"id":3882,"mutability":"mutable","name":"mLen","nameLocation":"16751:4:20","nodeType":"VariableDeclaration","scope":3901,"src":"16743:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3881,"name":"uint256","nodeType":"ElementaryTypeName","src":"16743:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3885,"initialValue":{"expression":{"id":3883,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"16758:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16760:6:20","memberName":"length","nodeType":"MemberAccess","src":"16758:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16743:23:20"},{"expression":{"id":3898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3886,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"16848:6:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3889,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"16874:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16876:6:20","memberName":"length","nodeType":"MemberAccess","src":"16874:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3891,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"16884:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16886:6:20","memberName":"length","nodeType":"MemberAccess","src":"16884:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3893,"name":"mLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3882,"src":"16894:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3894,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3859,"src":"16900:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3895,"name":"e","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"16903:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3896,"name":"m","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3863,"src":"16906:1:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3887,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"16857:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16861:12:20","memberName":"encodePacked","nodeType":"MemberAccess","src":"16857:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16857:51:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"16848:60:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3899,"nodeType":"ExpressionStatement","src":"16848:60:20"},{"AST":{"nodeType":"YulBlock","src":"16944:496:20","statements":[{"nodeType":"YulVariableDeclaration","src":"16958:32:20","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"16977:6:20"},{"kind":"number","nodeType":"YulLiteral","src":"16985:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16973:3:20"},"nodeType":"YulFunctionCall","src":"16973:17:20"},"variables":[{"name":"dataPtr","nodeType":"YulTypedName","src":"16962:7:20","type":""}]},{"nodeType":"YulAssignment","src":"17080:73:20","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"17102:3:20"},"nodeType":"YulFunctionCall","src":"17102:5:20"},{"kind":"number","nodeType":"YulLiteral","src":"17109:4:20","type":"","value":"0x05"},{"name":"dataPtr","nodeType":"YulIdentifier","src":"17115:7:20"},{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"17130:6:20"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17124:5:20"},"nodeType":"YulFunctionCall","src":"17124:13:20"},{"name":"dataPtr","nodeType":"YulIdentifier","src":"17139:7:20"},{"name":"mLen","nodeType":"YulIdentifier","src":"17148:4:20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"17091:10:20"},"nodeType":"YulFunctionCall","src":"17091:62:20"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"17080:7:20"}]},{"expression":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"17309:6:20"},{"name":"mLen","nodeType":"YulIdentifier","src":"17317:4:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17302:6:20"},"nodeType":"YulFunctionCall","src":"17302:20:20"},"nodeType":"YulExpressionStatement","src":"17302:20:20"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17405:4:20","type":"","value":"0x40"},{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"17415:7:20"},{"name":"mLen","nodeType":"YulIdentifier","src":"17424:4:20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17411:3:20"},"nodeType":"YulFunctionCall","src":"17411:18:20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17398:6:20"},"nodeType":"YulFunctionCall","src":"17398:32:20"},"nodeType":"YulExpressionStatement","src":"17398:32:20"}]},"evmVersion":"paris","externalReferences":[{"declaration":3882,"isOffset":false,"isSlot":false,"src":"17148:4:20","valueSize":1},{"declaration":3882,"isOffset":false,"isSlot":false,"src":"17317:4:20","valueSize":1},{"declaration":3882,"isOffset":false,"isSlot":false,"src":"17424:4:20","valueSize":1},{"declaration":3868,"isOffset":false,"isSlot":false,"src":"16977:6:20","valueSize":1},{"declaration":3868,"isOffset":false,"isSlot":false,"src":"17130:6:20","valueSize":1},{"declaration":3868,"isOffset":false,"isSlot":false,"src":"17309:6:20","valueSize":1},{"declaration":3866,"isOffset":false,"isSlot":false,"src":"17080:7:20","valueSize":1}],"flags":["memory-safe"],"id":3900,"nodeType":"InlineAssembly","src":"16919:521:20"}]},"documentation":{"id":3857,"nodeType":"StructuredDocumentation","src":"16427:88:20","text":" @dev Variant of {tryModExp} that supports inputs of arbitrary length."},"id":3902,"implemented":true,"kind":"function","modifiers":[],"name":"tryModExp","nameLocation":"16529:9:20","nodeType":"FunctionDefinition","parameters":{"id":3864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3859,"mutability":"mutable","name":"b","nameLocation":"16561:1:20","nodeType":"VariableDeclaration","scope":3902,"src":"16548:14:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3858,"name":"bytes","nodeType":"ElementaryTypeName","src":"16548:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3861,"mutability":"mutable","name":"e","nameLocation":"16585:1:20","nodeType":"VariableDeclaration","scope":3902,"src":"16572:14:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3860,"name":"bytes","nodeType":"ElementaryTypeName","src":"16572:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3863,"mutability":"mutable","name":"m","nameLocation":"16609:1:20","nodeType":"VariableDeclaration","scope":3902,"src":"16596:14:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3862,"name":"bytes","nodeType":"ElementaryTypeName","src":"16596:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16538:78:20"},"returnParameters":{"id":3869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3866,"mutability":"mutable","name":"success","nameLocation":"16645:7:20","nodeType":"VariableDeclaration","scope":3902,"src":"16640:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3865,"name":"bool","nodeType":"ElementaryTypeName","src":"16640:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3868,"mutability":"mutable","name":"result","nameLocation":"16667:6:20","nodeType":"VariableDeclaration","scope":3902,"src":"16654:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3867,"name":"bytes","nodeType":"ElementaryTypeName","src":"16654:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16639:35:20"},"scope":4775,"src":"16520:926:20","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3934,"nodeType":"Block","src":"17601:176:20","statements":[{"body":{"id":3930,"nodeType":"Block","src":"17658:92:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3921,"name":"byteArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"17676:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3923,"indexExpression":{"id":3922,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3911,"src":"17686:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17676:12:20","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17692:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17676:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3929,"nodeType":"IfStatement","src":"17672:68:20","trueBody":{"id":3928,"nodeType":"Block","src":"17695:45:20","statements":[{"expression":{"hexValue":"66616c7365","id":3926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17720:5:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3909,"id":3927,"nodeType":"Return","src":"17713:12:20"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3914,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3911,"src":"17631:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3915,"name":"byteArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"17635:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17645:6:20","memberName":"length","nodeType":"MemberAccess","src":"17635:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17631:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3931,"initializationExpression":{"assignments":[3911],"declarations":[{"constant":false,"id":3911,"mutability":"mutable","name":"i","nameLocation":"17624:1:20","nodeType":"VariableDeclaration","scope":3931,"src":"17616:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3910,"name":"uint256","nodeType":"ElementaryTypeName","src":"17616:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3913,"initialValue":{"hexValue":"30","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17628:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17616:13:20"},"loopExpression":{"expression":{"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17653:3:20","subExpression":{"id":3918,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3911,"src":"17655:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3920,"nodeType":"ExpressionStatement","src":"17653:3:20"},"nodeType":"ForStatement","src":"17611:139:20"},{"expression":{"hexValue":"74727565","id":3932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"17766:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3909,"id":3933,"nodeType":"Return","src":"17759:11:20"}]},"documentation":{"id":3903,"nodeType":"StructuredDocumentation","src":"17452:72:20","text":" @dev Returns whether the provided byte array is zero."},"id":3935,"implemented":true,"kind":"function","modifiers":[],"name":"_zeroBytes","nameLocation":"17538:10:20","nodeType":"FunctionDefinition","parameters":{"id":3906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3905,"mutability":"mutable","name":"byteArray","nameLocation":"17562:9:20","nodeType":"VariableDeclaration","scope":3935,"src":"17549:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3904,"name":"bytes","nodeType":"ElementaryTypeName","src":"17549:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17548:24:20"},"returnParameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3935,"src":"17595:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3907,"name":"bool","nodeType":"ElementaryTypeName","src":"17595:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17594:6:20"},"scope":4775,"src":"17529:248:20","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":4153,"nodeType":"Block","src":"18137:5124:20","statements":[{"id":4152,"nodeType":"UncheckedBlock","src":"18147:5108:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3943,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"18241:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18246:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18241:6:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3949,"nodeType":"IfStatement","src":"18237:53:20","trueBody":{"id":3948,"nodeType":"Block","src":"18249:41:20","statements":[{"expression":{"id":3946,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"18274:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3942,"id":3947,"nodeType":"Return","src":"18267:8:20"}]}},{"assignments":[3951],"declarations":[{"constant":false,"id":3951,"mutability":"mutable","name":"aa","nameLocation":"19225:2:20","nodeType":"VariableDeclaration","scope":4152,"src":"19217:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3950,"name":"uint256","nodeType":"ElementaryTypeName","src":"19217:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3953,"initialValue":{"id":3952,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"19230:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19217:14:20"},{"assignments":[3955],"declarations":[{"constant":false,"id":3955,"mutability":"mutable","name":"xn","nameLocation":"19253:2:20","nodeType":"VariableDeclaration","scope":4152,"src":"19245:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3954,"name":"uint256","nodeType":"ElementaryTypeName","src":"19245:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3957,"initialValue":{"hexValue":"31","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19258:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"19245:14:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3958,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19278:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":3961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19285:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":3960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19290:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"19285:8:20","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"id":3962,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19284:10:20","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},"src":"19278:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3973,"nodeType":"IfStatement","src":"19274:92:20","trueBody":{"id":3972,"nodeType":"Block","src":"19296:70:20","statements":[{"expression":{"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3964,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19314:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19321:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"19314:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3967,"nodeType":"ExpressionStatement","src":"19314:10:20"},{"expression":{"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3968,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"19342:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3634","id":3969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19349:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"19342:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3971,"nodeType":"ExpressionStatement","src":"19342:9:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3974,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19383:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":3977,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19390:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":3976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19395:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"19390:7:20","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":3978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19389:9:20","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"src":"19383:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3989,"nodeType":"IfStatement","src":"19379:90:20","trueBody":{"id":3988,"nodeType":"Block","src":"19400:69:20","statements":[{"expression":{"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3980,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19418:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19425:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"19418:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3983,"nodeType":"ExpressionStatement","src":"19418:9:20"},{"expression":{"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3984,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"19445:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3332","id":3985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19452:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"19445:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3987,"nodeType":"ExpressionStatement","src":"19445:9:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3990,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19486:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":3993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19493:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":3992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19498:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"19493:7:20","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":3994,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19492:9:20","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"19486:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4005,"nodeType":"IfStatement","src":"19482:90:20","trueBody":{"id":4004,"nodeType":"Block","src":"19503:69:20","statements":[{"expression":{"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3996,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19521:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19528:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"19521:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3999,"nodeType":"ExpressionStatement","src":"19521:9:20"},{"expression":{"id":4002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4000,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"19548:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"3136","id":4001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19555:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"19548:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4003,"nodeType":"ExpressionStatement","src":"19548:9:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4006,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19589:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":4009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19596:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":4008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19601:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"19596:7:20","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}}],"id":4010,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19595:9:20","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"src":"19589:15:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4021,"nodeType":"IfStatement","src":"19585:89:20","trueBody":{"id":4020,"nodeType":"Block","src":"19606:68:20","statements":[{"expression":{"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4012,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19624:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19631:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"19624:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4015,"nodeType":"ExpressionStatement","src":"19624:9:20"},{"expression":{"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4016,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"19651:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"38","id":4017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19658:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"19651:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4019,"nodeType":"ExpressionStatement","src":"19651:8:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4022,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19691:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":4025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19698:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":4024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19703:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"19698:6:20","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":4026,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19697:8:20","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"src":"19691:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4037,"nodeType":"IfStatement","src":"19687:87:20","trueBody":{"id":4036,"nodeType":"Block","src":"19707:67:20","statements":[{"expression":{"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4028,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19725:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19732:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"19725:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4031,"nodeType":"ExpressionStatement","src":"19725:8:20"},{"expression":{"id":4034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4032,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"19751:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"34","id":4033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19758:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"19751:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4035,"nodeType":"ExpressionStatement","src":"19751:8:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4038,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19791:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"id":4041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19798:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":4040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19803:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"19798:6:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}}],"id":4042,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19797:8:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}},"src":"19791:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4053,"nodeType":"IfStatement","src":"19787:87:20","trueBody":{"id":4052,"nodeType":"Block","src":"19807:67:20","statements":[{"expression":{"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4044,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19825:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19832:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"19825:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4047,"nodeType":"ExpressionStatement","src":"19825:8:20"},{"expression":{"id":4050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4048,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"19851:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"32","id":4049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19858:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"19851:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4051,"nodeType":"ExpressionStatement","src":"19851:8:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4054,"name":"aa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"19891:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"id":4057,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19898:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":4056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19903:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"19898:6:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}}],"id":4058,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"19897:8:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}},"src":"19891:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4065,"nodeType":"IfStatement","src":"19887:61:20","trueBody":{"id":4064,"nodeType":"Block","src":"19907:41:20","statements":[{"expression":{"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4060,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"19925:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"<<=","rightHandSide":{"hexValue":"31","id":4061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19932:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19925:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4063,"nodeType":"ExpressionStatement","src":"19925:8:20"}]}},{"expression":{"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4066,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"20368:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20374:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4068,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"20378:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20374:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4070,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"20373:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20385:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"20373:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20368:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4074,"nodeType":"ExpressionStatement","src":"20368:18:20"},{"expression":{"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4075,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22273:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4076,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22279:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4077,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"22284:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4078,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22288:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22284:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22279:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4081,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22278:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22295:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22278:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22273:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4085,"nodeType":"ExpressionStatement","src":"22273:23:20"},{"expression":{"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4086,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22382:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4087,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22388:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4088,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"22393:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4089,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22397:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22393:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22388:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4092,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22387:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22404:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22387:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22382:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4096,"nodeType":"ExpressionStatement","src":"22382:23:20"},{"expression":{"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4097,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22493:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4098,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22499:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4099,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"22504:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4100,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22508:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22504:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22499:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22498:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22515:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22498:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22493:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4107,"nodeType":"ExpressionStatement","src":"22493:23:20"},{"expression":{"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4108,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22602:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4109,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22608:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4110,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"22613:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4111,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22617:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22613:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22608:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4114,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22607:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22624:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22607:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22602:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4118,"nodeType":"ExpressionStatement","src":"22602:23:20"},{"expression":{"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4119,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22712:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4120,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22718:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4121,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"22723:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4122,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22727:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22723:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22718:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4125,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22717:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22734:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22717:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22712:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4129,"nodeType":"ExpressionStatement","src":"22712:23:20"},{"expression":{"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4130,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22822:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4131,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22828:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4132,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"22833:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4133,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"22837:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22833:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22828:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4136,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"22827:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22844:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22827:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22822:23:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4140,"nodeType":"ExpressionStatement","src":"22822:23:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4141,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"23211:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4144,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"23232:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4145,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"23237:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4146,"name":"xn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"23241:2:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23237:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23232:11:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4142,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"23216:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23225:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"23216:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23216:28:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23211:33:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3942,"id":4151,"nodeType":"Return","src":"23204:40:20"}]}]},"documentation":{"id":3936,"nodeType":"StructuredDocumentation","src":"17783:292:20","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n using integer operations."},"id":4154,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"18089:4:20","nodeType":"FunctionDefinition","parameters":{"id":3939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3938,"mutability":"mutable","name":"a","nameLocation":"18102:1:20","nodeType":"VariableDeclaration","scope":4154,"src":"18094:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3937,"name":"uint256","nodeType":"ElementaryTypeName","src":"18094:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18093:11:20"},"returnParameters":{"id":3942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4154,"src":"18128:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3940,"name":"uint256","nodeType":"ElementaryTypeName","src":"18128:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18127:9:20"},"scope":4775,"src":"18080:5181:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4187,"nodeType":"Block","src":"23434:171:20","statements":[{"id":4186,"nodeType":"UncheckedBlock","src":"23444:155:20","statements":[{"assignments":[4166],"declarations":[{"constant":false,"id":4166,"mutability":"mutable","name":"result","nameLocation":"23476:6:20","nodeType":"VariableDeclaration","scope":4186,"src":"23468:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4165,"name":"uint256","nodeType":"ElementaryTypeName","src":"23468:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4170,"initialValue":{"arguments":[{"id":4168,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"23490:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4167,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4154,4188],"referencedDeclaration":4154,"src":"23485:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23485:7:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23468:24:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"23513:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4175,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"23555:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}],"id":4174,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"23538:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3181_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23538:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4177,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"23568:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4178,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"23577:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23568:15:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4180,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4157,"src":"23586:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23568:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"23538:49:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4172,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"23522:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23531:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"23522:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23522:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23513:75:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4164,"id":4185,"nodeType":"Return","src":"23506:82:20"}]}]},"documentation":{"id":4155,"nodeType":"StructuredDocumentation","src":"23267:86:20","text":" @dev Calculates sqrt(a), following the selected rounding direction."},"id":4188,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"23367:4:20","nodeType":"FunctionDefinition","parameters":{"id":4161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4157,"mutability":"mutable","name":"a","nameLocation":"23380:1:20","nodeType":"VariableDeclaration","scope":4188,"src":"23372:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4156,"name":"uint256","nodeType":"ElementaryTypeName","src":"23372:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4160,"mutability":"mutable","name":"rounding","nameLocation":"23392:8:20","nodeType":"VariableDeclaration","scope":4188,"src":"23383:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"},"typeName":{"id":4159,"nodeType":"UserDefinedTypeName","pathNode":{"id":4158,"name":"Rounding","nameLocations":["23383:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3181,"src":"23383:8:20"},"referencedDeclaration":3181,"src":"23383:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"23371:30:20"},"returnParameters":{"id":4164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4163,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4188,"src":"23425:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4162,"name":"uint256","nodeType":"ElementaryTypeName","src":"23425:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23424:9:20"},"scope":4775,"src":"23358:247:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4383,"nodeType":"Block","src":"23796:981:20","statements":[{"assignments":[4197],"declarations":[{"constant":false,"id":4197,"mutability":"mutable","name":"result","nameLocation":"23814:6:20","nodeType":"VariableDeclaration","scope":4383,"src":"23806:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4196,"name":"uint256","nodeType":"ElementaryTypeName","src":"23806:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4199,"initialValue":{"hexValue":"30","id":4198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23823:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23806:18:20"},{"assignments":[4201],"declarations":[{"constant":false,"id":4201,"mutability":"mutable","name":"exp","nameLocation":"23842:3:20","nodeType":"VariableDeclaration","scope":4383,"src":"23834:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4200,"name":"uint256","nodeType":"ElementaryTypeName","src":"23834:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4202,"nodeType":"VariableDeclarationStatement","src":"23834:11:20"},{"id":4380,"nodeType":"UncheckedBlock","src":"23855:893:20","statements":[{"expression":{"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4203,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"23879:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313238","id":4204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23885:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4207,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"23907:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"id":4213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":4210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23916:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":4209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23921:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"23916:8:20","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"id":4211,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"23915:10:20","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23928:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"23915:14:20","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"}},"src":"23907:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4205,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"23891:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23900:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"23891:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23891:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23885:45:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23879:51:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4218,"nodeType":"ExpressionStatement","src":"23879:51:20"},{"expression":{"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"23944:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":4220,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"23954:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23944:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4222,"nodeType":"ExpressionStatement","src":"23944:13:20"},{"expression":{"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4223,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"23971:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4224,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"23981:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23971:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4226,"nodeType":"ExpressionStatement","src":"23971:13:20"},{"expression":{"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4227,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"23999:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3634","id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24005:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24026:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"id":4237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":4234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24035:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":4233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24040:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"24035:7:20","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":4235,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24034:9:20","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24046:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24034:13:20","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"}},"src":"24026:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4229,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"24010:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24019:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"24010:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24010:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24005:43:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23999:49:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4242,"nodeType":"ExpressionStatement","src":"23999:49:20"},{"expression":{"id":4245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4243,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24062:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":4244,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24072:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24062:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4246,"nodeType":"ExpressionStatement","src":"24062:13:20"},{"expression":{"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4247,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"24089:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4248,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24099:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24089:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4250,"nodeType":"ExpressionStatement","src":"24089:13:20"},{"expression":{"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4251,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24117:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":4252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24123:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24144:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"id":4261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":4258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24153:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":4257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24158:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"24153:7:20","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":4259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24152:9:20","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24164:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24152:13:20","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"}},"src":"24144:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4253,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"24128:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24137:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"24128:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24128:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24123:43:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24117:49:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4266,"nodeType":"ExpressionStatement","src":"24117:49:20"},{"expression":{"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4267,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24180:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":4268,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24190:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24180:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4270,"nodeType":"ExpressionStatement","src":"24180:13:20"},{"expression":{"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4271,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"24207:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4272,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24217:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24207:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4274,"nodeType":"ExpressionStatement","src":"24207:13:20"},{"expression":{"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4275,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24235:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3136","id":4276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24241:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24262:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"id":4285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":4282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24271:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":4281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24276:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"24271:7:20","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}}],"id":4283,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24270:9:20","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24282:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24270:13:20","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"}},"src":"24262:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4277,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"24246:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24255:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"24246:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24246:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24241:43:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24235:49:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4290,"nodeType":"ExpressionStatement","src":"24235:49:20"},{"expression":{"id":4293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4291,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24298:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":4292,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24308:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24298:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4294,"nodeType":"ExpressionStatement","src":"24298:13:20"},{"expression":{"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4295,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"24325:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4296,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24335:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24325:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4298,"nodeType":"ExpressionStatement","src":"24325:13:20"},{"expression":{"id":4313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4299,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24353:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":4300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24359:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4303,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24379:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"id":4309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":4306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24388:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":4305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24393:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"24388:6:20","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":4307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24387:8:20","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24398:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24387:12:20","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"}},"src":"24379:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4301,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"24363:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24372:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"24363:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24363:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24359:41:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24353:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4314,"nodeType":"ExpressionStatement","src":"24353:47:20"},{"expression":{"id":4317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4315,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24414:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":4316,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24424:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24414:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4318,"nodeType":"ExpressionStatement","src":"24414:13:20"},{"expression":{"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4319,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"24441:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4320,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24451:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24441:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4322,"nodeType":"ExpressionStatement","src":"24441:13:20"},{"expression":{"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4323,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24469:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":4324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24475:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24495:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"id":4333,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"id":4330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24504:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"34","id":4329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24509:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"24504:6:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}}],"id":4331,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24503:8:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24514:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24503:12:20","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"}},"src":"24495:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4325,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"24479:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24488:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"24479:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24479:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24475:41:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24469:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4338,"nodeType":"ExpressionStatement","src":"24469:47:20"},{"expression":{"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24530:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":4340,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24540:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24530:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4342,"nodeType":"ExpressionStatement","src":"24530:13:20"},{"expression":{"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"24557:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4344,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24567:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24557:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4346,"nodeType":"ExpressionStatement","src":"24557:13:20"},{"expression":{"id":4361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4347,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24585:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24591:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24611:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"id":4357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"id":4354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24620:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"32","id":4353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24625:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"24620:6:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}}],"id":4355,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"24619:8:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24630:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24619:12:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"}},"src":"24611:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4349,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"24595:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24604:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"24595:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24595:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24591:41:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24585:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4362,"nodeType":"ExpressionStatement","src":"24585:47:20"},{"expression":{"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24646:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"id":4364,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24656:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24646:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4366,"nodeType":"ExpressionStatement","src":"24646:13:20"},{"expression":{"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4367,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"24673:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4368,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"24683:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24673:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4370,"nodeType":"ExpressionStatement","src":"24673:13:20"},{"expression":{"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"24701:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4374,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4191,"src":"24727:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":4375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24735:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24727:9:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4372,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"24711:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24720:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"24711:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24711:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24701:36:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4379,"nodeType":"ExpressionStatement","src":"24701:36:20"}]},{"expression":{"id":4381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"24764:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4195,"id":4382,"nodeType":"Return","src":"24757:13:20"}]},"documentation":{"id":4189,"nodeType":"StructuredDocumentation","src":"23611:119:20","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":4384,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"23744:4:20","nodeType":"FunctionDefinition","parameters":{"id":4192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4191,"mutability":"mutable","name":"value","nameLocation":"23757:5:20","nodeType":"VariableDeclaration","scope":4384,"src":"23749:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4190,"name":"uint256","nodeType":"ElementaryTypeName","src":"23749:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23748:15:20"},"returnParameters":{"id":4195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4384,"src":"23787:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4193,"name":"uint256","nodeType":"ElementaryTypeName","src":"23787:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23786:9:20"},"scope":4775,"src":"23735:1042:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4417,"nodeType":"Block","src":"25010:175:20","statements":[{"id":4416,"nodeType":"UncheckedBlock","src":"25020:159:20","statements":[{"assignments":[4396],"declarations":[{"constant":false,"id":4396,"mutability":"mutable","name":"result","nameLocation":"25052:6:20","nodeType":"VariableDeclaration","scope":4416,"src":"25044:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4395,"name":"uint256","nodeType":"ElementaryTypeName","src":"25044:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4400,"initialValue":{"arguments":[{"id":4398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"25066:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4397,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4384,4418],"referencedDeclaration":4384,"src":"25061:4:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25061:11:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25044:28:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4401,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"25093:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4405,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4390,"src":"25135:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}],"id":4404,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"25118:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3181_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25118:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25148:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4408,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4396,"src":"25153:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25148:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4410,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4387,"src":"25162:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25148:19:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25118:49:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4402,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"25102:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25111:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"25102:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25102:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25093:75:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4394,"id":4415,"nodeType":"Return","src":"25086:82:20"}]}]},"documentation":{"id":4385,"nodeType":"StructuredDocumentation","src":"24783:142:20","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4418,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"24939:4:20","nodeType":"FunctionDefinition","parameters":{"id":4391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4387,"mutability":"mutable","name":"value","nameLocation":"24952:5:20","nodeType":"VariableDeclaration","scope":4418,"src":"24944:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4386,"name":"uint256","nodeType":"ElementaryTypeName","src":"24944:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4390,"mutability":"mutable","name":"rounding","nameLocation":"24968:8:20","nodeType":"VariableDeclaration","scope":4418,"src":"24959:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"},"typeName":{"id":4389,"nodeType":"UserDefinedTypeName","pathNode":{"id":4388,"name":"Rounding","nameLocations":["24959:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3181,"src":"24959:8:20"},"referencedDeclaration":3181,"src":"24959:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"24943:34:20"},"returnParameters":{"id":4394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4418,"src":"25001:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4392,"name":"uint256","nodeType":"ElementaryTypeName","src":"25001:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25000:9:20"},"scope":4775,"src":"24930:255:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4546,"nodeType":"Block","src":"25378:854:20","statements":[{"assignments":[4427],"declarations":[{"constant":false,"id":4427,"mutability":"mutable","name":"result","nameLocation":"25396:6:20","nodeType":"VariableDeclaration","scope":4546,"src":"25388:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4426,"name":"uint256","nodeType":"ElementaryTypeName","src":"25388:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4429,"initialValue":{"hexValue":"30","id":4428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25405:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"25388:18:20"},{"id":4543,"nodeType":"UncheckedBlock","src":"25416:787:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4430,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25444:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25453:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25459:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"25453:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"25444:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4446,"nodeType":"IfStatement","src":"25440:103:20","trueBody":{"id":4445,"nodeType":"Block","src":"25463:80:20","statements":[{"expression":{"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4435,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25481:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25490:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25496:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"25490:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"25481:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4440,"nodeType":"ExpressionStatement","src":"25481:17:20"},{"expression":{"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4441,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"25516:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25526:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"25516:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4444,"nodeType":"ExpressionStatement","src":"25516:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25560:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25569:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25575:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"25569:8:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"25560:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4463,"nodeType":"IfStatement","src":"25556:103:20","trueBody":{"id":4462,"nodeType":"Block","src":"25579:80:20","statements":[{"expression":{"id":4456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25597:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25606:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25612:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"25606:8:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"25597:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4457,"nodeType":"ExpressionStatement","src":"25597:17:20"},{"expression":{"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4458,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"25632:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25642:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"25632:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4461,"nodeType":"ExpressionStatement","src":"25632:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25676:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25685:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25691:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"25685:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"25676:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4480,"nodeType":"IfStatement","src":"25672:103:20","trueBody":{"id":4479,"nodeType":"Block","src":"25695:80:20","statements":[{"expression":{"id":4473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25713:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25722:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25728:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"25722:8:20","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"25713:17:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4474,"nodeType":"ExpressionStatement","src":"25713:17:20"},{"expression":{"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4475,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"25748:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25758:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"25748:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4478,"nodeType":"ExpressionStatement","src":"25748:12:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25792:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25801:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25807:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"25801:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"25792:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4497,"nodeType":"IfStatement","src":"25788:100:20","trueBody":{"id":4496,"nodeType":"Block","src":"25810:78:20","statements":[{"expression":{"id":4490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25828:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25837:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25843:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"25837:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"25828:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4491,"nodeType":"ExpressionStatement","src":"25828:16:20"},{"expression":{"id":4494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4492,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"25862:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25872:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"25862:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4495,"nodeType":"ExpressionStatement","src":"25862:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25905:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25914:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25920:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"25914:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"25905:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4514,"nodeType":"IfStatement","src":"25901:100:20","trueBody":{"id":4513,"nodeType":"Block","src":"25923:78:20","statements":[{"expression":{"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"25941:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25950:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25956:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"25950:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"25941:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4508,"nodeType":"ExpressionStatement","src":"25941:16:20"},{"expression":{"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4509,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"25975:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25985:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"25975:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4512,"nodeType":"ExpressionStatement","src":"25975:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4515,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"26018:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4518,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26027:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26033:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26027:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"26018:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4531,"nodeType":"IfStatement","src":"26014:100:20","trueBody":{"id":4530,"nodeType":"Block","src":"26036:78:20","statements":[{"expression":{"id":4524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4520,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"26054:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26063:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26069:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26063:7:20","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"26054:16:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4525,"nodeType":"ExpressionStatement","src":"26054:16:20"},{"expression":{"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4526,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"26088:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26098:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"26088:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4529,"nodeType":"ExpressionStatement","src":"26088:11:20"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4532,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4421,"src":"26131:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26140:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26146:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"26140:7:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"26131:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4542,"nodeType":"IfStatement","src":"26127:66:20","trueBody":{"id":4541,"nodeType":"Block","src":"26149:44:20","statements":[{"expression":{"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4537,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"26167:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26177:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"26167:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4540,"nodeType":"ExpressionStatement","src":"26167:11:20"}]}}]},{"expression":{"id":4544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4427,"src":"26219:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4425,"id":4545,"nodeType":"Return","src":"26212:13:20"}]},"documentation":{"id":4419,"nodeType":"StructuredDocumentation","src":"25191:120:20","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":4547,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"25325:5:20","nodeType":"FunctionDefinition","parameters":{"id":4422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4421,"mutability":"mutable","name":"value","nameLocation":"25339:5:20","nodeType":"VariableDeclaration","scope":4547,"src":"25331:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4420,"name":"uint256","nodeType":"ElementaryTypeName","src":"25331:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25330:15:20"},"returnParameters":{"id":4425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4547,"src":"25369:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4423,"name":"uint256","nodeType":"ElementaryTypeName","src":"25369:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"25368:9:20"},"scope":4775,"src":"25316:916:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4580,"nodeType":"Block","src":"26467:177:20","statements":[{"id":4579,"nodeType":"UncheckedBlock","src":"26477:161:20","statements":[{"assignments":[4559],"declarations":[{"constant":false,"id":4559,"mutability":"mutable","name":"result","nameLocation":"26509:6:20","nodeType":"VariableDeclaration","scope":4579,"src":"26501:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4558,"name":"uint256","nodeType":"ElementaryTypeName","src":"26501:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4563,"initialValue":{"arguments":[{"id":4561,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4550,"src":"26524:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4560,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4547,4581],"referencedDeclaration":4547,"src":"26518:5:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26518:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"26501:29:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4564,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4559,"src":"26551:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4568,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4553,"src":"26593:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}],"id":4567,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"26576:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3181_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26576:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26606:2:20","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4571,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4559,"src":"26612:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26606:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4573,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4550,"src":"26621:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26606:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26576:50:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4565,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"26560:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26569:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"26560:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26560:67:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26551:76:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4557,"id":4578,"nodeType":"Return","src":"26544:83:20"}]}]},"documentation":{"id":4548,"nodeType":"StructuredDocumentation","src":"26238:143:20","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4581,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"26395:5:20","nodeType":"FunctionDefinition","parameters":{"id":4554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4550,"mutability":"mutable","name":"value","nameLocation":"26409:5:20","nodeType":"VariableDeclaration","scope":4581,"src":"26401:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4549,"name":"uint256","nodeType":"ElementaryTypeName","src":"26401:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4553,"mutability":"mutable","name":"rounding","nameLocation":"26425:8:20","nodeType":"VariableDeclaration","scope":4581,"src":"26416:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"},"typeName":{"id":4552,"nodeType":"UserDefinedTypeName","pathNode":{"id":4551,"name":"Rounding","nameLocations":["26416:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3181,"src":"26416:8:20"},"referencedDeclaration":3181,"src":"26416:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"26400:34:20"},"returnParameters":{"id":4557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4581,"src":"26458:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4555,"name":"uint256","nodeType":"ElementaryTypeName","src":"26458:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26457:9:20"},"scope":4775,"src":"26386:258:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4717,"nodeType":"Block","src":"26964:674:20","statements":[{"assignments":[4590],"declarations":[{"constant":false,"id":4590,"mutability":"mutable","name":"result","nameLocation":"26982:6:20","nodeType":"VariableDeclaration","scope":4717,"src":"26974:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4589,"name":"uint256","nodeType":"ElementaryTypeName","src":"26974:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4592,"initialValue":{"hexValue":"30","id":4591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26991:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"26974:18:20"},{"assignments":[4594],"declarations":[{"constant":false,"id":4594,"mutability":"mutable","name":"isGt","nameLocation":"27010:4:20","nodeType":"VariableDeclaration","scope":4717,"src":"27002:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4593,"name":"uint256","nodeType":"ElementaryTypeName","src":"27002:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4595,"nodeType":"VariableDeclarationStatement","src":"27002:12:20"},{"id":4714,"nodeType":"UncheckedBlock","src":"27024:585:20","statements":[{"expression":{"id":4608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4596,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27048:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4599,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27071:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"},"id":4605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":4602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27080:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":4601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27085:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"27080:8:20","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"id":4603,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27079:10:20","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27092:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27079:14:20","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211455_by_1","typeString":"int_const 3402...(31 digits omitted)...1455"}},"src":"27071:22:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4597,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"27055:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27064:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"27055:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27055:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27048:46:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4609,"nodeType":"ExpressionStatement","src":"27048:46:20"},{"expression":{"id":4614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27108:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4611,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27118:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313238","id":4612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27125:3:20","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"27118:10:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27108:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4615,"nodeType":"ExpressionStatement","src":"27108:20:20"},{"expression":{"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4616,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"27142:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4617,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27152:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3136","id":4618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27159:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"27152:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27142:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4621,"nodeType":"ExpressionStatement","src":"27142:19:20"},{"expression":{"id":4634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4622,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27176:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4625,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27199:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"id":4631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":4628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27208:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":4627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27213:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"27208:7:20","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"id":4629,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27207:9:20","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27219:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27207:13:20","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"}},"src":"27199:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4623,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"27183:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27192:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"27183:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27183:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27176:45:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4635,"nodeType":"ExpressionStatement","src":"27176:45:20"},{"expression":{"id":4640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27235:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4637,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27245:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3634","id":4638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27252:2:20","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"27245:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27235:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4641,"nodeType":"ExpressionStatement","src":"27235:19:20"},{"expression":{"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4642,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"27268:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4643,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27278:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":4644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27285:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"27278:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27268:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4647,"nodeType":"ExpressionStatement","src":"27268:18:20"},{"expression":{"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4648,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27301:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4651,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27324:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"id":4657,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":4654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27333:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":4653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27338:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"27333:7:20","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":4655,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27332:9:20","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27344:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27332:13:20","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"}},"src":"27324:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4649,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"27308:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27317:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"27308:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27308:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27301:45:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4661,"nodeType":"ExpressionStatement","src":"27301:45:20"},{"expression":{"id":4666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27360:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4663,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27370:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3332","id":4664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27377:2:20","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"27370:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27360:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4667,"nodeType":"ExpressionStatement","src":"27360:19:20"},{"expression":{"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4668,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"27393:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4669,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27403:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"34","id":4670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27410:1:20","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"27403:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27393:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4673,"nodeType":"ExpressionStatement","src":"27393:18:20"},{"expression":{"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4674,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27426:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27449:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"id":4683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"id":4680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27458:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3136","id":4679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27463:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"27458:7:20","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}}],"id":4681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27457:9:20","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27469:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27457:13:20","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"}},"src":"27449:21:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4675,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"27433:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27442:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"27433:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27433:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27426:45:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4687,"nodeType":"ExpressionStatement","src":"27426:45:20"},{"expression":{"id":4692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4688,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27485:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4689,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27495:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3136","id":4690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27502:2:20","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"27495:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27485:19:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4693,"nodeType":"ExpressionStatement","src":"27485:19:20"},{"expression":{"id":4698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4694,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"27518:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4695,"name":"isGt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4594,"src":"27528:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":4696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27535:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"27528:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27518:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4699,"nodeType":"ExpressionStatement","src":"27518:18:20"},{"expression":{"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4700,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"27551:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4584,"src":"27577:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"id":4709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"id":4706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27586:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"38","id":4705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27591:1:20","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"27586:6:20","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}}],"id":4707,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"27585:8:20","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27596:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"27585:12:20","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"}},"src":"27577:20:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4701,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"27561:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27570:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"27561:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27561:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27551:47:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4713,"nodeType":"ExpressionStatement","src":"27551:47:20"}]},{"expression":{"id":4715,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"27625:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4588,"id":4716,"nodeType":"Return","src":"27618:13:20"}]},"documentation":{"id":4582,"nodeType":"StructuredDocumentation","src":"26650:246:20","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4718,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"26910:6:20","nodeType":"FunctionDefinition","parameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"mutability":"mutable","name":"value","nameLocation":"26925:5:20","nodeType":"VariableDeclaration","scope":4718,"src":"26917:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4583,"name":"uint256","nodeType":"ElementaryTypeName","src":"26917:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26916:15:20"},"returnParameters":{"id":4588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4718,"src":"26955:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4586,"name":"uint256","nodeType":"ElementaryTypeName","src":"26955:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26954:9:20"},"scope":4775,"src":"26901:737:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4754,"nodeType":"Block","src":"27875:184:20","statements":[{"id":4753,"nodeType":"UncheckedBlock","src":"27885:168:20","statements":[{"assignments":[4730],"declarations":[{"constant":false,"id":4730,"mutability":"mutable","name":"result","nameLocation":"27917:6:20","nodeType":"VariableDeclaration","scope":4753,"src":"27909:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4729,"name":"uint256","nodeType":"ElementaryTypeName","src":"27909:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4734,"initialValue":{"arguments":[{"id":4732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"27933:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4731,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4718,4755],"referencedDeclaration":4718,"src":"27926:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27926:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27909:30:20"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4735,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4730,"src":"27960:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4739,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"28002:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}],"id":4738,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"27985:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3181_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27985:26:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28015:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4742,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4730,"src":"28021:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28031:1:20","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"28021:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4745,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"28020:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28015:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4747,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"28036:5:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28015:26:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"27985:56:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":4736,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"27969:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27978:6:20","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"27969:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27969:73:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27960:82:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4728,"id":4752,"nodeType":"Return","src":"27953:89:20"}]}]},"documentation":{"id":4719,"nodeType":"StructuredDocumentation","src":"27644:144:20","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4755,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"27802:6:20","nodeType":"FunctionDefinition","parameters":{"id":4725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4721,"mutability":"mutable","name":"value","nameLocation":"27817:5:20","nodeType":"VariableDeclaration","scope":4755,"src":"27809:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4720,"name":"uint256","nodeType":"ElementaryTypeName","src":"27809:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4724,"mutability":"mutable","name":"rounding","nameLocation":"27833:8:20","nodeType":"VariableDeclaration","scope":4755,"src":"27824:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"},"typeName":{"id":4723,"nodeType":"UserDefinedTypeName","pathNode":{"id":4722,"name":"Rounding","nameLocations":["27824:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3181,"src":"27824:8:20"},"referencedDeclaration":3181,"src":"27824:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"27808:34:20"},"returnParameters":{"id":4728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4755,"src":"27866:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4726,"name":"uint256","nodeType":"ElementaryTypeName","src":"27866:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27865:9:20"},"scope":4775,"src":"27793:266:20","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4773,"nodeType":"Block","src":"28257:48:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4766,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4759,"src":"28280:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}],"id":4765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28274:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4764,"name":"uint8","nodeType":"ElementaryTypeName","src":"28274:5:20","typeDescriptions":{}}},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28274:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":4768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28292:1:20","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"28274:19:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":4770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28297:1:20","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"28274:24:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4763,"id":4772,"nodeType":"Return","src":"28267:31:20"}]},"documentation":{"id":4756,"nodeType":"StructuredDocumentation","src":"28065:113:20","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":4774,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"28192:16:20","nodeType":"FunctionDefinition","parameters":{"id":4760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4759,"mutability":"mutable","name":"rounding","nameLocation":"28218:8:20","nodeType":"VariableDeclaration","scope":4774,"src":"28209:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"},"typeName":{"id":4758,"nodeType":"UserDefinedTypeName","pathNode":{"id":4757,"name":"Rounding","nameLocations":["28209:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":3181,"src":"28209:8:20"},"referencedDeclaration":3181,"src":"28209:8:20","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3181","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"28208:19:20"},"returnParameters":{"id":4763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4774,"src":"28251:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4761,"name":"bool","nodeType":"ElementaryTypeName","src":"28251:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28250:6:20"},"scope":4775,"src":"28183:122:20","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4776,"src":"281:28026:20","usedErrors":[],"usedEvents":[]}],"src":"103:28205:20"},"id":20},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[6540]},"id":6541,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4777,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"192:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":4778,"nodeType":"StructuredDocumentation","src":"218:550:21","text":" @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"fullyImplemented":true,"id":6540,"linearizedBaseContracts":[6540],"name":"SafeCast","nameLocation":"777:8:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4779,"nodeType":"StructuredDocumentation","src":"792:68:21","text":" @dev Value doesn't fit in an uint of `bits` size."},"errorSelector":"6dfcc650","id":4785,"name":"SafeCastOverflowedUintDowncast","nameLocation":"871:30:21","nodeType":"ErrorDefinition","parameters":{"id":4784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4781,"mutability":"mutable","name":"bits","nameLocation":"908:4:21","nodeType":"VariableDeclaration","scope":4785,"src":"902:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4780,"name":"uint8","nodeType":"ElementaryTypeName","src":"902:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4783,"mutability":"mutable","name":"value","nameLocation":"922:5:21","nodeType":"VariableDeclaration","scope":4785,"src":"914:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4782,"name":"uint256","nodeType":"ElementaryTypeName","src":"914:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"901:27:21"},"src":"865:64:21"},{"documentation":{"id":4786,"nodeType":"StructuredDocumentation","src":"935:75:21","text":" @dev An int value doesn't fit in an uint of `bits` size."},"errorSelector":"a8ce4432","id":4790,"name":"SafeCastOverflowedIntToUint","nameLocation":"1021:27:21","nodeType":"ErrorDefinition","parameters":{"id":4789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4788,"mutability":"mutable","name":"value","nameLocation":"1056:5:21","nodeType":"VariableDeclaration","scope":4790,"src":"1049:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4787,"name":"int256","nodeType":"ElementaryTypeName","src":"1049:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1048:14:21"},"src":"1015:48:21"},{"documentation":{"id":4791,"nodeType":"StructuredDocumentation","src":"1069:67:21","text":" @dev Value doesn't fit in an int of `bits` size."},"errorSelector":"327269a7","id":4797,"name":"SafeCastOverflowedIntDowncast","nameLocation":"1147:29:21","nodeType":"ErrorDefinition","parameters":{"id":4796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4793,"mutability":"mutable","name":"bits","nameLocation":"1183:4:21","nodeType":"VariableDeclaration","scope":4797,"src":"1177:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4792,"name":"uint8","nodeType":"ElementaryTypeName","src":"1177:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4795,"mutability":"mutable","name":"value","nameLocation":"1196:5:21","nodeType":"VariableDeclaration","scope":4797,"src":"1189:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4794,"name":"int256","nodeType":"ElementaryTypeName","src":"1189:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1176:26:21"},"src":"1141:62:21"},{"documentation":{"id":4798,"nodeType":"StructuredDocumentation","src":"1209:75:21","text":" @dev An uint value doesn't fit in an int of `bits` size."},"errorSelector":"24775e06","id":4802,"name":"SafeCastOverflowedUintToInt","nameLocation":"1295:27:21","nodeType":"ErrorDefinition","parameters":{"id":4801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4800,"mutability":"mutable","name":"value","nameLocation":"1331:5:21","nodeType":"VariableDeclaration","scope":4802,"src":"1323:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1322:15:21"},"src":"1289:49:21"},{"body":{"id":4829,"nodeType":"Block","src":"1695:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4810,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4805,"src":"1709:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1722:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":4812,"name":"uint248","nodeType":"ElementaryTypeName","src":"1722:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":4811,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1717:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1717:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1731:3:21","memberName":"max","nodeType":"MemberAccess","src":"1717:17:21","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1709:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4823,"nodeType":"IfStatement","src":"1705:105:21","trueBody":{"id":4822,"nodeType":"Block","src":"1736:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":4818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1788:3:21","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":4819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4805,"src":"1793:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4817,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"1757:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4821,"nodeType":"RevertStatement","src":"1750:49:21"}]}},{"expression":{"arguments":[{"id":4826,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4805,"src":"1834:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1826:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":4824,"name":"uint248","nodeType":"ElementaryTypeName","src":"1826:7:21","typeDescriptions":{}}},"id":4827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1826:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":4809,"id":4828,"nodeType":"Return","src":"1819:21:21"}]},"documentation":{"id":4803,"nodeType":"StructuredDocumentation","src":"1344:280:21","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":4830,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1638:9:21","nodeType":"FunctionDefinition","parameters":{"id":4806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4805,"mutability":"mutable","name":"value","nameLocation":"1656:5:21","nodeType":"VariableDeclaration","scope":4830,"src":"1648:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1647:15:21"},"returnParameters":{"id":4809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4830,"src":"1686:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":4807,"name":"uint248","nodeType":"ElementaryTypeName","src":"1686:7:21","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1685:9:21"},"scope":6540,"src":"1629:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4857,"nodeType":"Block","src":"2204:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4838,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"2218:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2231:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":4840,"name":"uint240","nodeType":"ElementaryTypeName","src":"2231:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":4839,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2226:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2226:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":4843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2240:3:21","memberName":"max","nodeType":"MemberAccess","src":"2226:17:21","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"2218:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4851,"nodeType":"IfStatement","src":"2214:105:21","trueBody":{"id":4850,"nodeType":"Block","src":"2245:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":4846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2297:3:21","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":4847,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"2302:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4845,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"2266:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2266:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4849,"nodeType":"RevertStatement","src":"2259:49:21"}]}},{"expression":{"arguments":[{"id":4854,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"2343:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2335:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":4852,"name":"uint240","nodeType":"ElementaryTypeName","src":"2335:7:21","typeDescriptions":{}}},"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2335:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":4837,"id":4856,"nodeType":"Return","src":"2328:21:21"}]},"documentation":{"id":4831,"nodeType":"StructuredDocumentation","src":"1853:280:21","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":4858,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"2147:9:21","nodeType":"FunctionDefinition","parameters":{"id":4834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4833,"mutability":"mutable","name":"value","nameLocation":"2165:5:21","nodeType":"VariableDeclaration","scope":4858,"src":"2157:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4832,"name":"uint256","nodeType":"ElementaryTypeName","src":"2157:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2156:15:21"},"returnParameters":{"id":4837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4858,"src":"2195:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":4835,"name":"uint240","nodeType":"ElementaryTypeName","src":"2195:7:21","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"2194:9:21"},"scope":6540,"src":"2138:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4885,"nodeType":"Block","src":"2713:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"2727:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4869,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2740:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":4868,"name":"uint232","nodeType":"ElementaryTypeName","src":"2740:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":4867,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2735:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2735:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":4871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2749:3:21","memberName":"max","nodeType":"MemberAccess","src":"2735:17:21","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2727:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4879,"nodeType":"IfStatement","src":"2723:105:21","trueBody":{"id":4878,"nodeType":"Block","src":"2754:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":4874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2806:3:21","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":4875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"2811:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4873,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"2775:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2775:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4877,"nodeType":"RevertStatement","src":"2768:49:21"}]}},{"expression":{"arguments":[{"id":4882,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4861,"src":"2852:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2844:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":4880,"name":"uint232","nodeType":"ElementaryTypeName","src":"2844:7:21","typeDescriptions":{}}},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2844:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":4865,"id":4884,"nodeType":"Return","src":"2837:21:21"}]},"documentation":{"id":4859,"nodeType":"StructuredDocumentation","src":"2362:280:21","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":4886,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2656:9:21","nodeType":"FunctionDefinition","parameters":{"id":4862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4861,"mutability":"mutable","name":"value","nameLocation":"2674:5:21","nodeType":"VariableDeclaration","scope":4886,"src":"2666:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4860,"name":"uint256","nodeType":"ElementaryTypeName","src":"2666:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:15:21"},"returnParameters":{"id":4865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4886,"src":"2704:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":4863,"name":"uint232","nodeType":"ElementaryTypeName","src":"2704:7:21","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2703:9:21"},"scope":6540,"src":"2647:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4913,"nodeType":"Block","src":"3222:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"3236:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3249:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":4896,"name":"uint224","nodeType":"ElementaryTypeName","src":"3249:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":4895,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"3244:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3244:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":4899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3258:3:21","memberName":"max","nodeType":"MemberAccess","src":"3244:17:21","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"3236:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4907,"nodeType":"IfStatement","src":"3232:105:21","trueBody":{"id":4906,"nodeType":"Block","src":"3263:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":4902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3315:3:21","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":4903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"3320:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4901,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"3284:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3284:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4905,"nodeType":"RevertStatement","src":"3277:49:21"}]}},{"expression":{"arguments":[{"id":4910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"3361:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3353:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":4908,"name":"uint224","nodeType":"ElementaryTypeName","src":"3353:7:21","typeDescriptions":{}}},"id":4911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3353:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":4893,"id":4912,"nodeType":"Return","src":"3346:21:21"}]},"documentation":{"id":4887,"nodeType":"StructuredDocumentation","src":"2871:280:21","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":4914,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"3165:9:21","nodeType":"FunctionDefinition","parameters":{"id":4890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4889,"mutability":"mutable","name":"value","nameLocation":"3183:5:21","nodeType":"VariableDeclaration","scope":4914,"src":"3175:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4888,"name":"uint256","nodeType":"ElementaryTypeName","src":"3175:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3174:15:21"},"returnParameters":{"id":4893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4914,"src":"3213:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":4891,"name":"uint224","nodeType":"ElementaryTypeName","src":"3213:7:21","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"3212:9:21"},"scope":6540,"src":"3156:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4941,"nodeType":"Block","src":"3731:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"3745:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3758:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":4924,"name":"uint216","nodeType":"ElementaryTypeName","src":"3758:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":4923,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"3753:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3753:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":4927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3767:3:21","memberName":"max","nodeType":"MemberAccess","src":"3753:17:21","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3745:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4935,"nodeType":"IfStatement","src":"3741:105:21","trueBody":{"id":4934,"nodeType":"Block","src":"3772:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":4930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3824:3:21","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":4931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"3829:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4929,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"3793:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3793:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4933,"nodeType":"RevertStatement","src":"3786:49:21"}]}},{"expression":{"arguments":[{"id":4938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4917,"src":"3870:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3862:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":4936,"name":"uint216","nodeType":"ElementaryTypeName","src":"3862:7:21","typeDescriptions":{}}},"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3862:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":4921,"id":4940,"nodeType":"Return","src":"3855:21:21"}]},"documentation":{"id":4915,"nodeType":"StructuredDocumentation","src":"3380:280:21","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":4942,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3674:9:21","nodeType":"FunctionDefinition","parameters":{"id":4918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4917,"mutability":"mutable","name":"value","nameLocation":"3692:5:21","nodeType":"VariableDeclaration","scope":4942,"src":"3684:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4916,"name":"uint256","nodeType":"ElementaryTypeName","src":"3684:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3683:15:21"},"returnParameters":{"id":4921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4942,"src":"3722:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":4919,"name":"uint216","nodeType":"ElementaryTypeName","src":"3722:7:21","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3721:9:21"},"scope":6540,"src":"3665:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4969,"nodeType":"Block","src":"4240:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4950,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"4254:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4267:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":4952,"name":"uint208","nodeType":"ElementaryTypeName","src":"4267:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":4951,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"4262:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4262:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":4955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4276:3:21","memberName":"max","nodeType":"MemberAccess","src":"4262:17:21","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"4254:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4963,"nodeType":"IfStatement","src":"4250:105:21","trueBody":{"id":4962,"nodeType":"Block","src":"4281:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":4958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4333:3:21","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":4959,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"4338:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4957,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"4302:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4961,"nodeType":"RevertStatement","src":"4295:49:21"}]}},{"expression":{"arguments":[{"id":4966,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"4379:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4371:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":4964,"name":"uint208","nodeType":"ElementaryTypeName","src":"4371:7:21","typeDescriptions":{}}},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4371:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":4949,"id":4968,"nodeType":"Return","src":"4364:21:21"}]},"documentation":{"id":4943,"nodeType":"StructuredDocumentation","src":"3889:280:21","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":4970,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"4183:9:21","nodeType":"FunctionDefinition","parameters":{"id":4946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4945,"mutability":"mutable","name":"value","nameLocation":"4201:5:21","nodeType":"VariableDeclaration","scope":4970,"src":"4193:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4944,"name":"uint256","nodeType":"ElementaryTypeName","src":"4193:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4192:15:21"},"returnParameters":{"id":4949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4948,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4970,"src":"4231:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":4947,"name":"uint208","nodeType":"ElementaryTypeName","src":"4231:7:21","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"4230:9:21"},"scope":6540,"src":"4174:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4997,"nodeType":"Block","src":"4749:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4978,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4973,"src":"4763:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":4981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4776:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":4980,"name":"uint200","nodeType":"ElementaryTypeName","src":"4776:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":4979,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"4771:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":4983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4785:3:21","memberName":"max","nodeType":"MemberAccess","src":"4771:17:21","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4763:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4991,"nodeType":"IfStatement","src":"4759:105:21","trueBody":{"id":4990,"nodeType":"Block","src":"4790:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":4986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4842:3:21","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":4987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4973,"src":"4847:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4985,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"4811:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":4988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4989,"nodeType":"RevertStatement","src":"4804:49:21"}]}},{"expression":{"arguments":[{"id":4994,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4973,"src":"4888:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4880:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":4992,"name":"uint200","nodeType":"ElementaryTypeName","src":"4880:7:21","typeDescriptions":{}}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4880:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":4977,"id":4996,"nodeType":"Return","src":"4873:21:21"}]},"documentation":{"id":4971,"nodeType":"StructuredDocumentation","src":"4398:280:21","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":4998,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4692:9:21","nodeType":"FunctionDefinition","parameters":{"id":4974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4973,"mutability":"mutable","name":"value","nameLocation":"4710:5:21","nodeType":"VariableDeclaration","scope":4998,"src":"4702:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4972,"name":"uint256","nodeType":"ElementaryTypeName","src":"4702:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4701:15:21"},"returnParameters":{"id":4977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4998,"src":"4740:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":4975,"name":"uint200","nodeType":"ElementaryTypeName","src":"4740:7:21","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4739:9:21"},"scope":6540,"src":"4683:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5025,"nodeType":"Block","src":"5258:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5006,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"5272:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5285:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":5008,"name":"uint192","nodeType":"ElementaryTypeName","src":"5285:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":5007,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"5280:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5280:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":5011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5294:3:21","memberName":"max","nodeType":"MemberAccess","src":"5280:17:21","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5272:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5019,"nodeType":"IfStatement","src":"5268:105:21","trueBody":{"id":5018,"nodeType":"Block","src":"5299:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":5014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5351:3:21","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":5015,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"5356:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5013,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"5320:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5320:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5017,"nodeType":"RevertStatement","src":"5313:49:21"}]}},{"expression":{"arguments":[{"id":5022,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"5397:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5389:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":5020,"name":"uint192","nodeType":"ElementaryTypeName","src":"5389:7:21","typeDescriptions":{}}},"id":5023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":5005,"id":5024,"nodeType":"Return","src":"5382:21:21"}]},"documentation":{"id":4999,"nodeType":"StructuredDocumentation","src":"4907:280:21","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":5026,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"5201:9:21","nodeType":"FunctionDefinition","parameters":{"id":5002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5001,"mutability":"mutable","name":"value","nameLocation":"5219:5:21","nodeType":"VariableDeclaration","scope":5026,"src":"5211:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5000,"name":"uint256","nodeType":"ElementaryTypeName","src":"5211:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5210:15:21"},"returnParameters":{"id":5005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5004,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5026,"src":"5249:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":5003,"name":"uint192","nodeType":"ElementaryTypeName","src":"5249:7:21","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"5248:9:21"},"scope":6540,"src":"5192:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5053,"nodeType":"Block","src":"5767:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5029,"src":"5781:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5794:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":5036,"name":"uint184","nodeType":"ElementaryTypeName","src":"5794:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":5035,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"5789:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5789:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":5039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5803:3:21","memberName":"max","nodeType":"MemberAccess","src":"5789:17:21","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5781:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5047,"nodeType":"IfStatement","src":"5777:105:21","trueBody":{"id":5046,"nodeType":"Block","src":"5808:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":5042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5860:3:21","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":5043,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5029,"src":"5865:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5041,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"5829:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5829:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5045,"nodeType":"RevertStatement","src":"5822:49:21"}]}},{"expression":{"arguments":[{"id":5050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5029,"src":"5906:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5898:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":5048,"name":"uint184","nodeType":"ElementaryTypeName","src":"5898:7:21","typeDescriptions":{}}},"id":5051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5898:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":5033,"id":5052,"nodeType":"Return","src":"5891:21:21"}]},"documentation":{"id":5027,"nodeType":"StructuredDocumentation","src":"5416:280:21","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":5054,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5710:9:21","nodeType":"FunctionDefinition","parameters":{"id":5030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5029,"mutability":"mutable","name":"value","nameLocation":"5728:5:21","nodeType":"VariableDeclaration","scope":5054,"src":"5720:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5028,"name":"uint256","nodeType":"ElementaryTypeName","src":"5720:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5719:15:21"},"returnParameters":{"id":5033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5054,"src":"5758:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":5031,"name":"uint184","nodeType":"ElementaryTypeName","src":"5758:7:21","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5757:9:21"},"scope":6540,"src":"5701:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5081,"nodeType":"Block","src":"6276:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"6290:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6303:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":5064,"name":"uint176","nodeType":"ElementaryTypeName","src":"6303:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":5063,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"6298:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":5067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6312:3:21","memberName":"max","nodeType":"MemberAccess","src":"6298:17:21","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6290:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5075,"nodeType":"IfStatement","src":"6286:105:21","trueBody":{"id":5074,"nodeType":"Block","src":"6317:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":5070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6369:3:21","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":5071,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"6374:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5069,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"6338:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6338:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5073,"nodeType":"RevertStatement","src":"6331:49:21"}]}},{"expression":{"arguments":[{"id":5078,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"6415:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6407:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":5076,"name":"uint176","nodeType":"ElementaryTypeName","src":"6407:7:21","typeDescriptions":{}}},"id":5079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6407:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":5061,"id":5080,"nodeType":"Return","src":"6400:21:21"}]},"documentation":{"id":5055,"nodeType":"StructuredDocumentation","src":"5925:280:21","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":5082,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"6219:9:21","nodeType":"FunctionDefinition","parameters":{"id":5058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5057,"mutability":"mutable","name":"value","nameLocation":"6237:5:21","nodeType":"VariableDeclaration","scope":5082,"src":"6229:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5056,"name":"uint256","nodeType":"ElementaryTypeName","src":"6229:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6228:15:21"},"returnParameters":{"id":5061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5082,"src":"6267:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":5059,"name":"uint176","nodeType":"ElementaryTypeName","src":"6267:7:21","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6266:9:21"},"scope":6540,"src":"6210:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5109,"nodeType":"Block","src":"6785:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5085,"src":"6799:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6812:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":5092,"name":"uint168","nodeType":"ElementaryTypeName","src":"6812:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":5091,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"6807:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6807:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":5095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6821:3:21","memberName":"max","nodeType":"MemberAccess","src":"6807:17:21","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6799:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5103,"nodeType":"IfStatement","src":"6795:105:21","trueBody":{"id":5102,"nodeType":"Block","src":"6826:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":5098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6878:3:21","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":5099,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5085,"src":"6883:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5097,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"6847:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6847:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5101,"nodeType":"RevertStatement","src":"6840:49:21"}]}},{"expression":{"arguments":[{"id":5106,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5085,"src":"6924:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6916:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":5104,"name":"uint168","nodeType":"ElementaryTypeName","src":"6916:7:21","typeDescriptions":{}}},"id":5107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6916:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":5089,"id":5108,"nodeType":"Return","src":"6909:21:21"}]},"documentation":{"id":5083,"nodeType":"StructuredDocumentation","src":"6434:280:21","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":5110,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6728:9:21","nodeType":"FunctionDefinition","parameters":{"id":5086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5085,"mutability":"mutable","name":"value","nameLocation":"6746:5:21","nodeType":"VariableDeclaration","scope":5110,"src":"6738:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5084,"name":"uint256","nodeType":"ElementaryTypeName","src":"6738:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6737:15:21"},"returnParameters":{"id":5089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5110,"src":"6776:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":5087,"name":"uint168","nodeType":"ElementaryTypeName","src":"6776:7:21","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6775:9:21"},"scope":6540,"src":"6719:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5137,"nodeType":"Block","src":"7294:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"7308:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7321:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5120,"name":"uint160","nodeType":"ElementaryTypeName","src":"7321:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":5119,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"7316:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7316:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":5123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7330:3:21","memberName":"max","nodeType":"MemberAccess","src":"7316:17:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7308:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5131,"nodeType":"IfStatement","src":"7304:105:21","trueBody":{"id":5130,"nodeType":"Block","src":"7335:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":5126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7387:3:21","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":5127,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"7392:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5125,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"7356:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7356:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5129,"nodeType":"RevertStatement","src":"7349:49:21"}]}},{"expression":{"arguments":[{"id":5134,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"7433:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5133,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7425:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":5132,"name":"uint160","nodeType":"ElementaryTypeName","src":"7425:7:21","typeDescriptions":{}}},"id":5135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7425:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":5117,"id":5136,"nodeType":"Return","src":"7418:21:21"}]},"documentation":{"id":5111,"nodeType":"StructuredDocumentation","src":"6943:280:21","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":5138,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7237:9:21","nodeType":"FunctionDefinition","parameters":{"id":5114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5113,"mutability":"mutable","name":"value","nameLocation":"7255:5:21","nodeType":"VariableDeclaration","scope":5138,"src":"7247:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5112,"name":"uint256","nodeType":"ElementaryTypeName","src":"7247:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7246:15:21"},"returnParameters":{"id":5117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5138,"src":"7285:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":5115,"name":"uint160","nodeType":"ElementaryTypeName","src":"7285:7:21","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7284:9:21"},"scope":6540,"src":"7228:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5165,"nodeType":"Block","src":"7803:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"7817:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7830:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":5148,"name":"uint152","nodeType":"ElementaryTypeName","src":"7830:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":5147,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"7825:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7825:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":5151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7839:3:21","memberName":"max","nodeType":"MemberAccess","src":"7825:17:21","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7817:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5159,"nodeType":"IfStatement","src":"7813:105:21","trueBody":{"id":5158,"nodeType":"Block","src":"7844:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":5154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7896:3:21","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":5155,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"7901:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5153,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"7865:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7865:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5157,"nodeType":"RevertStatement","src":"7858:49:21"}]}},{"expression":{"arguments":[{"id":5162,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"7942:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7934:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":5160,"name":"uint152","nodeType":"ElementaryTypeName","src":"7934:7:21","typeDescriptions":{}}},"id":5163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7934:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":5145,"id":5164,"nodeType":"Return","src":"7927:21:21"}]},"documentation":{"id":5139,"nodeType":"StructuredDocumentation","src":"7452:280:21","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":5166,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7746:9:21","nodeType":"FunctionDefinition","parameters":{"id":5142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5141,"mutability":"mutable","name":"value","nameLocation":"7764:5:21","nodeType":"VariableDeclaration","scope":5166,"src":"7756:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5140,"name":"uint256","nodeType":"ElementaryTypeName","src":"7756:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7755:15:21"},"returnParameters":{"id":5145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5166,"src":"7794:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":5143,"name":"uint152","nodeType":"ElementaryTypeName","src":"7794:7:21","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7793:9:21"},"scope":6540,"src":"7737:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5193,"nodeType":"Block","src":"8312:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5174,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"8326:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8339:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":5176,"name":"uint144","nodeType":"ElementaryTypeName","src":"8339:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":5175,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8334:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8334:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":5179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8348:3:21","memberName":"max","nodeType":"MemberAccess","src":"8334:17:21","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8326:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5187,"nodeType":"IfStatement","src":"8322:105:21","trueBody":{"id":5186,"nodeType":"Block","src":"8353:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":5182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8405:3:21","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":5183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"8410:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5181,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"8374:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8374:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5185,"nodeType":"RevertStatement","src":"8367:49:21"}]}},{"expression":{"arguments":[{"id":5190,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5169,"src":"8451:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8443:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":5188,"name":"uint144","nodeType":"ElementaryTypeName","src":"8443:7:21","typeDescriptions":{}}},"id":5191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8443:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":5173,"id":5192,"nodeType":"Return","src":"8436:21:21"}]},"documentation":{"id":5167,"nodeType":"StructuredDocumentation","src":"7961:280:21","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":5194,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8255:9:21","nodeType":"FunctionDefinition","parameters":{"id":5170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5169,"mutability":"mutable","name":"value","nameLocation":"8273:5:21","nodeType":"VariableDeclaration","scope":5194,"src":"8265:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5168,"name":"uint256","nodeType":"ElementaryTypeName","src":"8265:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8264:15:21"},"returnParameters":{"id":5173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5194,"src":"8303:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":5171,"name":"uint144","nodeType":"ElementaryTypeName","src":"8303:7:21","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8302:9:21"},"scope":6540,"src":"8246:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5221,"nodeType":"Block","src":"8821:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"8835:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8848:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":5204,"name":"uint136","nodeType":"ElementaryTypeName","src":"8848:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":5203,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8843:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8843:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":5207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8857:3:21","memberName":"max","nodeType":"MemberAccess","src":"8843:17:21","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8835:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5215,"nodeType":"IfStatement","src":"8831:105:21","trueBody":{"id":5214,"nodeType":"Block","src":"8862:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":5210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8914:3:21","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":5211,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"8919:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5209,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"8883:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8883:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5213,"nodeType":"RevertStatement","src":"8876:49:21"}]}},{"expression":{"arguments":[{"id":5218,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5197,"src":"8960:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8952:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":5216,"name":"uint136","nodeType":"ElementaryTypeName","src":"8952:7:21","typeDescriptions":{}}},"id":5219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8952:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":5201,"id":5220,"nodeType":"Return","src":"8945:21:21"}]},"documentation":{"id":5195,"nodeType":"StructuredDocumentation","src":"8470:280:21","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":5222,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8764:9:21","nodeType":"FunctionDefinition","parameters":{"id":5198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5197,"mutability":"mutable","name":"value","nameLocation":"8782:5:21","nodeType":"VariableDeclaration","scope":5222,"src":"8774:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5196,"name":"uint256","nodeType":"ElementaryTypeName","src":"8774:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8773:15:21"},"returnParameters":{"id":5201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5222,"src":"8812:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":5199,"name":"uint136","nodeType":"ElementaryTypeName","src":"8812:7:21","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8811:9:21"},"scope":6540,"src":"8755:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5249,"nodeType":"Block","src":"9330:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"9344:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9357:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":5232,"name":"uint128","nodeType":"ElementaryTypeName","src":"9357:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":5231,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"9352:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9352:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":5235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9366:3:21","memberName":"max","nodeType":"MemberAccess","src":"9352:17:21","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9344:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5243,"nodeType":"IfStatement","src":"9340:105:21","trueBody":{"id":5242,"nodeType":"Block","src":"9371:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":5238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9423:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":5239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"9428:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5237,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"9392:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9392:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5241,"nodeType":"RevertStatement","src":"9385:49:21"}]}},{"expression":{"arguments":[{"id":5246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"9469:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9461:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":5244,"name":"uint128","nodeType":"ElementaryTypeName","src":"9461:7:21","typeDescriptions":{}}},"id":5247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9461:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":5229,"id":5248,"nodeType":"Return","src":"9454:21:21"}]},"documentation":{"id":5223,"nodeType":"StructuredDocumentation","src":"8979:280:21","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":5250,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9273:9:21","nodeType":"FunctionDefinition","parameters":{"id":5226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5225,"mutability":"mutable","name":"value","nameLocation":"9291:5:21","nodeType":"VariableDeclaration","scope":5250,"src":"9283:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5224,"name":"uint256","nodeType":"ElementaryTypeName","src":"9283:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9282:15:21"},"returnParameters":{"id":5229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5250,"src":"9321:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":5227,"name":"uint128","nodeType":"ElementaryTypeName","src":"9321:7:21","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9320:9:21"},"scope":6540,"src":"9264:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5277,"nodeType":"Block","src":"9839:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5253,"src":"9853:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9866:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":5260,"name":"uint120","nodeType":"ElementaryTypeName","src":"9866:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":5259,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"9861:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9861:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":5263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9875:3:21","memberName":"max","nodeType":"MemberAccess","src":"9861:17:21","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9853:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5271,"nodeType":"IfStatement","src":"9849:105:21","trueBody":{"id":5270,"nodeType":"Block","src":"9880:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":5266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9932:3:21","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":5267,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5253,"src":"9937:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5265,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"9901:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9901:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5269,"nodeType":"RevertStatement","src":"9894:49:21"}]}},{"expression":{"arguments":[{"id":5274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5253,"src":"9978:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9970:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":5272,"name":"uint120","nodeType":"ElementaryTypeName","src":"9970:7:21","typeDescriptions":{}}},"id":5275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9970:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":5257,"id":5276,"nodeType":"Return","src":"9963:21:21"}]},"documentation":{"id":5251,"nodeType":"StructuredDocumentation","src":"9488:280:21","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":5278,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9782:9:21","nodeType":"FunctionDefinition","parameters":{"id":5254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5253,"mutability":"mutable","name":"value","nameLocation":"9800:5:21","nodeType":"VariableDeclaration","scope":5278,"src":"9792:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5252,"name":"uint256","nodeType":"ElementaryTypeName","src":"9792:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9791:15:21"},"returnParameters":{"id":5257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5278,"src":"9830:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":5255,"name":"uint120","nodeType":"ElementaryTypeName","src":"9830:7:21","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9829:9:21"},"scope":6540,"src":"9773:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5305,"nodeType":"Block","src":"10348:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"10362:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10375:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":5288,"name":"uint112","nodeType":"ElementaryTypeName","src":"10375:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":5287,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"10370:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10370:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":5291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10384:3:21","memberName":"max","nodeType":"MemberAccess","src":"10370:17:21","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10362:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5299,"nodeType":"IfStatement","src":"10358:105:21","trueBody":{"id":5298,"nodeType":"Block","src":"10389:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":5294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10441:3:21","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":5295,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"10446:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5293,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"10410:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10410:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5297,"nodeType":"RevertStatement","src":"10403:49:21"}]}},{"expression":{"arguments":[{"id":5302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5281,"src":"10487:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10479:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":5300,"name":"uint112","nodeType":"ElementaryTypeName","src":"10479:7:21","typeDescriptions":{}}},"id":5303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10479:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":5285,"id":5304,"nodeType":"Return","src":"10472:21:21"}]},"documentation":{"id":5279,"nodeType":"StructuredDocumentation","src":"9997:280:21","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":5306,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10291:9:21","nodeType":"FunctionDefinition","parameters":{"id":5282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5281,"mutability":"mutable","name":"value","nameLocation":"10309:5:21","nodeType":"VariableDeclaration","scope":5306,"src":"10301:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5280,"name":"uint256","nodeType":"ElementaryTypeName","src":"10301:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10300:15:21"},"returnParameters":{"id":5285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5306,"src":"10339:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":5283,"name":"uint112","nodeType":"ElementaryTypeName","src":"10339:7:21","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10338:9:21"},"scope":6540,"src":"10282:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5333,"nodeType":"Block","src":"10857:152:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"10871:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10884:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":5316,"name":"uint104","nodeType":"ElementaryTypeName","src":"10884:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":5315,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"10879:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10879:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":5319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10893:3:21","memberName":"max","nodeType":"MemberAccess","src":"10879:17:21","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10871:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5327,"nodeType":"IfStatement","src":"10867:105:21","trueBody":{"id":5326,"nodeType":"Block","src":"10898:74:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":5322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10950:3:21","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":5323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"10955:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5321,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"10919:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10919:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5325,"nodeType":"RevertStatement","src":"10912:49:21"}]}},{"expression":{"arguments":[{"id":5330,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"10996:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10988:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":5328,"name":"uint104","nodeType":"ElementaryTypeName","src":"10988:7:21","typeDescriptions":{}}},"id":5331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10988:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":5313,"id":5332,"nodeType":"Return","src":"10981:21:21"}]},"documentation":{"id":5307,"nodeType":"StructuredDocumentation","src":"10506:280:21","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":5334,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10800:9:21","nodeType":"FunctionDefinition","parameters":{"id":5310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5309,"mutability":"mutable","name":"value","nameLocation":"10818:5:21","nodeType":"VariableDeclaration","scope":5334,"src":"10810:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5308,"name":"uint256","nodeType":"ElementaryTypeName","src":"10810:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10809:15:21"},"returnParameters":{"id":5313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5334,"src":"10848:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":5311,"name":"uint104","nodeType":"ElementaryTypeName","src":"10848:7:21","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10847:9:21"},"scope":6540,"src":"10791:218:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5361,"nodeType":"Block","src":"11360:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5342,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"11374:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11387:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":5344,"name":"uint96","nodeType":"ElementaryTypeName","src":"11387:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":5343,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"11382:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11382:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":5347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11395:3:21","memberName":"max","nodeType":"MemberAccess","src":"11382:16:21","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11374:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5355,"nodeType":"IfStatement","src":"11370:103:21","trueBody":{"id":5354,"nodeType":"Block","src":"11400:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":5350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11452:2:21","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":5351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"11456:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5349,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"11421:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11421:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5353,"nodeType":"RevertStatement","src":"11414:48:21"}]}},{"expression":{"arguments":[{"id":5358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5337,"src":"11496:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11489:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":5356,"name":"uint96","nodeType":"ElementaryTypeName","src":"11489:6:21","typeDescriptions":{}}},"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11489:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":5341,"id":5360,"nodeType":"Return","src":"11482:20:21"}]},"documentation":{"id":5335,"nodeType":"StructuredDocumentation","src":"11015:276:21","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":5362,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11305:8:21","nodeType":"FunctionDefinition","parameters":{"id":5338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5337,"mutability":"mutable","name":"value","nameLocation":"11322:5:21","nodeType":"VariableDeclaration","scope":5362,"src":"11314:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5336,"name":"uint256","nodeType":"ElementaryTypeName","src":"11314:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11313:15:21"},"returnParameters":{"id":5341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5340,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5362,"src":"11352:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":5339,"name":"uint96","nodeType":"ElementaryTypeName","src":"11352:6:21","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11351:8:21"},"scope":6540,"src":"11296:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5389,"nodeType":"Block","src":"11860:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"11874:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11887:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":5372,"name":"uint88","nodeType":"ElementaryTypeName","src":"11887:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":5371,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"11882:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11882:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":5375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11895:3:21","memberName":"max","nodeType":"MemberAccess","src":"11882:16:21","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11874:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5383,"nodeType":"IfStatement","src":"11870:103:21","trueBody":{"id":5382,"nodeType":"Block","src":"11900:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":5378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11952:2:21","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":5379,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"11956:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5377,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"11921:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11921:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5381,"nodeType":"RevertStatement","src":"11914:48:21"}]}},{"expression":{"arguments":[{"id":5386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5365,"src":"11996:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11989:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":5384,"name":"uint88","nodeType":"ElementaryTypeName","src":"11989:6:21","typeDescriptions":{}}},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11989:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":5369,"id":5388,"nodeType":"Return","src":"11982:20:21"}]},"documentation":{"id":5363,"nodeType":"StructuredDocumentation","src":"11515:276:21","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":5390,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11805:8:21","nodeType":"FunctionDefinition","parameters":{"id":5366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5365,"mutability":"mutable","name":"value","nameLocation":"11822:5:21","nodeType":"VariableDeclaration","scope":5390,"src":"11814:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5364,"name":"uint256","nodeType":"ElementaryTypeName","src":"11814:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11813:15:21"},"returnParameters":{"id":5369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5390,"src":"11852:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":5367,"name":"uint88","nodeType":"ElementaryTypeName","src":"11852:6:21","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11851:8:21"},"scope":6540,"src":"11796:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5417,"nodeType":"Block","src":"12360:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5393,"src":"12374:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12387:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":5400,"name":"uint80","nodeType":"ElementaryTypeName","src":"12387:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":5399,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"12382:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12382:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":5403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12395:3:21","memberName":"max","nodeType":"MemberAccess","src":"12382:16:21","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12374:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5411,"nodeType":"IfStatement","src":"12370:103:21","trueBody":{"id":5410,"nodeType":"Block","src":"12400:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":5406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12452:2:21","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":5407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5393,"src":"12456:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5405,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"12421:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12421:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5409,"nodeType":"RevertStatement","src":"12414:48:21"}]}},{"expression":{"arguments":[{"id":5414,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5393,"src":"12496:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12489:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":5412,"name":"uint80","nodeType":"ElementaryTypeName","src":"12489:6:21","typeDescriptions":{}}},"id":5415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12489:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":5397,"id":5416,"nodeType":"Return","src":"12482:20:21"}]},"documentation":{"id":5391,"nodeType":"StructuredDocumentation","src":"12015:276:21","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":5418,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12305:8:21","nodeType":"FunctionDefinition","parameters":{"id":5394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5393,"mutability":"mutable","name":"value","nameLocation":"12322:5:21","nodeType":"VariableDeclaration","scope":5418,"src":"12314:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5392,"name":"uint256","nodeType":"ElementaryTypeName","src":"12314:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12313:15:21"},"returnParameters":{"id":5397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5418,"src":"12352:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":5395,"name":"uint80","nodeType":"ElementaryTypeName","src":"12352:6:21","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12351:8:21"},"scope":6540,"src":"12296:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5445,"nodeType":"Block","src":"12860:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5426,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"12874:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12887:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":5428,"name":"uint72","nodeType":"ElementaryTypeName","src":"12887:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":5427,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"12882:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12882:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":5431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12895:3:21","memberName":"max","nodeType":"MemberAccess","src":"12882:16:21","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12874:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5439,"nodeType":"IfStatement","src":"12870:103:21","trueBody":{"id":5438,"nodeType":"Block","src":"12900:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":5434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12952:2:21","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":5435,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"12956:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5433,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"12921:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12921:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5437,"nodeType":"RevertStatement","src":"12914:48:21"}]}},{"expression":{"arguments":[{"id":5442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"12996:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12989:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":5440,"name":"uint72","nodeType":"ElementaryTypeName","src":"12989:6:21","typeDescriptions":{}}},"id":5443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12989:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":5425,"id":5444,"nodeType":"Return","src":"12982:20:21"}]},"documentation":{"id":5419,"nodeType":"StructuredDocumentation","src":"12515:276:21","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":5446,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12805:8:21","nodeType":"FunctionDefinition","parameters":{"id":5422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5421,"mutability":"mutable","name":"value","nameLocation":"12822:5:21","nodeType":"VariableDeclaration","scope":5446,"src":"12814:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5420,"name":"uint256","nodeType":"ElementaryTypeName","src":"12814:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12813:15:21"},"returnParameters":{"id":5425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5446,"src":"12852:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":5423,"name":"uint72","nodeType":"ElementaryTypeName","src":"12852:6:21","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12851:8:21"},"scope":6540,"src":"12796:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5473,"nodeType":"Block","src":"13360:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5449,"src":"13374:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13387:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":5456,"name":"uint64","nodeType":"ElementaryTypeName","src":"13387:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":5455,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"13382:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13382:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":5459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13395:3:21","memberName":"max","nodeType":"MemberAccess","src":"13382:16:21","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13374:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5467,"nodeType":"IfStatement","src":"13370:103:21","trueBody":{"id":5466,"nodeType":"Block","src":"13400:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":5462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13452:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":5463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5449,"src":"13456:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5461,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"13421:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13421:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5465,"nodeType":"RevertStatement","src":"13414:48:21"}]}},{"expression":{"arguments":[{"id":5470,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5449,"src":"13496:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13489:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":5468,"name":"uint64","nodeType":"ElementaryTypeName","src":"13489:6:21","typeDescriptions":{}}},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13489:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":5453,"id":5472,"nodeType":"Return","src":"13482:20:21"}]},"documentation":{"id":5447,"nodeType":"StructuredDocumentation","src":"13015:276:21","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":5474,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13305:8:21","nodeType":"FunctionDefinition","parameters":{"id":5450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5449,"mutability":"mutable","name":"value","nameLocation":"13322:5:21","nodeType":"VariableDeclaration","scope":5474,"src":"13314:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5448,"name":"uint256","nodeType":"ElementaryTypeName","src":"13314:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13313:15:21"},"returnParameters":{"id":5453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5474,"src":"13352:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5451,"name":"uint64","nodeType":"ElementaryTypeName","src":"13352:6:21","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13351:8:21"},"scope":6540,"src":"13296:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5501,"nodeType":"Block","src":"13860:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"13874:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13887:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":5484,"name":"uint56","nodeType":"ElementaryTypeName","src":"13887:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":5483,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"13882:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13882:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":5487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13895:3:21","memberName":"max","nodeType":"MemberAccess","src":"13882:16:21","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13874:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5495,"nodeType":"IfStatement","src":"13870:103:21","trueBody":{"id":5494,"nodeType":"Block","src":"13900:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":5490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13952:2:21","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":5491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"13956:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5489,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"13921:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5493,"nodeType":"RevertStatement","src":"13914:48:21"}]}},{"expression":{"arguments":[{"id":5498,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5477,"src":"13996:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13989:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":5496,"name":"uint56","nodeType":"ElementaryTypeName","src":"13989:6:21","typeDescriptions":{}}},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13989:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":5481,"id":5500,"nodeType":"Return","src":"13982:20:21"}]},"documentation":{"id":5475,"nodeType":"StructuredDocumentation","src":"13515:276:21","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":5502,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13805:8:21","nodeType":"FunctionDefinition","parameters":{"id":5478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5477,"mutability":"mutable","name":"value","nameLocation":"13822:5:21","nodeType":"VariableDeclaration","scope":5502,"src":"13814:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5476,"name":"uint256","nodeType":"ElementaryTypeName","src":"13814:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13813:15:21"},"returnParameters":{"id":5481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5502,"src":"13852:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":5479,"name":"uint56","nodeType":"ElementaryTypeName","src":"13852:6:21","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13851:8:21"},"scope":6540,"src":"13796:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5529,"nodeType":"Block","src":"14360:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"14374:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14387:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":5512,"name":"uint48","nodeType":"ElementaryTypeName","src":"14387:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":5511,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"14382:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14382:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":5515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14395:3:21","memberName":"max","nodeType":"MemberAccess","src":"14382:16:21","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14374:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5523,"nodeType":"IfStatement","src":"14370:103:21","trueBody":{"id":5522,"nodeType":"Block","src":"14400:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":5518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14452:2:21","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":5519,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"14456:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5517,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"14421:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14421:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5521,"nodeType":"RevertStatement","src":"14414:48:21"}]}},{"expression":{"arguments":[{"id":5526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5505,"src":"14496:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14489:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":5524,"name":"uint48","nodeType":"ElementaryTypeName","src":"14489:6:21","typeDescriptions":{}}},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14489:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":5509,"id":5528,"nodeType":"Return","src":"14482:20:21"}]},"documentation":{"id":5503,"nodeType":"StructuredDocumentation","src":"14015:276:21","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":5530,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14305:8:21","nodeType":"FunctionDefinition","parameters":{"id":5506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5505,"mutability":"mutable","name":"value","nameLocation":"14322:5:21","nodeType":"VariableDeclaration","scope":5530,"src":"14314:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5504,"name":"uint256","nodeType":"ElementaryTypeName","src":"14314:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14313:15:21"},"returnParameters":{"id":5509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5530,"src":"14352:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":5507,"name":"uint48","nodeType":"ElementaryTypeName","src":"14352:6:21","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14351:8:21"},"scope":6540,"src":"14296:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5557,"nodeType":"Block","src":"14860:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5533,"src":"14874:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14887:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":5540,"name":"uint40","nodeType":"ElementaryTypeName","src":"14887:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":5539,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"14882:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14882:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":5543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14895:3:21","memberName":"max","nodeType":"MemberAccess","src":"14882:16:21","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14874:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5551,"nodeType":"IfStatement","src":"14870:103:21","trueBody":{"id":5550,"nodeType":"Block","src":"14900:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":5546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14952:2:21","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":5547,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5533,"src":"14956:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5545,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"14921:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14921:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5549,"nodeType":"RevertStatement","src":"14914:48:21"}]}},{"expression":{"arguments":[{"id":5554,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5533,"src":"14996:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14989:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":5552,"name":"uint40","nodeType":"ElementaryTypeName","src":"14989:6:21","typeDescriptions":{}}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14989:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":5537,"id":5556,"nodeType":"Return","src":"14982:20:21"}]},"documentation":{"id":5531,"nodeType":"StructuredDocumentation","src":"14515:276:21","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":5558,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14805:8:21","nodeType":"FunctionDefinition","parameters":{"id":5534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5533,"mutability":"mutable","name":"value","nameLocation":"14822:5:21","nodeType":"VariableDeclaration","scope":5558,"src":"14814:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5532,"name":"uint256","nodeType":"ElementaryTypeName","src":"14814:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14813:15:21"},"returnParameters":{"id":5537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5536,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5558,"src":"14852:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":5535,"name":"uint40","nodeType":"ElementaryTypeName","src":"14852:6:21","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14851:8:21"},"scope":6540,"src":"14796:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5585,"nodeType":"Block","src":"15360:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5566,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5561,"src":"15374:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15387:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":5568,"name":"uint32","nodeType":"ElementaryTypeName","src":"15387:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":5567,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"15382:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15382:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":5571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15395:3:21","memberName":"max","nodeType":"MemberAccess","src":"15382:16:21","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15374:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5579,"nodeType":"IfStatement","src":"15370:103:21","trueBody":{"id":5578,"nodeType":"Block","src":"15400:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":5574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15452:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":5575,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5561,"src":"15456:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5573,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"15421:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15421:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5577,"nodeType":"RevertStatement","src":"15414:48:21"}]}},{"expression":{"arguments":[{"id":5582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5561,"src":"15496:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15489:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":5580,"name":"uint32","nodeType":"ElementaryTypeName","src":"15489:6:21","typeDescriptions":{}}},"id":5583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15489:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":5565,"id":5584,"nodeType":"Return","src":"15482:20:21"}]},"documentation":{"id":5559,"nodeType":"StructuredDocumentation","src":"15015:276:21","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":5586,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15305:8:21","nodeType":"FunctionDefinition","parameters":{"id":5562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5561,"mutability":"mutable","name":"value","nameLocation":"15322:5:21","nodeType":"VariableDeclaration","scope":5586,"src":"15314:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5560,"name":"uint256","nodeType":"ElementaryTypeName","src":"15314:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15313:15:21"},"returnParameters":{"id":5565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5586,"src":"15352:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5563,"name":"uint32","nodeType":"ElementaryTypeName","src":"15352:6:21","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15351:8:21"},"scope":6540,"src":"15296:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5613,"nodeType":"Block","src":"15860:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5589,"src":"15874:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15887:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":5596,"name":"uint24","nodeType":"ElementaryTypeName","src":"15887:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":5595,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"15882:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15882:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":5599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15895:3:21","memberName":"max","nodeType":"MemberAccess","src":"15882:16:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15874:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5607,"nodeType":"IfStatement","src":"15870:103:21","trueBody":{"id":5606,"nodeType":"Block","src":"15900:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":5602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15952:2:21","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":5603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5589,"src":"15956:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5601,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"15921:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15921:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5605,"nodeType":"RevertStatement","src":"15914:48:21"}]}},{"expression":{"arguments":[{"id":5610,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5589,"src":"15996:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15989:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":5608,"name":"uint24","nodeType":"ElementaryTypeName","src":"15989:6:21","typeDescriptions":{}}},"id":5611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15989:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":5593,"id":5612,"nodeType":"Return","src":"15982:20:21"}]},"documentation":{"id":5587,"nodeType":"StructuredDocumentation","src":"15515:276:21","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":5614,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15805:8:21","nodeType":"FunctionDefinition","parameters":{"id":5590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5589,"mutability":"mutable","name":"value","nameLocation":"15822:5:21","nodeType":"VariableDeclaration","scope":5614,"src":"15814:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5588,"name":"uint256","nodeType":"ElementaryTypeName","src":"15814:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15813:15:21"},"returnParameters":{"id":5593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5592,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5614,"src":"15852:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":5591,"name":"uint24","nodeType":"ElementaryTypeName","src":"15852:6:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15851:8:21"},"scope":6540,"src":"15796:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5641,"nodeType":"Block","src":"16360:149:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5617,"src":"16374:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16387:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":5624,"name":"uint16","nodeType":"ElementaryTypeName","src":"16387:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":5623,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"16382:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16382:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":5627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16395:3:21","memberName":"max","nodeType":"MemberAccess","src":"16382:16:21","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16374:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5635,"nodeType":"IfStatement","src":"16370:103:21","trueBody":{"id":5634,"nodeType":"Block","src":"16400:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":5630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16452:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":5631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5617,"src":"16456:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5629,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"16421:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16421:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5633,"nodeType":"RevertStatement","src":"16414:48:21"}]}},{"expression":{"arguments":[{"id":5638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5617,"src":"16496:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16489:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":5636,"name":"uint16","nodeType":"ElementaryTypeName","src":"16489:6:21","typeDescriptions":{}}},"id":5639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16489:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":5621,"id":5640,"nodeType":"Return","src":"16482:20:21"}]},"documentation":{"id":5615,"nodeType":"StructuredDocumentation","src":"16015:276:21","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":5642,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16305:8:21","nodeType":"FunctionDefinition","parameters":{"id":5618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5617,"mutability":"mutable","name":"value","nameLocation":"16322:5:21","nodeType":"VariableDeclaration","scope":5642,"src":"16314:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5616,"name":"uint256","nodeType":"ElementaryTypeName","src":"16314:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16313:15:21"},"returnParameters":{"id":5621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5642,"src":"16352:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5619,"name":"uint16","nodeType":"ElementaryTypeName","src":"16352:6:21","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16351:8:21"},"scope":6540,"src":"16296:213:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5669,"nodeType":"Block","src":"16854:146:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"16868:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":5653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16881:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5652,"name":"uint8","nodeType":"ElementaryTypeName","src":"16881:5:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":5651,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"16876:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16876:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":5655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16888:3:21","memberName":"max","nodeType":"MemberAccess","src":"16876:15:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16868:23:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5663,"nodeType":"IfStatement","src":"16864:101:21","trueBody":{"id":5662,"nodeType":"Block","src":"16893:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":5658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16945:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":5659,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"16948:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5657,"name":"SafeCastOverflowedUintDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"16914:30:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (uint8,uint256) pure"}},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16914:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5661,"nodeType":"RevertStatement","src":"16907:47:21"}]}},{"expression":{"arguments":[{"id":5666,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"16987:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16981:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5664,"name":"uint8","nodeType":"ElementaryTypeName","src":"16981:5:21","typeDescriptions":{}}},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16981:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":5649,"id":5668,"nodeType":"Return","src":"16974:19:21"}]},"documentation":{"id":5643,"nodeType":"StructuredDocumentation","src":"16515:272:21","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":5670,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16801:7:21","nodeType":"FunctionDefinition","parameters":{"id":5646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5645,"mutability":"mutable","name":"value","nameLocation":"16817:5:21","nodeType":"VariableDeclaration","scope":5670,"src":"16809:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5644,"name":"uint256","nodeType":"ElementaryTypeName","src":"16809:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16808:15:21"},"returnParameters":{"id":5649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5670,"src":"16847:5:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5647,"name":"uint8","nodeType":"ElementaryTypeName","src":"16847:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16846:7:21"},"scope":6540,"src":"16792:208:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5692,"nodeType":"Block","src":"17236:128:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5673,"src":"17250:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":5679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17258:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17250:9:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5686,"nodeType":"IfStatement","src":"17246:81:21","trueBody":{"id":5685,"nodeType":"Block","src":"17261:66:21","statements":[{"errorCall":{"arguments":[{"id":5682,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5673,"src":"17310:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5681,"name":"SafeCastOverflowedIntToUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4790,"src":"17282:27:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_int256_$returns$__$","typeString":"function (int256) pure"}},"id":5683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17282:34:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5684,"nodeType":"RevertStatement","src":"17275:41:21"}]}},{"expression":{"arguments":[{"id":5689,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5673,"src":"17351:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17343:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5687,"name":"uint256","nodeType":"ElementaryTypeName","src":"17343:7:21","typeDescriptions":{}}},"id":5690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17343:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5677,"id":5691,"nodeType":"Return","src":"17336:21:21"}]},"documentation":{"id":5671,"nodeType":"StructuredDocumentation","src":"17006:160:21","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0."},"id":5693,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17180:9:21","nodeType":"FunctionDefinition","parameters":{"id":5674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5673,"mutability":"mutable","name":"value","nameLocation":"17197:5:21","nodeType":"VariableDeclaration","scope":5693,"src":"17190:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5672,"name":"int256","nodeType":"ElementaryTypeName","src":"17190:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17189:14:21"},"returnParameters":{"id":5677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5693,"src":"17227:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5675,"name":"uint256","nodeType":"ElementaryTypeName","src":"17227:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17226:9:21"},"scope":6540,"src":"17171:193:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5718,"nodeType":"Block","src":"17761:150:21","statements":[{"expression":{"id":5706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5701,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"17771:10:21","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5704,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"17791:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17784:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":5702,"name":"int248","nodeType":"ElementaryTypeName","src":"17784:6:21","typeDescriptions":{}}},"id":5705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17784:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17771:26:21","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":5707,"nodeType":"ExpressionStatement","src":"17771:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5708,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"17811:10:21","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"17825:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17811:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5717,"nodeType":"IfStatement","src":"17807:98:21","trueBody":{"id":5716,"nodeType":"Block","src":"17832:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323438","id":5712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17883:3:21","typeDescriptions":{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},"value":"248"},{"id":5713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5696,"src":"17888:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_248_by_1","typeString":"int_const 248"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5711,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"17853:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17853:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5715,"nodeType":"RevertStatement","src":"17846:48:21"}]}}]},"documentation":{"id":5694,"nodeType":"StructuredDocumentation","src":"17370:312:21","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits"},"id":5719,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17696:8:21","nodeType":"FunctionDefinition","parameters":{"id":5697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5696,"mutability":"mutable","name":"value","nameLocation":"17712:5:21","nodeType":"VariableDeclaration","scope":5719,"src":"17705:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5695,"name":"int256","nodeType":"ElementaryTypeName","src":"17705:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17704:14:21"},"returnParameters":{"id":5700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5699,"mutability":"mutable","name":"downcasted","nameLocation":"17749:10:21","nodeType":"VariableDeclaration","scope":5719,"src":"17742:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":5698,"name":"int248","nodeType":"ElementaryTypeName","src":"17742:6:21","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17741:19:21"},"scope":6540,"src":"17687:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5744,"nodeType":"Block","src":"18308:150:21","statements":[{"expression":{"id":5732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5727,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5725,"src":"18318:10:21","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5722,"src":"18338:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18331:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":5728,"name":"int240","nodeType":"ElementaryTypeName","src":"18331:6:21","typeDescriptions":{}}},"id":5731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18331:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18318:26:21","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":5733,"nodeType":"ExpressionStatement","src":"18318:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5734,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5725,"src":"18358:10:21","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5722,"src":"18372:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18358:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5743,"nodeType":"IfStatement","src":"18354:98:21","trueBody":{"id":5742,"nodeType":"Block","src":"18379:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323430","id":5738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18430:3:21","typeDescriptions":{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},"value":"240"},{"id":5739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5722,"src":"18435:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_240_by_1","typeString":"int_const 240"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5737,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"18400:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18400:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5741,"nodeType":"RevertStatement","src":"18393:48:21"}]}}]},"documentation":{"id":5720,"nodeType":"StructuredDocumentation","src":"17917:312:21","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits"},"id":5745,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18243:8:21","nodeType":"FunctionDefinition","parameters":{"id":5723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5722,"mutability":"mutable","name":"value","nameLocation":"18259:5:21","nodeType":"VariableDeclaration","scope":5745,"src":"18252:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5721,"name":"int256","nodeType":"ElementaryTypeName","src":"18252:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18251:14:21"},"returnParameters":{"id":5726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5725,"mutability":"mutable","name":"downcasted","nameLocation":"18296:10:21","nodeType":"VariableDeclaration","scope":5745,"src":"18289:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":5724,"name":"int240","nodeType":"ElementaryTypeName","src":"18289:6:21","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18288:19:21"},"scope":6540,"src":"18234:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5770,"nodeType":"Block","src":"18855:150:21","statements":[{"expression":{"id":5758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5753,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5751,"src":"18865:10:21","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5756,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5748,"src":"18885:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18878:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":5754,"name":"int232","nodeType":"ElementaryTypeName","src":"18878:6:21","typeDescriptions":{}}},"id":5757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18878:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18865:26:21","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":5759,"nodeType":"ExpressionStatement","src":"18865:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5760,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5751,"src":"18905:10:21","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5761,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5748,"src":"18919:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18905:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5769,"nodeType":"IfStatement","src":"18901:98:21","trueBody":{"id":5768,"nodeType":"Block","src":"18926:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323332","id":5764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18977:3:21","typeDescriptions":{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},"value":"232"},{"id":5765,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5748,"src":"18982:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_232_by_1","typeString":"int_const 232"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5763,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"18947:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18947:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5767,"nodeType":"RevertStatement","src":"18940:48:21"}]}}]},"documentation":{"id":5746,"nodeType":"StructuredDocumentation","src":"18464:312:21","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits"},"id":5771,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18790:8:21","nodeType":"FunctionDefinition","parameters":{"id":5749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5748,"mutability":"mutable","name":"value","nameLocation":"18806:5:21","nodeType":"VariableDeclaration","scope":5771,"src":"18799:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5747,"name":"int256","nodeType":"ElementaryTypeName","src":"18799:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18798:14:21"},"returnParameters":{"id":5752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5751,"mutability":"mutable","name":"downcasted","nameLocation":"18843:10:21","nodeType":"VariableDeclaration","scope":5771,"src":"18836:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":5750,"name":"int232","nodeType":"ElementaryTypeName","src":"18836:6:21","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18835:19:21"},"scope":6540,"src":"18781:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5796,"nodeType":"Block","src":"19402:150:21","statements":[{"expression":{"id":5784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5779,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"19412:10:21","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"19432:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19425:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":5780,"name":"int224","nodeType":"ElementaryTypeName","src":"19425:6:21","typeDescriptions":{}}},"id":5783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19425:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19412:26:21","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":5785,"nodeType":"ExpressionStatement","src":"19412:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5786,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5777,"src":"19452:10:21","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"19466:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19452:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5795,"nodeType":"IfStatement","src":"19448:98:21","trueBody":{"id":5794,"nodeType":"Block","src":"19473:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323234","id":5790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19524:3:21","typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},{"id":5791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5774,"src":"19529:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5789,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"19494:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19494:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5793,"nodeType":"RevertStatement","src":"19487:48:21"}]}}]},"documentation":{"id":5772,"nodeType":"StructuredDocumentation","src":"19011:312:21","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits"},"id":5797,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19337:8:21","nodeType":"FunctionDefinition","parameters":{"id":5775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5774,"mutability":"mutable","name":"value","nameLocation":"19353:5:21","nodeType":"VariableDeclaration","scope":5797,"src":"19346:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5773,"name":"int256","nodeType":"ElementaryTypeName","src":"19346:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19345:14:21"},"returnParameters":{"id":5778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5777,"mutability":"mutable","name":"downcasted","nameLocation":"19390:10:21","nodeType":"VariableDeclaration","scope":5797,"src":"19383:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":5776,"name":"int224","nodeType":"ElementaryTypeName","src":"19383:6:21","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19382:19:21"},"scope":6540,"src":"19328:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5822,"nodeType":"Block","src":"19949:150:21","statements":[{"expression":{"id":5810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5805,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"19959:10:21","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5808,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5800,"src":"19979:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19972:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":5806,"name":"int216","nodeType":"ElementaryTypeName","src":"19972:6:21","typeDescriptions":{}}},"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19972:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"19959:26:21","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":5811,"nodeType":"ExpressionStatement","src":"19959:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5812,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5803,"src":"19999:10:21","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5813,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5800,"src":"20013:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19999:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5821,"nodeType":"IfStatement","src":"19995:98:21","trueBody":{"id":5820,"nodeType":"Block","src":"20020:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323136","id":5816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20071:3:21","typeDescriptions":{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},"value":"216"},{"id":5817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5800,"src":"20076:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_216_by_1","typeString":"int_const 216"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5815,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"20041:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20041:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5819,"nodeType":"RevertStatement","src":"20034:48:21"}]}}]},"documentation":{"id":5798,"nodeType":"StructuredDocumentation","src":"19558:312:21","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits"},"id":5823,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19884:8:21","nodeType":"FunctionDefinition","parameters":{"id":5801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5800,"mutability":"mutable","name":"value","nameLocation":"19900:5:21","nodeType":"VariableDeclaration","scope":5823,"src":"19893:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5799,"name":"int256","nodeType":"ElementaryTypeName","src":"19893:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19892:14:21"},"returnParameters":{"id":5804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5803,"mutability":"mutable","name":"downcasted","nameLocation":"19937:10:21","nodeType":"VariableDeclaration","scope":5823,"src":"19930:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":5802,"name":"int216","nodeType":"ElementaryTypeName","src":"19930:6:21","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"19929:19:21"},"scope":6540,"src":"19875:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5848,"nodeType":"Block","src":"20496:150:21","statements":[{"expression":{"id":5836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5831,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5829,"src":"20506:10:21","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5826,"src":"20526:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20519:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":5832,"name":"int208","nodeType":"ElementaryTypeName","src":"20519:6:21","typeDescriptions":{}}},"id":5835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20519:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20506:26:21","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":5837,"nodeType":"ExpressionStatement","src":"20506:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5838,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5829,"src":"20546:10:21","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5826,"src":"20560:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20546:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5847,"nodeType":"IfStatement","src":"20542:98:21","trueBody":{"id":5846,"nodeType":"Block","src":"20567:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323038","id":5842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20618:3:21","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},{"id":5843,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5826,"src":"20623:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5841,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"20588:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20588:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5845,"nodeType":"RevertStatement","src":"20581:48:21"}]}}]},"documentation":{"id":5824,"nodeType":"StructuredDocumentation","src":"20105:312:21","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits"},"id":5849,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20431:8:21","nodeType":"FunctionDefinition","parameters":{"id":5827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5826,"mutability":"mutable","name":"value","nameLocation":"20447:5:21","nodeType":"VariableDeclaration","scope":5849,"src":"20440:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5825,"name":"int256","nodeType":"ElementaryTypeName","src":"20440:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20439:14:21"},"returnParameters":{"id":5830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5829,"mutability":"mutable","name":"downcasted","nameLocation":"20484:10:21","nodeType":"VariableDeclaration","scope":5849,"src":"20477:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":5828,"name":"int208","nodeType":"ElementaryTypeName","src":"20477:6:21","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20476:19:21"},"scope":6540,"src":"20422:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5874,"nodeType":"Block","src":"21043:150:21","statements":[{"expression":{"id":5862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5857,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5855,"src":"21053:10:21","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5852,"src":"21073:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21066:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":5858,"name":"int200","nodeType":"ElementaryTypeName","src":"21066:6:21","typeDescriptions":{}}},"id":5861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21066:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21053:26:21","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":5863,"nodeType":"ExpressionStatement","src":"21053:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5864,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5855,"src":"21093:10:21","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5865,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5852,"src":"21107:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21093:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5873,"nodeType":"IfStatement","src":"21089:98:21","trueBody":{"id":5872,"nodeType":"Block","src":"21114:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"323030","id":5868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21165:3:21","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},{"id":5869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5852,"src":"21170:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5867,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"21135:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21135:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5871,"nodeType":"RevertStatement","src":"21128:48:21"}]}}]},"documentation":{"id":5850,"nodeType":"StructuredDocumentation","src":"20652:312:21","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits"},"id":5875,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"20978:8:21","nodeType":"FunctionDefinition","parameters":{"id":5853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5852,"mutability":"mutable","name":"value","nameLocation":"20994:5:21","nodeType":"VariableDeclaration","scope":5875,"src":"20987:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5851,"name":"int256","nodeType":"ElementaryTypeName","src":"20987:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20986:14:21"},"returnParameters":{"id":5856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5855,"mutability":"mutable","name":"downcasted","nameLocation":"21031:10:21","nodeType":"VariableDeclaration","scope":5875,"src":"21024:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":5854,"name":"int200","nodeType":"ElementaryTypeName","src":"21024:6:21","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21023:19:21"},"scope":6540,"src":"20969:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5900,"nodeType":"Block","src":"21590:150:21","statements":[{"expression":{"id":5888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5883,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5881,"src":"21600:10:21","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5886,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"21620:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21613:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":5884,"name":"int192","nodeType":"ElementaryTypeName","src":"21613:6:21","typeDescriptions":{}}},"id":5887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21613:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21600:26:21","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":5889,"nodeType":"ExpressionStatement","src":"21600:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5890,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5881,"src":"21640:10:21","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"21654:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21640:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5899,"nodeType":"IfStatement","src":"21636:98:21","trueBody":{"id":5898,"nodeType":"Block","src":"21661:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313932","id":5894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21712:3:21","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},{"id":5895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"21717:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5893,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"21682:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21682:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5897,"nodeType":"RevertStatement","src":"21675:48:21"}]}}]},"documentation":{"id":5876,"nodeType":"StructuredDocumentation","src":"21199:312:21","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits"},"id":5901,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21525:8:21","nodeType":"FunctionDefinition","parameters":{"id":5879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5878,"mutability":"mutable","name":"value","nameLocation":"21541:5:21","nodeType":"VariableDeclaration","scope":5901,"src":"21534:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5877,"name":"int256","nodeType":"ElementaryTypeName","src":"21534:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21533:14:21"},"returnParameters":{"id":5882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5881,"mutability":"mutable","name":"downcasted","nameLocation":"21578:10:21","nodeType":"VariableDeclaration","scope":5901,"src":"21571:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":5880,"name":"int192","nodeType":"ElementaryTypeName","src":"21571:6:21","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21570:19:21"},"scope":6540,"src":"21516:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5926,"nodeType":"Block","src":"22137:150:21","statements":[{"expression":{"id":5914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5909,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5907,"src":"22147:10:21","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5912,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5904,"src":"22167:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22160:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":5910,"name":"int184","nodeType":"ElementaryTypeName","src":"22160:6:21","typeDescriptions":{}}},"id":5913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22160:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22147:26:21","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":5915,"nodeType":"ExpressionStatement","src":"22147:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5916,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5907,"src":"22187:10:21","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5904,"src":"22201:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22187:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5925,"nodeType":"IfStatement","src":"22183:98:21","trueBody":{"id":5924,"nodeType":"Block","src":"22208:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313834","id":5920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22259:3:21","typeDescriptions":{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},"value":"184"},{"id":5921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5904,"src":"22264:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_184_by_1","typeString":"int_const 184"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5919,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"22229:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22229:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5923,"nodeType":"RevertStatement","src":"22222:48:21"}]}}]},"documentation":{"id":5902,"nodeType":"StructuredDocumentation","src":"21746:312:21","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits"},"id":5927,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22072:8:21","nodeType":"FunctionDefinition","parameters":{"id":5905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5904,"mutability":"mutable","name":"value","nameLocation":"22088:5:21","nodeType":"VariableDeclaration","scope":5927,"src":"22081:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5903,"name":"int256","nodeType":"ElementaryTypeName","src":"22081:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22080:14:21"},"returnParameters":{"id":5908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5907,"mutability":"mutable","name":"downcasted","nameLocation":"22125:10:21","nodeType":"VariableDeclaration","scope":5927,"src":"22118:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":5906,"name":"int184","nodeType":"ElementaryTypeName","src":"22118:6:21","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22117:19:21"},"scope":6540,"src":"22063:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5952,"nodeType":"Block","src":"22684:150:21","statements":[{"expression":{"id":5940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5935,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5933,"src":"22694:10:21","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"22714:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22707:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":5936,"name":"int176","nodeType":"ElementaryTypeName","src":"22707:6:21","typeDescriptions":{}}},"id":5939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22707:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22694:26:21","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":5941,"nodeType":"ExpressionStatement","src":"22694:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5942,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5933,"src":"22734:10:21","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"22748:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22734:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5951,"nodeType":"IfStatement","src":"22730:98:21","trueBody":{"id":5950,"nodeType":"Block","src":"22755:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313736","id":5946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22806:3:21","typeDescriptions":{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},"value":"176"},{"id":5947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5930,"src":"22811:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_176_by_1","typeString":"int_const 176"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5945,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"22776:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22776:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5949,"nodeType":"RevertStatement","src":"22769:48:21"}]}}]},"documentation":{"id":5928,"nodeType":"StructuredDocumentation","src":"22293:312:21","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits"},"id":5953,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22619:8:21","nodeType":"FunctionDefinition","parameters":{"id":5931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5930,"mutability":"mutable","name":"value","nameLocation":"22635:5:21","nodeType":"VariableDeclaration","scope":5953,"src":"22628:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5929,"name":"int256","nodeType":"ElementaryTypeName","src":"22628:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22627:14:21"},"returnParameters":{"id":5934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5933,"mutability":"mutable","name":"downcasted","nameLocation":"22672:10:21","nodeType":"VariableDeclaration","scope":5953,"src":"22665:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":5932,"name":"int176","nodeType":"ElementaryTypeName","src":"22665:6:21","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22664:19:21"},"scope":6540,"src":"22610:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5978,"nodeType":"Block","src":"23231:150:21","statements":[{"expression":{"id":5966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5961,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"23241:10:21","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"23261:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23254:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":5962,"name":"int168","nodeType":"ElementaryTypeName","src":"23254:6:21","typeDescriptions":{}}},"id":5965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23254:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23241:26:21","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":5967,"nodeType":"ExpressionStatement","src":"23241:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5968,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"23281:10:21","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"23295:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23281:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5977,"nodeType":"IfStatement","src":"23277:98:21","trueBody":{"id":5976,"nodeType":"Block","src":"23302:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313638","id":5972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23353:3:21","typeDescriptions":{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},"value":"168"},{"id":5973,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5956,"src":"23358:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_168_by_1","typeString":"int_const 168"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5971,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"23323:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":5974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23323:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5975,"nodeType":"RevertStatement","src":"23316:48:21"}]}}]},"documentation":{"id":5954,"nodeType":"StructuredDocumentation","src":"22840:312:21","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits"},"id":5979,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23166:8:21","nodeType":"FunctionDefinition","parameters":{"id":5957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5956,"mutability":"mutable","name":"value","nameLocation":"23182:5:21","nodeType":"VariableDeclaration","scope":5979,"src":"23175:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5955,"name":"int256","nodeType":"ElementaryTypeName","src":"23175:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23174:14:21"},"returnParameters":{"id":5960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5959,"mutability":"mutable","name":"downcasted","nameLocation":"23219:10:21","nodeType":"VariableDeclaration","scope":5979,"src":"23212:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":5958,"name":"int168","nodeType":"ElementaryTypeName","src":"23212:6:21","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23211:19:21"},"scope":6540,"src":"23157:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6004,"nodeType":"Block","src":"23778:150:21","statements":[{"expression":{"id":5992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5987,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5985,"src":"23788:10:21","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5990,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5982,"src":"23808:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23801:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":5988,"name":"int160","nodeType":"ElementaryTypeName","src":"23801:6:21","typeDescriptions":{}}},"id":5991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23801:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23788:26:21","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":5993,"nodeType":"ExpressionStatement","src":"23788:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5994,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5985,"src":"23828:10:21","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5995,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5982,"src":"23842:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23828:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6003,"nodeType":"IfStatement","src":"23824:98:21","trueBody":{"id":6002,"nodeType":"Block","src":"23849:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313630","id":5998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23900:3:21","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},{"id":5999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5982,"src":"23905:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5997,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"23870:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23870:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6001,"nodeType":"RevertStatement","src":"23863:48:21"}]}}]},"documentation":{"id":5980,"nodeType":"StructuredDocumentation","src":"23387:312:21","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits"},"id":6005,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23713:8:21","nodeType":"FunctionDefinition","parameters":{"id":5983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5982,"mutability":"mutable","name":"value","nameLocation":"23729:5:21","nodeType":"VariableDeclaration","scope":6005,"src":"23722:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5981,"name":"int256","nodeType":"ElementaryTypeName","src":"23722:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23721:14:21"},"returnParameters":{"id":5986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5985,"mutability":"mutable","name":"downcasted","nameLocation":"23766:10:21","nodeType":"VariableDeclaration","scope":6005,"src":"23759:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":5984,"name":"int160","nodeType":"ElementaryTypeName","src":"23759:6:21","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23758:19:21"},"scope":6540,"src":"23704:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6030,"nodeType":"Block","src":"24325:150:21","statements":[{"expression":{"id":6018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6013,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6011,"src":"24335:10:21","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6016,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6008,"src":"24355:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24348:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":6014,"name":"int152","nodeType":"ElementaryTypeName","src":"24348:6:21","typeDescriptions":{}}},"id":6017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24348:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24335:26:21","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":6019,"nodeType":"ExpressionStatement","src":"24335:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6020,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6011,"src":"24375:10:21","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6008,"src":"24389:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24375:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6029,"nodeType":"IfStatement","src":"24371:98:21","trueBody":{"id":6028,"nodeType":"Block","src":"24396:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313532","id":6024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24447:3:21","typeDescriptions":{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},"value":"152"},{"id":6025,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6008,"src":"24452:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_152_by_1","typeString":"int_const 152"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6023,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"24417:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24417:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6027,"nodeType":"RevertStatement","src":"24410:48:21"}]}}]},"documentation":{"id":6006,"nodeType":"StructuredDocumentation","src":"23934:312:21","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits"},"id":6031,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24260:8:21","nodeType":"FunctionDefinition","parameters":{"id":6009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6008,"mutability":"mutable","name":"value","nameLocation":"24276:5:21","nodeType":"VariableDeclaration","scope":6031,"src":"24269:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6007,"name":"int256","nodeType":"ElementaryTypeName","src":"24269:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24268:14:21"},"returnParameters":{"id":6012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6011,"mutability":"mutable","name":"downcasted","nameLocation":"24313:10:21","nodeType":"VariableDeclaration","scope":6031,"src":"24306:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":6010,"name":"int152","nodeType":"ElementaryTypeName","src":"24306:6:21","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24305:19:21"},"scope":6540,"src":"24251:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6056,"nodeType":"Block","src":"24872:150:21","statements":[{"expression":{"id":6044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6039,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"24882:10:21","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6034,"src":"24902:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24895:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":6040,"name":"int144","nodeType":"ElementaryTypeName","src":"24895:6:21","typeDescriptions":{}}},"id":6043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24895:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"24882:26:21","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":6045,"nodeType":"ExpressionStatement","src":"24882:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6046,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6037,"src":"24922:10:21","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6034,"src":"24936:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24922:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6055,"nodeType":"IfStatement","src":"24918:98:21","trueBody":{"id":6054,"nodeType":"Block","src":"24943:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313434","id":6050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24994:3:21","typeDescriptions":{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},"value":"144"},{"id":6051,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6034,"src":"24999:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_144_by_1","typeString":"int_const 144"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6049,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"24964:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24964:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6053,"nodeType":"RevertStatement","src":"24957:48:21"}]}}]},"documentation":{"id":6032,"nodeType":"StructuredDocumentation","src":"24481:312:21","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits"},"id":6057,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24807:8:21","nodeType":"FunctionDefinition","parameters":{"id":6035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6034,"mutability":"mutable","name":"value","nameLocation":"24823:5:21","nodeType":"VariableDeclaration","scope":6057,"src":"24816:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6033,"name":"int256","nodeType":"ElementaryTypeName","src":"24816:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24815:14:21"},"returnParameters":{"id":6038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6037,"mutability":"mutable","name":"downcasted","nameLocation":"24860:10:21","nodeType":"VariableDeclaration","scope":6057,"src":"24853:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":6036,"name":"int144","nodeType":"ElementaryTypeName","src":"24853:6:21","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"24852:19:21"},"scope":6540,"src":"24798:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6082,"nodeType":"Block","src":"25419:150:21","statements":[{"expression":{"id":6070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6065,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6063,"src":"25429:10:21","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6060,"src":"25449:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25442:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":6066,"name":"int136","nodeType":"ElementaryTypeName","src":"25442:6:21","typeDescriptions":{}}},"id":6069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25442:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25429:26:21","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":6071,"nodeType":"ExpressionStatement","src":"25429:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6072,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6063,"src":"25469:10:21","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6060,"src":"25483:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25469:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6081,"nodeType":"IfStatement","src":"25465:98:21","trueBody":{"id":6080,"nodeType":"Block","src":"25490:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313336","id":6076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25541:3:21","typeDescriptions":{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},"value":"136"},{"id":6077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6060,"src":"25546:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_136_by_1","typeString":"int_const 136"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6075,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"25511:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25511:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6079,"nodeType":"RevertStatement","src":"25504:48:21"}]}}]},"documentation":{"id":6058,"nodeType":"StructuredDocumentation","src":"25028:312:21","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits"},"id":6083,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25354:8:21","nodeType":"FunctionDefinition","parameters":{"id":6061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6060,"mutability":"mutable","name":"value","nameLocation":"25370:5:21","nodeType":"VariableDeclaration","scope":6083,"src":"25363:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6059,"name":"int256","nodeType":"ElementaryTypeName","src":"25363:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25362:14:21"},"returnParameters":{"id":6064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6063,"mutability":"mutable","name":"downcasted","nameLocation":"25407:10:21","nodeType":"VariableDeclaration","scope":6083,"src":"25400:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":6062,"name":"int136","nodeType":"ElementaryTypeName","src":"25400:6:21","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25399:19:21"},"scope":6540,"src":"25345:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6108,"nodeType":"Block","src":"25966:150:21","statements":[{"expression":{"id":6096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6091,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"25976:10:21","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6086,"src":"25996:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25989:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":6092,"name":"int128","nodeType":"ElementaryTypeName","src":"25989:6:21","typeDescriptions":{}}},"id":6095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25989:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"25976:26:21","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":6097,"nodeType":"ExpressionStatement","src":"25976:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6098,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6089,"src":"26016:10:21","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6099,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6086,"src":"26030:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26016:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6107,"nodeType":"IfStatement","src":"26012:98:21","trueBody":{"id":6106,"nodeType":"Block","src":"26037:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313238","id":6102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26088:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},{"id":6103,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6086,"src":"26093:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6101,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"26058:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26058:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6105,"nodeType":"RevertStatement","src":"26051:48:21"}]}}]},"documentation":{"id":6084,"nodeType":"StructuredDocumentation","src":"25575:312:21","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits"},"id":6109,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"25901:8:21","nodeType":"FunctionDefinition","parameters":{"id":6087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6086,"mutability":"mutable","name":"value","nameLocation":"25917:5:21","nodeType":"VariableDeclaration","scope":6109,"src":"25910:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6085,"name":"int256","nodeType":"ElementaryTypeName","src":"25910:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25909:14:21"},"returnParameters":{"id":6090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6089,"mutability":"mutable","name":"downcasted","nameLocation":"25954:10:21","nodeType":"VariableDeclaration","scope":6109,"src":"25947:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":6088,"name":"int128","nodeType":"ElementaryTypeName","src":"25947:6:21","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"25946:19:21"},"scope":6540,"src":"25892:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6134,"nodeType":"Block","src":"26513:150:21","statements":[{"expression":{"id":6122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6117,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6115,"src":"26523:10:21","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"26543:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26536:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":6118,"name":"int120","nodeType":"ElementaryTypeName","src":"26536:6:21","typeDescriptions":{}}},"id":6121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26536:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26523:26:21","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":6123,"nodeType":"ExpressionStatement","src":"26523:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6124,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6115,"src":"26563:10:21","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"26577:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26563:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6133,"nodeType":"IfStatement","src":"26559:98:21","trueBody":{"id":6132,"nodeType":"Block","src":"26584:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313230","id":6128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26635:3:21","typeDescriptions":{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},"value":"120"},{"id":6129,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"26640:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_120_by_1","typeString":"int_const 120"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6127,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"26605:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26605:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6131,"nodeType":"RevertStatement","src":"26598:48:21"}]}}]},"documentation":{"id":6110,"nodeType":"StructuredDocumentation","src":"26122:312:21","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits"},"id":6135,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26448:8:21","nodeType":"FunctionDefinition","parameters":{"id":6113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6112,"mutability":"mutable","name":"value","nameLocation":"26464:5:21","nodeType":"VariableDeclaration","scope":6135,"src":"26457:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6111,"name":"int256","nodeType":"ElementaryTypeName","src":"26457:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26456:14:21"},"returnParameters":{"id":6116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6115,"mutability":"mutable","name":"downcasted","nameLocation":"26501:10:21","nodeType":"VariableDeclaration","scope":6135,"src":"26494:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":6114,"name":"int120","nodeType":"ElementaryTypeName","src":"26494:6:21","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26493:19:21"},"scope":6540,"src":"26439:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6160,"nodeType":"Block","src":"27060:150:21","statements":[{"expression":{"id":6148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6143,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6141,"src":"27070:10:21","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6138,"src":"27090:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27083:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":6144,"name":"int112","nodeType":"ElementaryTypeName","src":"27083:6:21","typeDescriptions":{}}},"id":6147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27083:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27070:26:21","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":6149,"nodeType":"ExpressionStatement","src":"27070:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6150,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6141,"src":"27110:10:21","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6151,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6138,"src":"27124:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27110:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6159,"nodeType":"IfStatement","src":"27106:98:21","trueBody":{"id":6158,"nodeType":"Block","src":"27131:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313132","id":6154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27182:3:21","typeDescriptions":{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},"value":"112"},{"id":6155,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6138,"src":"27187:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_112_by_1","typeString":"int_const 112"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6153,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"27152:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27152:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6157,"nodeType":"RevertStatement","src":"27145:48:21"}]}}]},"documentation":{"id":6136,"nodeType":"StructuredDocumentation","src":"26669:312:21","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits"},"id":6161,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"26995:8:21","nodeType":"FunctionDefinition","parameters":{"id":6139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6138,"mutability":"mutable","name":"value","nameLocation":"27011:5:21","nodeType":"VariableDeclaration","scope":6161,"src":"27004:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6137,"name":"int256","nodeType":"ElementaryTypeName","src":"27004:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27003:14:21"},"returnParameters":{"id":6142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6141,"mutability":"mutable","name":"downcasted","nameLocation":"27048:10:21","nodeType":"VariableDeclaration","scope":6161,"src":"27041:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":6140,"name":"int112","nodeType":"ElementaryTypeName","src":"27041:6:21","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27040:19:21"},"scope":6540,"src":"26986:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6186,"nodeType":"Block","src":"27607:150:21","statements":[{"expression":{"id":6174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6169,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"27617:10:21","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6172,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"27637:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27630:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":6170,"name":"int104","nodeType":"ElementaryTypeName","src":"27630:6:21","typeDescriptions":{}}},"id":6173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27630:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27617:26:21","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":6175,"nodeType":"ExpressionStatement","src":"27617:26:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6176,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"27657:10:21","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"27671:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27657:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6185,"nodeType":"IfStatement","src":"27653:98:21","trueBody":{"id":6184,"nodeType":"Block","src":"27678:73:21","statements":[{"errorCall":{"arguments":[{"hexValue":"313034","id":6180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27729:3:21","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},{"id":6181,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"27734:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6179,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"27699:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27699:41:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6183,"nodeType":"RevertStatement","src":"27692:48:21"}]}}]},"documentation":{"id":6162,"nodeType":"StructuredDocumentation","src":"27216:312:21","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits"},"id":6187,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27542:8:21","nodeType":"FunctionDefinition","parameters":{"id":6165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6164,"mutability":"mutable","name":"value","nameLocation":"27558:5:21","nodeType":"VariableDeclaration","scope":6187,"src":"27551:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6163,"name":"int256","nodeType":"ElementaryTypeName","src":"27551:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27550:14:21"},"returnParameters":{"id":6168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6167,"mutability":"mutable","name":"downcasted","nameLocation":"27595:10:21","nodeType":"VariableDeclaration","scope":6187,"src":"27588:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":6166,"name":"int104","nodeType":"ElementaryTypeName","src":"27588:6:21","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27587:19:21"},"scope":6540,"src":"27533:224:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6212,"nodeType":"Block","src":"28147:148:21","statements":[{"expression":{"id":6200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6195,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"28157:10:21","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6198,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6190,"src":"28176:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28170:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":6196,"name":"int96","nodeType":"ElementaryTypeName","src":"28170:5:21","typeDescriptions":{}}},"id":6199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28170:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28157:25:21","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":6201,"nodeType":"ExpressionStatement","src":"28157:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6202,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"28196:10:21","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6203,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6190,"src":"28210:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28196:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6211,"nodeType":"IfStatement","src":"28192:97:21","trueBody":{"id":6210,"nodeType":"Block","src":"28217:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3936","id":6206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28268:2:21","typeDescriptions":{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},"value":"96"},{"id":6207,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6190,"src":"28272:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_96_by_1","typeString":"int_const 96"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6205,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"28238:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28238:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6209,"nodeType":"RevertStatement","src":"28231:47:21"}]}}]},"documentation":{"id":6188,"nodeType":"StructuredDocumentation","src":"27763:307:21","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits"},"id":6213,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28084:7:21","nodeType":"FunctionDefinition","parameters":{"id":6191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6190,"mutability":"mutable","name":"value","nameLocation":"28099:5:21","nodeType":"VariableDeclaration","scope":6213,"src":"28092:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6189,"name":"int256","nodeType":"ElementaryTypeName","src":"28092:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28091:14:21"},"returnParameters":{"id":6194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6193,"mutability":"mutable","name":"downcasted","nameLocation":"28135:10:21","nodeType":"VariableDeclaration","scope":6213,"src":"28129:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":6192,"name":"int96","nodeType":"ElementaryTypeName","src":"28129:5:21","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28128:18:21"},"scope":6540,"src":"28075:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6238,"nodeType":"Block","src":"28685:148:21","statements":[{"expression":{"id":6226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6221,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6219,"src":"28695:10:21","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6224,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6216,"src":"28714:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6223,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28708:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":6222,"name":"int88","nodeType":"ElementaryTypeName","src":"28708:5:21","typeDescriptions":{}}},"id":6225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28708:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28695:25:21","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":6227,"nodeType":"ExpressionStatement","src":"28695:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6228,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6219,"src":"28734:10:21","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6229,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6216,"src":"28748:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28734:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6237,"nodeType":"IfStatement","src":"28730:97:21","trueBody":{"id":6236,"nodeType":"Block","src":"28755:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3838","id":6232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28806:2:21","typeDescriptions":{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},"value":"88"},{"id":6233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6216,"src":"28810:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_88_by_1","typeString":"int_const 88"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6231,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"28776:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28776:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6235,"nodeType":"RevertStatement","src":"28769:47:21"}]}}]},"documentation":{"id":6214,"nodeType":"StructuredDocumentation","src":"28301:307:21","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits"},"id":6239,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28622:7:21","nodeType":"FunctionDefinition","parameters":{"id":6217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6216,"mutability":"mutable","name":"value","nameLocation":"28637:5:21","nodeType":"VariableDeclaration","scope":6239,"src":"28630:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6215,"name":"int256","nodeType":"ElementaryTypeName","src":"28630:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28629:14:21"},"returnParameters":{"id":6220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6219,"mutability":"mutable","name":"downcasted","nameLocation":"28673:10:21","nodeType":"VariableDeclaration","scope":6239,"src":"28667:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":6218,"name":"int88","nodeType":"ElementaryTypeName","src":"28667:5:21","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28666:18:21"},"scope":6540,"src":"28613:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6264,"nodeType":"Block","src":"29223:148:21","statements":[{"expression":{"id":6252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6247,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"29233:10:21","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6242,"src":"29252:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29246:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":6248,"name":"int80","nodeType":"ElementaryTypeName","src":"29246:5:21","typeDescriptions":{}}},"id":6251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29246:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29233:25:21","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":6253,"nodeType":"ExpressionStatement","src":"29233:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6254,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"29272:10:21","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6242,"src":"29286:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29272:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6263,"nodeType":"IfStatement","src":"29268:97:21","trueBody":{"id":6262,"nodeType":"Block","src":"29293:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3830","id":6258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29344:2:21","typeDescriptions":{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},"value":"80"},{"id":6259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6242,"src":"29348:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_80_by_1","typeString":"int_const 80"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6257,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"29314:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29314:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6261,"nodeType":"RevertStatement","src":"29307:47:21"}]}}]},"documentation":{"id":6240,"nodeType":"StructuredDocumentation","src":"28839:307:21","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits"},"id":6265,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29160:7:21","nodeType":"FunctionDefinition","parameters":{"id":6243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6242,"mutability":"mutable","name":"value","nameLocation":"29175:5:21","nodeType":"VariableDeclaration","scope":6265,"src":"29168:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6241,"name":"int256","nodeType":"ElementaryTypeName","src":"29168:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29167:14:21"},"returnParameters":{"id":6246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6245,"mutability":"mutable","name":"downcasted","nameLocation":"29211:10:21","nodeType":"VariableDeclaration","scope":6265,"src":"29205:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":6244,"name":"int80","nodeType":"ElementaryTypeName","src":"29205:5:21","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29204:18:21"},"scope":6540,"src":"29151:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6290,"nodeType":"Block","src":"29761:148:21","statements":[{"expression":{"id":6278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6273,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"29771:10:21","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"29790:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29784:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":6274,"name":"int72","nodeType":"ElementaryTypeName","src":"29784:5:21","typeDescriptions":{}}},"id":6277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29784:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"29771:25:21","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":6279,"nodeType":"ExpressionStatement","src":"29771:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6280,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6271,"src":"29810:10:21","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6281,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"29824:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29810:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6289,"nodeType":"IfStatement","src":"29806:97:21","trueBody":{"id":6288,"nodeType":"Block","src":"29831:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3732","id":6284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29882:2:21","typeDescriptions":{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},"value":"72"},{"id":6285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6268,"src":"29886:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_72_by_1","typeString":"int_const 72"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6283,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"29852:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29852:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6287,"nodeType":"RevertStatement","src":"29845:47:21"}]}}]},"documentation":{"id":6266,"nodeType":"StructuredDocumentation","src":"29377:307:21","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits"},"id":6291,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29698:7:21","nodeType":"FunctionDefinition","parameters":{"id":6269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6268,"mutability":"mutable","name":"value","nameLocation":"29713:5:21","nodeType":"VariableDeclaration","scope":6291,"src":"29706:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6267,"name":"int256","nodeType":"ElementaryTypeName","src":"29706:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29705:14:21"},"returnParameters":{"id":6272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6271,"mutability":"mutable","name":"downcasted","nameLocation":"29749:10:21","nodeType":"VariableDeclaration","scope":6291,"src":"29743:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":6270,"name":"int72","nodeType":"ElementaryTypeName","src":"29743:5:21","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"29742:18:21"},"scope":6540,"src":"29689:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6316,"nodeType":"Block","src":"30299:148:21","statements":[{"expression":{"id":6304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6299,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6297,"src":"30309:10:21","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6302,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6294,"src":"30328:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30322:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":6300,"name":"int64","nodeType":"ElementaryTypeName","src":"30322:5:21","typeDescriptions":{}}},"id":6303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30322:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30309:25:21","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":6305,"nodeType":"ExpressionStatement","src":"30309:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6306,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6297,"src":"30348:10:21","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6294,"src":"30362:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30348:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6315,"nodeType":"IfStatement","src":"30344:97:21","trueBody":{"id":6314,"nodeType":"Block","src":"30369:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3634","id":6310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30420:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},{"id":6311,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6294,"src":"30424:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6309,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"30390:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30390:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6313,"nodeType":"RevertStatement","src":"30383:47:21"}]}}]},"documentation":{"id":6292,"nodeType":"StructuredDocumentation","src":"29915:307:21","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits"},"id":6317,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30236:7:21","nodeType":"FunctionDefinition","parameters":{"id":6295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6294,"mutability":"mutable","name":"value","nameLocation":"30251:5:21","nodeType":"VariableDeclaration","scope":6317,"src":"30244:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6293,"name":"int256","nodeType":"ElementaryTypeName","src":"30244:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30243:14:21"},"returnParameters":{"id":6298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6297,"mutability":"mutable","name":"downcasted","nameLocation":"30287:10:21","nodeType":"VariableDeclaration","scope":6317,"src":"30281:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":6296,"name":"int64","nodeType":"ElementaryTypeName","src":"30281:5:21","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30280:18:21"},"scope":6540,"src":"30227:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6342,"nodeType":"Block","src":"30837:148:21","statements":[{"expression":{"id":6330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6325,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6323,"src":"30847:10:21","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6328,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6320,"src":"30866:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30860:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":6326,"name":"int56","nodeType":"ElementaryTypeName","src":"30860:5:21","typeDescriptions":{}}},"id":6329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30860:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"30847:25:21","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":6331,"nodeType":"ExpressionStatement","src":"30847:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6332,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6323,"src":"30886:10:21","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6320,"src":"30900:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30886:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6341,"nodeType":"IfStatement","src":"30882:97:21","trueBody":{"id":6340,"nodeType":"Block","src":"30907:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3536","id":6336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30958:2:21","typeDescriptions":{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},"value":"56"},{"id":6337,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6320,"src":"30962:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_56_by_1","typeString":"int_const 56"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6335,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"30928:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30928:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6339,"nodeType":"RevertStatement","src":"30921:47:21"}]}}]},"documentation":{"id":6318,"nodeType":"StructuredDocumentation","src":"30453:307:21","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits"},"id":6343,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"30774:7:21","nodeType":"FunctionDefinition","parameters":{"id":6321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6320,"mutability":"mutable","name":"value","nameLocation":"30789:5:21","nodeType":"VariableDeclaration","scope":6343,"src":"30782:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6319,"name":"int256","nodeType":"ElementaryTypeName","src":"30782:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30781:14:21"},"returnParameters":{"id":6324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6323,"mutability":"mutable","name":"downcasted","nameLocation":"30825:10:21","nodeType":"VariableDeclaration","scope":6343,"src":"30819:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":6322,"name":"int56","nodeType":"ElementaryTypeName","src":"30819:5:21","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"30818:18:21"},"scope":6540,"src":"30765:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6368,"nodeType":"Block","src":"31375:148:21","statements":[{"expression":{"id":6356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6351,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6349,"src":"31385:10:21","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6346,"src":"31404:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31398:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":6352,"name":"int48","nodeType":"ElementaryTypeName","src":"31398:5:21","typeDescriptions":{}}},"id":6355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31398:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31385:25:21","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":6357,"nodeType":"ExpressionStatement","src":"31385:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6358,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6349,"src":"31424:10:21","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6346,"src":"31438:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31424:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6367,"nodeType":"IfStatement","src":"31420:97:21","trueBody":{"id":6366,"nodeType":"Block","src":"31445:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3438","id":6362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31496:2:21","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},{"id":6363,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6346,"src":"31500:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6361,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"31466:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31466:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6365,"nodeType":"RevertStatement","src":"31459:47:21"}]}}]},"documentation":{"id":6344,"nodeType":"StructuredDocumentation","src":"30991:307:21","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits"},"id":6369,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31312:7:21","nodeType":"FunctionDefinition","parameters":{"id":6347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6346,"mutability":"mutable","name":"value","nameLocation":"31327:5:21","nodeType":"VariableDeclaration","scope":6369,"src":"31320:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6345,"name":"int256","nodeType":"ElementaryTypeName","src":"31320:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31319:14:21"},"returnParameters":{"id":6350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6349,"mutability":"mutable","name":"downcasted","nameLocation":"31363:10:21","nodeType":"VariableDeclaration","scope":6369,"src":"31357:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":6348,"name":"int48","nodeType":"ElementaryTypeName","src":"31357:5:21","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31356:18:21"},"scope":6540,"src":"31303:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6394,"nodeType":"Block","src":"31913:148:21","statements":[{"expression":{"id":6382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6377,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6375,"src":"31923:10:21","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6380,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6372,"src":"31942:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31936:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":6378,"name":"int40","nodeType":"ElementaryTypeName","src":"31936:5:21","typeDescriptions":{}}},"id":6381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31936:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"31923:25:21","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":6383,"nodeType":"ExpressionStatement","src":"31923:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6384,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6375,"src":"31962:10:21","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6385,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6372,"src":"31976:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31962:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6393,"nodeType":"IfStatement","src":"31958:97:21","trueBody":{"id":6392,"nodeType":"Block","src":"31983:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3430","id":6388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32034:2:21","typeDescriptions":{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},"value":"40"},{"id":6389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6372,"src":"32038:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_40_by_1","typeString":"int_const 40"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6387,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"32004:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32004:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6391,"nodeType":"RevertStatement","src":"31997:47:21"}]}}]},"documentation":{"id":6370,"nodeType":"StructuredDocumentation","src":"31529:307:21","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits"},"id":6395,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"31850:7:21","nodeType":"FunctionDefinition","parameters":{"id":6373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6372,"mutability":"mutable","name":"value","nameLocation":"31865:5:21","nodeType":"VariableDeclaration","scope":6395,"src":"31858:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6371,"name":"int256","nodeType":"ElementaryTypeName","src":"31858:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31857:14:21"},"returnParameters":{"id":6376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6375,"mutability":"mutable","name":"downcasted","nameLocation":"31901:10:21","nodeType":"VariableDeclaration","scope":6395,"src":"31895:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":6374,"name":"int40","nodeType":"ElementaryTypeName","src":"31895:5:21","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"31894:18:21"},"scope":6540,"src":"31841:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6420,"nodeType":"Block","src":"32451:148:21","statements":[{"expression":{"id":6408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6403,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6401,"src":"32461:10:21","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6398,"src":"32480:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32474:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":6404,"name":"int32","nodeType":"ElementaryTypeName","src":"32474:5:21","typeDescriptions":{}}},"id":6407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32474:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32461:25:21","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":6409,"nodeType":"ExpressionStatement","src":"32461:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6410,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6401,"src":"32500:10:21","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6411,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6398,"src":"32514:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32500:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6419,"nodeType":"IfStatement","src":"32496:97:21","trueBody":{"id":6418,"nodeType":"Block","src":"32521:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3332","id":6414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32572:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":6415,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6398,"src":"32576:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6413,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"32542:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32542:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6417,"nodeType":"RevertStatement","src":"32535:47:21"}]}}]},"documentation":{"id":6396,"nodeType":"StructuredDocumentation","src":"32067:307:21","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits"},"id":6421,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32388:7:21","nodeType":"FunctionDefinition","parameters":{"id":6399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6398,"mutability":"mutable","name":"value","nameLocation":"32403:5:21","nodeType":"VariableDeclaration","scope":6421,"src":"32396:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6397,"name":"int256","nodeType":"ElementaryTypeName","src":"32396:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32395:14:21"},"returnParameters":{"id":6402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6401,"mutability":"mutable","name":"downcasted","nameLocation":"32439:10:21","nodeType":"VariableDeclaration","scope":6421,"src":"32433:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":6400,"name":"int32","nodeType":"ElementaryTypeName","src":"32433:5:21","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32432:18:21"},"scope":6540,"src":"32379:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6446,"nodeType":"Block","src":"32989:148:21","statements":[{"expression":{"id":6434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6429,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6427,"src":"32999:10:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6424,"src":"33018:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33012:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":6430,"name":"int24","nodeType":"ElementaryTypeName","src":"33012:5:21","typeDescriptions":{}}},"id":6433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33012:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"32999:25:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":6435,"nodeType":"ExpressionStatement","src":"32999:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6436,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6427,"src":"33038:10:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6437,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6424,"src":"33052:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33038:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6445,"nodeType":"IfStatement","src":"33034:97:21","trueBody":{"id":6444,"nodeType":"Block","src":"33059:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3234","id":6440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33110:2:21","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},{"id":6441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6424,"src":"33114:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6439,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"33080:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33080:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6443,"nodeType":"RevertStatement","src":"33073:47:21"}]}}]},"documentation":{"id":6422,"nodeType":"StructuredDocumentation","src":"32605:307:21","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits"},"id":6447,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"32926:7:21","nodeType":"FunctionDefinition","parameters":{"id":6425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6424,"mutability":"mutable","name":"value","nameLocation":"32941:5:21","nodeType":"VariableDeclaration","scope":6447,"src":"32934:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6423,"name":"int256","nodeType":"ElementaryTypeName","src":"32934:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32933:14:21"},"returnParameters":{"id":6428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6427,"mutability":"mutable","name":"downcasted","nameLocation":"32977:10:21","nodeType":"VariableDeclaration","scope":6447,"src":"32971:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":6426,"name":"int24","nodeType":"ElementaryTypeName","src":"32971:5:21","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"32970:18:21"},"scope":6540,"src":"32917:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6472,"nodeType":"Block","src":"33527:148:21","statements":[{"expression":{"id":6460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6455,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6453,"src":"33537:10:21","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6450,"src":"33556:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33550:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":6456,"name":"int16","nodeType":"ElementaryTypeName","src":"33550:5:21","typeDescriptions":{}}},"id":6459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33550:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33537:25:21","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":6461,"nodeType":"ExpressionStatement","src":"33537:25:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6462,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6453,"src":"33576:10:21","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6450,"src":"33590:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33576:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6471,"nodeType":"IfStatement","src":"33572:97:21","trueBody":{"id":6470,"nodeType":"Block","src":"33597:72:21","statements":[{"errorCall":{"arguments":[{"hexValue":"3136","id":6466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"33648:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},{"id":6467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6450,"src":"33652:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6465,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"33618:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33618:40:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6469,"nodeType":"RevertStatement","src":"33611:47:21"}]}}]},"documentation":{"id":6448,"nodeType":"StructuredDocumentation","src":"33143:307:21","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits"},"id":6473,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33464:7:21","nodeType":"FunctionDefinition","parameters":{"id":6451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6450,"mutability":"mutable","name":"value","nameLocation":"33479:5:21","nodeType":"VariableDeclaration","scope":6473,"src":"33472:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6449,"name":"int256","nodeType":"ElementaryTypeName","src":"33472:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33471:14:21"},"returnParameters":{"id":6454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6453,"mutability":"mutable","name":"downcasted","nameLocation":"33515:10:21","nodeType":"VariableDeclaration","scope":6473,"src":"33509:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":6452,"name":"int16","nodeType":"ElementaryTypeName","src":"33509:5:21","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33508:18:21"},"scope":6540,"src":"33455:220:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6498,"nodeType":"Block","src":"34058:146:21","statements":[{"expression":{"id":6486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6481,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6479,"src":"34068:10:21","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6476,"src":"34086:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34081:4:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":6482,"name":"int8","nodeType":"ElementaryTypeName","src":"34081:4:21","typeDescriptions":{}}},"id":6485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34081:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34068:24:21","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":6487,"nodeType":"ExpressionStatement","src":"34068:24:21"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6488,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6479,"src":"34106:10:21","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6476,"src":"34120:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34106:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6497,"nodeType":"IfStatement","src":"34102:96:21","trueBody":{"id":6496,"nodeType":"Block","src":"34127:71:21","statements":[{"errorCall":{"arguments":[{"hexValue":"38","id":6492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"34178:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"id":6493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6476,"src":"34181:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6491,"name":"SafeCastOverflowedIntDowncast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4797,"src":"34148:29:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint8_$_t_int256_$returns$__$","typeString":"function (uint8,int256) pure"}},"id":6494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34148:39:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6495,"nodeType":"RevertStatement","src":"34141:46:21"}]}}]},"documentation":{"id":6474,"nodeType":"StructuredDocumentation","src":"33681:302:21","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits"},"id":6499,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"33997:6:21","nodeType":"FunctionDefinition","parameters":{"id":6477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6476,"mutability":"mutable","name":"value","nameLocation":"34011:5:21","nodeType":"VariableDeclaration","scope":6499,"src":"34004:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6475,"name":"int256","nodeType":"ElementaryTypeName","src":"34004:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34003:14:21"},"returnParameters":{"id":6480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6479,"mutability":"mutable","name":"downcasted","nameLocation":"34046:10:21","nodeType":"VariableDeclaration","scope":6499,"src":"34041:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":6478,"name":"int8","nodeType":"ElementaryTypeName","src":"34041:4:21","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34040:17:21"},"scope":6540,"src":"33988:216:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6528,"nodeType":"Block","src":"34444:250:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6502,"src":"34557:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":6512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34578:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":6511,"name":"int256","nodeType":"ElementaryTypeName","src":"34578:6:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":6510,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"34573:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34573:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":6514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"34586:3:21","memberName":"max","nodeType":"MemberAccess","src":"34573:16:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34565:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6508,"name":"uint256","nodeType":"ElementaryTypeName","src":"34565:7:21","typeDescriptions":{}}},"id":6515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34565:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34557:33:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6522,"nodeType":"IfStatement","src":"34553:105:21","trueBody":{"id":6521,"nodeType":"Block","src":"34592:66:21","statements":[{"errorCall":{"arguments":[{"id":6518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6502,"src":"34641:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6517,"name":"SafeCastOverflowedUintToInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"34613:27:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":6519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34613:34:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6520,"nodeType":"RevertStatement","src":"34606:41:21"}]}},{"expression":{"arguments":[{"id":6525,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6502,"src":"34681:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34674:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":6523,"name":"int256","nodeType":"ElementaryTypeName","src":"34674:6:21","typeDescriptions":{}}},"id":6526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"34674:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":6506,"id":6527,"nodeType":"Return","src":"34667:20:21"}]},"documentation":{"id":6500,"nodeType":"StructuredDocumentation","src":"34210:165:21","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256."},"id":6529,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34389:8:21","nodeType":"FunctionDefinition","parameters":{"id":6503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6502,"mutability":"mutable","name":"value","nameLocation":"34406:5:21","nodeType":"VariableDeclaration","scope":6529,"src":"34398:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6501,"name":"uint256","nodeType":"ElementaryTypeName","src":"34398:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34397:15:21"},"returnParameters":{"id":6506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6529,"src":"34436:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6504,"name":"int256","nodeType":"ElementaryTypeName","src":"34436:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34435:8:21"},"scope":6540,"src":"34380:314:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6538,"nodeType":"Block","src":"34853:87:21","statements":[{"AST":{"nodeType":"YulBlock","src":"34888:46:21","statements":[{"nodeType":"YulAssignment","src":"34902:22:21","value":{"arguments":[{"arguments":[{"name":"b","nodeType":"YulIdentifier","src":"34921:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"34914:6:21"},"nodeType":"YulFunctionCall","src":"34914:9:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"34907:6:21"},"nodeType":"YulFunctionCall","src":"34907:17:21"},"variableNames":[{"name":"u","nodeType":"YulIdentifier","src":"34902:1:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":6532,"isOffset":false,"isSlot":false,"src":"34921:1:21","valueSize":1},{"declaration":6535,"isOffset":false,"isSlot":false,"src":"34902:1:21","valueSize":1}],"flags":["memory-safe"],"id":6537,"nodeType":"InlineAssembly","src":"34863:71:21"}]},"documentation":{"id":6530,"nodeType":"StructuredDocumentation","src":"34700:90:21","text":" @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump."},"id":6539,"implemented":true,"kind":"function","modifiers":[],"name":"toUint","nameLocation":"34804:6:21","nodeType":"FunctionDefinition","parameters":{"id":6533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6532,"mutability":"mutable","name":"b","nameLocation":"34816:1:21","nodeType":"VariableDeclaration","scope":6539,"src":"34811:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6531,"name":"bool","nodeType":"ElementaryTypeName","src":"34811:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"34810:8:21"},"returnParameters":{"id":6536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6535,"mutability":"mutable","name":"u","nameLocation":"34850:1:21","nodeType":"VariableDeclaration","scope":6539,"src":"34842:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6534,"name":"uint256","nodeType":"ElementaryTypeName","src":"34842:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34841:11:21"},"scope":6540,"src":"34795:145:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6541,"src":"769:34173:21","usedErrors":[4785,4790,4797,4802],"usedEvents":[]}],"src":"192:34751:21"},"id":21},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SafeCast":[6540],"SignedMath":[6684]},"id":6685,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6542,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:22"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"./SafeCast.sol","id":6544,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6685,"sourceUnit":6541,"src":"135:40:22","symbolAliases":[{"foreign":{"id":6543,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"143:8:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":6545,"nodeType":"StructuredDocumentation","src":"177:80:22","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":6684,"linearizedBaseContracts":[6684],"name":"SignedMath","nameLocation":"266:10:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":6574,"nodeType":"Block","src":"746:215:22","statements":[{"id":6573,"nodeType":"UncheckedBlock","src":"756:199:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6557,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6552,"src":"894:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6558,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6550,"src":"900:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":6559,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6552,"src":"904:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"900:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6561,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"899:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"arguments":[{"id":6566,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6548,"src":"932:9:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":6564,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"916:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SafeCast_$6540_$","typeString":"type(library SafeCast)"}},"id":6565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"925:6:22","memberName":"toUint","nodeType":"MemberAccess","referencedDeclaration":6539,"src":"916:15:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$returns$_t_uint256_$","typeString":"function (bool) pure returns (uint256)"}},"id":6567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"909:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":6562,"name":"int256","nodeType":"ElementaryTypeName","src":"909:6:22","typeDescriptions":{}}},"id":6568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"909:34:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"899:44:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6570,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"898:46:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"894:50:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":6556,"id":6572,"nodeType":"Return","src":"887:57:22"}]}]},"documentation":{"id":6546,"nodeType":"StructuredDocumentation","src":"283:374:22","text":" @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n one branch when needed, making this function more expensive."},"id":6575,"implemented":true,"kind":"function","modifiers":[],"name":"ternary","nameLocation":"671:7:22","nodeType":"FunctionDefinition","parameters":{"id":6553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6548,"mutability":"mutable","name":"condition","nameLocation":"684:9:22","nodeType":"VariableDeclaration","scope":6575,"src":"679:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6547,"name":"bool","nodeType":"ElementaryTypeName","src":"679:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6550,"mutability":"mutable","name":"a","nameLocation":"702:1:22","nodeType":"VariableDeclaration","scope":6575,"src":"695:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6549,"name":"int256","nodeType":"ElementaryTypeName","src":"695:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":6552,"mutability":"mutable","name":"b","nameLocation":"712:1:22","nodeType":"VariableDeclaration","scope":6575,"src":"705:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6551,"name":"int256","nodeType":"ElementaryTypeName","src":"705:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"678:36:22"},"returnParameters":{"id":6556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6575,"src":"738:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6554,"name":"int256","nodeType":"ElementaryTypeName","src":"738:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"737:8:22"},"scope":6684,"src":"662:299:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6593,"nodeType":"Block","src":"1102:44:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6586,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6578,"src":"1127:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6587,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6580,"src":"1131:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1127:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6589,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6578,"src":"1134:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":6590,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6580,"src":"1137:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6585,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6575,"src":"1119:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":6591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1119:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":6584,"id":6592,"nodeType":"Return","src":"1112:27:22"}]},"documentation":{"id":6576,"nodeType":"StructuredDocumentation","src":"967:66:22","text":" @dev Returns the largest of two signed numbers."},"id":6594,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"1047:3:22","nodeType":"FunctionDefinition","parameters":{"id":6581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6578,"mutability":"mutable","name":"a","nameLocation":"1058:1:22","nodeType":"VariableDeclaration","scope":6594,"src":"1051:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6577,"name":"int256","nodeType":"ElementaryTypeName","src":"1051:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":6580,"mutability":"mutable","name":"b","nameLocation":"1068:1:22","nodeType":"VariableDeclaration","scope":6594,"src":"1061:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6579,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1050:20:22"},"returnParameters":{"id":6584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6594,"src":"1094:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6582,"name":"int256","nodeType":"ElementaryTypeName","src":"1094:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1093:8:22"},"scope":6684,"src":"1038:108:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6612,"nodeType":"Block","src":"1288:44:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6605,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6597,"src":"1313:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6606,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6599,"src":"1317:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1313:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":6608,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6597,"src":"1320:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},{"id":6609,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6599,"src":"1323:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_int256","typeString":"int256"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6604,"name":"ternary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6575,"src":"1305:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_int256_$_t_int256_$returns$_t_int256_$","typeString":"function (bool,int256,int256) pure returns (int256)"}},"id":6610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1305:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":6603,"id":6611,"nodeType":"Return","src":"1298:27:22"}]},"documentation":{"id":6595,"nodeType":"StructuredDocumentation","src":"1152:67:22","text":" @dev Returns the smallest of two signed numbers."},"id":6613,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"1233:3:22","nodeType":"FunctionDefinition","parameters":{"id":6600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6597,"mutability":"mutable","name":"a","nameLocation":"1244:1:22","nodeType":"VariableDeclaration","scope":6613,"src":"1237:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6596,"name":"int256","nodeType":"ElementaryTypeName","src":"1237:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":6599,"mutability":"mutable","name":"b","nameLocation":"1254:1:22","nodeType":"VariableDeclaration","scope":6613,"src":"1247:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6598,"name":"int256","nodeType":"ElementaryTypeName","src":"1247:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1236:20:22"},"returnParameters":{"id":6603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6613,"src":"1280:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6601,"name":"int256","nodeType":"ElementaryTypeName","src":"1280:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1279:8:22"},"scope":6684,"src":"1224:108:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6656,"nodeType":"Block","src":"1537:162:22","statements":[{"assignments":[6624],"declarations":[{"constant":false,"id":6624,"mutability":"mutable","name":"x","nameLocation":"1606:1:22","nodeType":"VariableDeclaration","scope":6656,"src":"1599:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6623,"name":"int256","nodeType":"ElementaryTypeName","src":"1599:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":6637,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6625,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6616,"src":"1611:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":6626,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6618,"src":"1615:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1611:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6628,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1610:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6629,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6616,"src":"1622:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":6630,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6618,"src":"1626:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1622:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6632,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1621:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":6633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1632:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1621:12:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6635,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1620:14:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1610:24:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"1599:35:22"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6638,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6624,"src":"1651:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":6643,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6624,"src":"1671:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1663:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6641,"name":"uint256","nodeType":"ElementaryTypeName","src":"1663:7:22","typeDescriptions":{}}},"id":6644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1663:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":6645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:3:22","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"1663:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1656:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":6639,"name":"int256","nodeType":"ElementaryTypeName","src":"1656:6:22","typeDescriptions":{}}},"id":6647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1656:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6648,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6616,"src":"1685:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":6649,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6618,"src":"1689:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1685:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6651,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1684:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1656:35:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6653,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1655:37:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1651:41:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":6622,"id":6655,"nodeType":"Return","src":"1644:48:22"}]},"documentation":{"id":6614,"nodeType":"StructuredDocumentation","src":"1338:126:22","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":6657,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"1478:7:22","nodeType":"FunctionDefinition","parameters":{"id":6619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6616,"mutability":"mutable","name":"a","nameLocation":"1493:1:22","nodeType":"VariableDeclaration","scope":6657,"src":"1486:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6615,"name":"int256","nodeType":"ElementaryTypeName","src":"1486:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":6618,"mutability":"mutable","name":"b","nameLocation":"1503:1:22","nodeType":"VariableDeclaration","scope":6657,"src":"1496:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6617,"name":"int256","nodeType":"ElementaryTypeName","src":"1496:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1485:20:22"},"returnParameters":{"id":6622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6657,"src":"1529:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6620,"name":"int256","nodeType":"ElementaryTypeName","src":"1529:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1528:8:22"},"scope":6684,"src":"1469:230:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":6682,"nodeType":"Block","src":"1843:767:22","statements":[{"id":6681,"nodeType":"UncheckedBlock","src":"1853:751:22","statements":[{"assignments":[6666],"declarations":[{"constant":false,"id":6666,"mutability":"mutable","name":"mask","nameLocation":"2424:4:22","nodeType":"VariableDeclaration","scope":6681,"src":"2417:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6665,"name":"int256","nodeType":"ElementaryTypeName","src":"2417:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":6670,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6667,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6660,"src":"2431:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":6668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2436:3:22","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"2431:8:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"2417:22:22"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":6675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6673,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6660,"src":"2576:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6674,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6666,"src":"2580:4:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2576:8:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":6676,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2575:10:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":6677,"name":"mask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6666,"src":"2588:4:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2575:17:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":6672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2567:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6671,"name":"uint256","nodeType":"ElementaryTypeName","src":"2567:7:22","typeDescriptions":{}}},"id":6679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2567:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6664,"id":6680,"nodeType":"Return","src":"2560:33:22"}]}]},"documentation":{"id":6658,"nodeType":"StructuredDocumentation","src":"1705:78:22","text":" @dev Returns the absolute unsigned value of a signed value."},"id":6683,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1797:3:22","nodeType":"FunctionDefinition","parameters":{"id":6661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6660,"mutability":"mutable","name":"n","nameLocation":"1808:1:22","nodeType":"VariableDeclaration","scope":6683,"src":"1801:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":6659,"name":"int256","nodeType":"ElementaryTypeName","src":"1801:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1800:10:22"},"returnParameters":{"id":6664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6683,"src":"1834:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6662,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1833:9:22"},"scope":6684,"src":"1788:822:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":6685,"src":"258:2354:22","usedErrors":[],"usedEvents":[]}],"src":"109:2504:22"},"id":22},"contracts/Base.sol":{"ast":{"absolutePath":"contracts/Base.sol","exportedSymbols":{"Base":[6871],"ContextUpgradeable":[1379],"IConfig":[7382],"Initializable":[253],"Math":[4775],"ReentrancyGuardUpgradeable":[1508],"SignedMath":[6684],"Strings":[3157]},"id":6872,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6686,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"31:23:23"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":6687,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6872,"sourceUnit":3158,"src":"56:51:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","id":6688,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6872,"sourceUnit":1380,"src":"108:74:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol","id":6689,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6872,"sourceUnit":1509,"src":"183:82:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interface/IConfig.sol","file":"./interface/IConfig.sol","id":6690,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6872,"sourceUnit":7383,"src":"266:33:23","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":6691,"name":"ContextUpgradeable","nameLocations":["327:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":1379,"src":"327:18:23"},"id":6692,"nodeType":"InheritanceSpecifier","src":"327:18:23"},{"baseName":{"id":6693,"name":"ReentrancyGuardUpgradeable","nameLocations":["347:26:23"],"nodeType":"IdentifierPath","referencedDeclaration":1508,"src":"347:26:23"},"id":6694,"nodeType":"InheritanceSpecifier","src":"347:26:23"}],"canonicalName":"Base","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6871,"linearizedBaseContracts":[6871,1508,1379,253],"name":"Base","nameLocation":"319:4:23","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":6695,"nodeType":"StructuredDocumentation","src":"380:36:23","text":"@notice The precision of the fee"},"functionSelector":"e63a391f","id":6698,"mutability":"constant","name":"FEE_PRECISION","nameLocation":"444:13:23","nodeType":"VariableDeclaration","scope":6871,"src":"421:42:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6696,"name":"uint64","nodeType":"ElementaryTypeName","src":"421:6:23","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"316536","id":6697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"460:3:23","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1e6"},"visibility":"public"},{"constant":true,"documentation":{"id":6699,"nodeType":"StructuredDocumentation","src":"470:34:23","text":"@notice The default admin role"},"functionSelector":"a217fddf","id":6702,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"533:18:23","nodeType":"VariableDeclaration","scope":6871,"src":"509:49:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"509:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":6701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"554:4:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"constant":true,"documentation":{"id":6703,"nodeType":"StructuredDocumentation","src":"565:36:23","text":"@notice The role for the tmelock"},"functionSelector":"f288a2e2","id":6708,"mutability":"constant","name":"TIMELOCK_ROLE","nameLocation":"630:13:23","nodeType":"VariableDeclaration","scope":6871,"src":"606:66:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6704,"name":"bytes32","nodeType":"ElementaryTypeName","src":"606:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"54494d454c4f434b5f524f4c45","id":6706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"656:15:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_f66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f05","typeString":"literal_string \"TIMELOCK_ROLE\""},"value":"TIMELOCK_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f05","typeString":"literal_string \"TIMELOCK_ROLE\""}],"id":6705,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"646:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"646:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"documentation":{"id":6709,"nodeType":"StructuredDocumentation","src":"683:34:23","text":"@notice The role for the admin"},"functionSelector":"75b238fc","id":6714,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"746:10:23","nodeType":"VariableDeclaration","scope":6871,"src":"722:60:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6710,"name":"bytes32","nodeType":"ElementaryTypeName","src":"722:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":6712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"769:12:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":6711,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"759:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:23:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"documentation":{"id":6715,"nodeType":"StructuredDocumentation","src":"789:36:23","text":"@notice The role for the backend"},"functionSelector":"92c2becc","id":6720,"mutability":"constant","name":"BACKEND_ROLE","nameLocation":"854:12:23","nodeType":"VariableDeclaration","scope":6871,"src":"830:64:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6716,"name":"bytes32","nodeType":"ElementaryTypeName","src":"830:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4241434b454e445f524f4c45","id":6718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"879:14:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_25cf2b509f2a7f322675b2a5322b182f44ad2c03ac941a0af17c9b178f5d5d5f","typeString":"literal_string \"BACKEND_ROLE\""},"value":"BACKEND_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_25cf2b509f2a7f322675b2a5322b182f44ad2c03ac941a0af17c9b178f5d5d5f","typeString":"literal_string \"BACKEND_ROLE\""}],"id":6717,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"869:9:23","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"869:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"documentation":{"id":6721,"nodeType":"StructuredDocumentation","src":"901:49:23","text":"@notice sveMetis vault initial deposit amount"},"functionSelector":"e52083c6","id":6724,"mutability":"constant","name":"INITIAL_DEPOSIT_AMOUNT","nameLocation":"979:22:23","nodeType":"VariableDeclaration","scope":6871,"src":"955:56:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6722,"name":"uint256","nodeType":"ElementaryTypeName","src":"955:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":6723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1004:7:23","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1"},"visibility":"public"},{"constant":false,"documentation":{"id":6725,"nodeType":"StructuredDocumentation","src":"1018:52:23","text":"@notice holds the address of the config contract"},"functionSelector":"79502c55","id":6728,"mutability":"mutable","name":"config","nameLocation":"1090:6:23","nodeType":"VariableDeclaration","scope":6871,"src":"1075:21:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"},"typeName":{"id":6727,"nodeType":"UserDefinedTypeName","pathNode":{"id":6726,"name":"IConfig","nameLocations":["1075:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":7382,"src":"1075:7:23"},"referencedDeclaration":7382,"src":"1075:7:23","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"visibility":"public"},{"constant":false,"id":6730,"mutability":"mutable","name":"internalCalling","nameLocation":"1119:15:23","nodeType":"VariableDeclaration","scope":6871,"src":"1103:31:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6729,"name":"address","nodeType":"ElementaryTypeName","src":"1103:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":6748,"nodeType":"Block","src":"1174:109:23","statements":[{"condition":{"id":6740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1188:35:23","subExpression":{"arguments":[{"id":6736,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6732,"src":"1204:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":6737,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"1210:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1210:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6734,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"1189:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"id":6735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1196:7:23","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":7346,"src":"1189:14:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":6739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1189:34:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6746,"nodeType":"IfStatement","src":"1184:80:23","trueBody":{"id":6745,"nodeType":"Block","src":"1225:39:23","statements":[{"expression":{"arguments":[{"id":6742,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6732,"src":"1248:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6741,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[6816,6856],"referencedDeclaration":6816,"src":"1237:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":6743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1237:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6744,"nodeType":"ExpressionStatement","src":"1237:16:23"}]}},{"id":6747,"nodeType":"PlaceholderStatement","src":"1275:1:23"}]},"id":6749,"name":"onlyRole","nameLocation":"1151:8:23","nodeType":"ModifierDefinition","parameters":{"id":6733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6732,"mutability":"mutable","name":"role","nameLocation":"1168:4:23","nodeType":"VariableDeclaration","scope":6749,"src":"1160:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1160:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1159:14:23"},"src":"1142:141:23","virtual":false,"visibility":"internal"},{"body":{"id":6756,"nodeType":"Block","src":"1316:52:23","statements":[{"expression":{"arguments":[{"id":6752,"name":"BACKEND_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6720,"src":"1337:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6751,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[6816,6856],"referencedDeclaration":6816,"src":"1326:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":6753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1326:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6754,"nodeType":"ExpressionStatement","src":"1326:24:23"},{"id":6755,"nodeType":"PlaceholderStatement","src":"1360:1:23"}]},"id":6757,"name":"onlyBackend","nameLocation":"1302:11:23","nodeType":"ModifierDefinition","parameters":{"id":6750,"nodeType":"ParameterList","parameters":[],"src":"1313:2:23"},"src":"1293:75:23","virtual":false,"visibility":"internal"},{"body":{"id":6781,"nodeType":"Block","src":"1421:166:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6762,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"1439:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1439:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6764,"name":"internalAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6759,"src":"1455:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1439:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e7465726e616c206f6e6c79","id":6766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1472:15:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_eebeb523c9e3101166dfc1fb3a28cc1c5592ce88964e61abe648ff637a234894","typeString":"literal_string \"internal only\""},"value":"internal only"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eebeb523c9e3101166dfc1fb3a28cc1c5592ce88964e61abe648ff637a234894","typeString":"literal_string \"internal only\""}],"id":6761,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1431:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1431:57:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6768,"nodeType":"ExpressionStatement","src":"1431:57:23"},{"expression":{"id":6771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6769,"name":"internalCalling","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6730,"src":"1498:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6770,"name":"internalAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6759,"src":"1516:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1498:33:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6772,"nodeType":"ExpressionStatement","src":"1498:33:23"},{"id":6773,"nodeType":"PlaceholderStatement","src":"1541:1:23"},{"expression":{"id":6779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6774,"name":"internalCalling","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6730,"src":"1552:15:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":6777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1578:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1570:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6775,"name":"address","nodeType":"ElementaryTypeName","src":"1570:7:23","typeDescriptions":{}}},"id":6778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1570:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1552:28:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6780,"nodeType":"ExpressionStatement","src":"1552:28:23"}]},"id":6782,"name":"internalOnly","nameLocation":"1383:12:23","nodeType":"ModifierDefinition","parameters":{"id":6760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6759,"mutability":"mutable","name":"internalAddress","nameLocation":"1404:15:23","nodeType":"VariableDeclaration","scope":6782,"src":"1396:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6758,"name":"address","nodeType":"ElementaryTypeName","src":"1396:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1395:25:23"},"src":"1374:213:23","virtual":false,"visibility":"internal"},{"body":{"id":6802,"nodeType":"Block","src":"1789:102:23","statements":[{"expression":{"id":6794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6790,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"1799:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6792,"name":"_config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6785,"src":"1816:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6791,"name":"IConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7382,"src":"1808:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IConfig_$7382_$","typeString":"type(contract IConfig)"}},"id":6793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1808:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"src":"1799:25:23","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"id":6795,"nodeType":"ExpressionStatement","src":"1799:25:23"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6796,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"1834:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1834:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6798,"nodeType":"ExpressionStatement","src":"1834:24:23"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6799,"name":"__Context_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"1868:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":6800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1868:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6801,"nodeType":"ExpressionStatement","src":"1868:16:23"}]},"documentation":{"id":6783,"nodeType":"StructuredDocumentation","src":"1593:127:23","text":"@notice Initializes the contract with the config contract address\n @param _config The address of the config contract"},"id":6803,"implemented":true,"kind":"function","modifiers":[{"id":6788,"kind":"modifierInvocation","modifierName":{"id":6787,"name":"onlyInitializing","nameLocations":["1772:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":162,"src":"1772:16:23"},"nodeType":"ModifierInvocation","src":"1772:16:23"}],"name":"__Base_init","nameLocation":"1734:11:23","nodeType":"FunctionDefinition","parameters":{"id":6786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6785,"mutability":"mutable","name":"_config","nameLocation":"1754:7:23","nodeType":"VariableDeclaration","scope":6803,"src":"1746:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6784,"name":"address","nodeType":"ElementaryTypeName","src":"1746:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1745:17:23"},"returnParameters":{"id":6789,"nodeType":"ParameterList","parameters":[],"src":"1789:0:23"},"scope":6871,"src":"1725:166:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6815,"nodeType":"Block","src":"2032:47:23","statements":[{"expression":{"arguments":[{"id":6810,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6806,"src":"2053:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":6811,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"2059:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":6812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2059:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6809,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[6816,6856],"referencedDeclaration":6856,"src":"2042:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":6813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2042:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6814,"nodeType":"ExpressionStatement","src":"2042:30:23"}]},"documentation":{"id":6804,"nodeType":"StructuredDocumentation","src":"1895:76:23","text":"@dev Revert with a standard message if `_msgSender()` is missing `role`."},"id":6816,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"1985:10:23","nodeType":"FunctionDefinition","parameters":{"id":6807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6806,"mutability":"mutable","name":"role","nameLocation":"2004:4:23","nodeType":"VariableDeclaration","scope":6816,"src":"1996:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1996:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1995:14:23"},"returnParameters":{"id":6808,"nodeType":"ParameterList","parameters":[],"src":"2032:0:23"},"scope":6871,"src":"1976:103:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":6855,"nodeType":"Block","src":"2433:413:23","statements":[{"condition":{"id":6829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2447:30:23","subExpression":{"arguments":[{"id":6826,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6819,"src":"2463:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6827,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6821,"src":"2469:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6824,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"2448:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"id":6825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2455:7:23","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":7346,"src":"2448:14:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":6828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2448:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6854,"nodeType":"IfStatement","src":"2443:397:23","trueBody":{"id":6853,"nodeType":"Block","src":"2479:361:23","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":6835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2587:25:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":6838,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6821,"src":"2658:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6836,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"2638:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3157_$","typeString":"type(library Strings)"}},"id":6837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2646:11:23","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3054,"src":"2638:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":6839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2638:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":6840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2692:19:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":6845,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6819,"src":"2765:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":6844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2757:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6843,"name":"uint256","nodeType":"ElementaryTypeName","src":"2757:7:23","typeDescriptions":{}}},"id":6846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2757:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":6847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2772:2:23","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":6841,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"2737:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3157_$","typeString":"type(library Strings)"}},"id":6842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2745:11:23","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"2737:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":6848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2737:38:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":6833,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2545:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6834,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2549:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"2545:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2545:252:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":6831,"name":"string","nodeType":"ElementaryTypeName","src":"2517:6:23","typeDescriptions":{}}},"id":6850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:298:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6830,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[4294967277,4294967277],"referencedDeclaration":4294967277,"src":"2493:6:23","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":6851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:336:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6852,"nodeType":"ExpressionStatement","src":"2493:336:23"}]}}]},"documentation":{"id":6817,"nodeType":"StructuredDocumentation","src":"2085:270:23","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":6856,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"2369:10:23","nodeType":"FunctionDefinition","parameters":{"id":6822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6819,"mutability":"mutable","name":"role","nameLocation":"2388:4:23","nodeType":"VariableDeclaration","scope":6856,"src":"2380:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6818,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2380:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":6821,"mutability":"mutable","name":"account","nameLocation":"2402:7:23","nodeType":"VariableDeclaration","scope":6856,"src":"2394:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6820,"name":"address","nodeType":"ElementaryTypeName","src":"2394:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2379:31:23"},"returnParameters":{"id":6823,"nodeType":"ParameterList","parameters":[],"src":"2433:0:23"},"scope":6871,"src":"2360:486:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":6864,"nodeType":"Block","src":"2924:59:23","statements":[{"expression":{"arguments":[{"hexValue":"426173653a206e6f7420737570706f7274204d65746973207472616e73666572","id":6861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2941:34:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032","typeString":"literal_string \"Base: not support Metis transfer\""},"value":"Base: not support Metis transfer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032","typeString":"literal_string \"Base: not support Metis transfer\""}],"id":6860,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[4294967277,4294967277],"referencedDeclaration":4294967277,"src":"2934:6:23","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":6862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2934:42:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6863,"nodeType":"ExpressionStatement","src":"2934:42:23"}]},"documentation":{"id":6857,"nodeType":"StructuredDocumentation","src":"2852:40:23","text":" reject Metis transfer"},"id":6865,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6858,"nodeType":"ParameterList","parameters":[],"src":"2904:2:23"},"returnParameters":{"id":6859,"nodeType":"ParameterList","parameters":[],"src":"2924:0:23"},"scope":6871,"src":"2897:86:23","stateMutability":"payable","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":6866,"nodeType":"StructuredDocumentation","src":"2989:254:23","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":6870,"mutability":"mutable","name":"__gap","nameLocation":"3268:5:23","nodeType":"VariableDeclaration","scope":6871,"src":"3248:25:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$30_storage","typeString":"uint256[30]"},"typeName":{"baseType":{"id":6867,"name":"uint256","nodeType":"ElementaryTypeName","src":"3248:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6869,"length":{"hexValue":"3330","id":6868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3256:2:23","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},"nodeType":"ArrayTypeName","src":"3248:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$30_storage_ptr","typeString":"uint256[30]"}},"visibility":"private"}],"scope":6872,"src":"301:2975:23","usedErrors":[16,19,1410],"usedEvents":[24]}],"src":"31:3246:23"},"id":23},"contracts/RedemptionQueue.sol":{"ast":{"absolutePath":"contracts/RedemptionQueue.sol","exportedSymbols":{"Address":[2763],"Base":[6871],"ContextUpgradeable":[1379],"ERC165Upgradeable":[1548],"ERC721Upgradeable":[1333],"ERC721Utils":[2504],"IConfig":[7382],"IERC1363":[1630],"IERC165":[3169],"IERC20":[1853],"IERC721":[2381],"IERC721Errors":[1728],"IERC721Metadata":[2427],"IVeMetis":[7403],"Initializable":[253],"Math":[4775],"RedemptionQueue":[7262],"ReentrancyGuardUpgradeable":[1508],"SafeCast":[6540],"SafeERC20":[2264],"SignedMath":[6684],"Strings":[3157]},"id":7263,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6873,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"33:23:24"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":6874,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7263,"sourceUnit":254,"src":"57:75:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol","id":6875,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7263,"sourceUnit":1334,"src":"133:80:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":6876,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7263,"sourceUnit":1854,"src":"214:56:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":6877,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7263,"sourceUnit":2265,"src":"271:65:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"@openzeppelin/contracts/utils/math/SafeCast.sol","id":6879,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7263,"sourceUnit":6541,"src":"337:75:24","symbolAliases":[{"foreign":{"id":6878,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6540,"src":"346:8:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/Base.sol","file":"./Base.sol","id":6880,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7263,"sourceUnit":6872,"src":"413:20:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interface/IVeMetis.sol","file":"./interface/IVeMetis.sol","id":6881,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7263,"sourceUnit":7404,"src":"434:34:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6883,"name":"Initializable","nameLocations":["615:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":253,"src":"615:13:24"},"id":6884,"nodeType":"InheritanceSpecifier","src":"615:13:24"},{"baseName":{"id":6885,"name":"ERC721Upgradeable","nameLocations":["630:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"630:17:24"},"id":6886,"nodeType":"InheritanceSpecifier","src":"630:17:24"},{"baseName":{"id":6887,"name":"Base","nameLocations":["649:4:24"],"nodeType":"IdentifierPath","referencedDeclaration":6871,"src":"649:4:24"},"id":6888,"nodeType":"InheritanceSpecifier","src":"649:4:24"}],"canonicalName":"RedemptionQueue","contractDependencies":[],"contractKind":"contract","documentation":{"id":6882,"nodeType":"StructuredDocumentation","src":"470:117:24","text":"@title RedemptionQueue\n @notice RedemptionQueue is the contract that manages the redemption queue for veMetis"},"fullyImplemented":true,"id":7262,"linearizedBaseContracts":[7262,6871,1508,1333,1728,2427,2381,1548,3169,1379,253],"name":"RedemptionQueue","nameLocation":"596:15:24","nodeType":"ContractDefinition","nodes":[{"global":false,"id":6892,"libraryName":{"id":6889,"name":"SafeERC20","nameLocations":["666:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":2264,"src":"666:9:24"},"nodeType":"UsingForDirective","src":"660:27:24","typeName":{"id":6891,"nodeType":"UserDefinedTypeName","pathNode":{"id":6890,"name":"IERC20","nameLocations":["680:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"680:6:24"},"referencedDeclaration":1853,"src":"680:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}}},{"global":false,"id":6894,"libraryName":{"id":6893,"name":"SafeCast","nameLocations":["698:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":6540,"src":"698:8:24"},"nodeType":"UsingForDirective","src":"692:21:24"},{"canonicalName":"RedemptionQueue.RedemptionQueueItem","documentation":{"id":6895,"nodeType":"StructuredDocumentation","src":"719:291:24","text":"@notice The ```RedemptionQueueItem``` struct provides metadata information about each Nft\n @param hasBeenRedeemed boolean for whether the NFT has been redeemed\n @param amount How much Metis is claimable\n @param maturity Unix timestamp when they can claim their Metis"},"id":6902,"members":[{"constant":false,"id":6897,"mutability":"mutable","name":"hasBeenRedeemed","nameLocation":"1057:15:24","nodeType":"VariableDeclaration","scope":6902,"src":"1052:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6896,"name":"bool","nodeType":"ElementaryTypeName","src":"1052:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6899,"mutability":"mutable","name":"maturity","nameLocation":"1089:8:24","nodeType":"VariableDeclaration","scope":6902,"src":"1082:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6898,"name":"uint64","nodeType":"ElementaryTypeName","src":"1082:6:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":6901,"mutability":"mutable","name":"amount","nameLocation":"1115:6:24","nodeType":"VariableDeclaration","scope":6902,"src":"1107:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":6900,"name":"uint120","nodeType":"ElementaryTypeName","src":"1107:7:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"name":"RedemptionQueueItem","nameLocation":"1022:19:24","nodeType":"StructDefinition","scope":7262,"src":"1015:113:24","visibility":"public"},{"canonicalName":"RedemptionQueue.RedemptionQueueAccounting","documentation":{"id":6903,"nodeType":"StructuredDocumentation","src":"1134:193:24","text":"@param etherLiabilities How much Metis would need to be paid out if every NFT holder could claim immediately\n @param unclaimedFees Earned fees that the protocol has not collected yet"},"id":6908,"members":[{"constant":false,"id":6905,"mutability":"mutable","name":"etherLiabilities","nameLocation":"1383:16:24","nodeType":"VariableDeclaration","scope":6908,"src":"1375:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":6904,"name":"uint128","nodeType":"ElementaryTypeName","src":"1375:7:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":6907,"mutability":"mutable","name":"unclaimedFees","nameLocation":"1417:13:24","nodeType":"VariableDeclaration","scope":6908,"src":"1409:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":6906,"name":"uint128","nodeType":"ElementaryTypeName","src":"1409:7:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"name":"RedemptionQueueAccounting","nameLocation":"1339:25:24","nodeType":"StructDefinition","scope":7262,"src":"1332:105:24","visibility":"public"},{"constant":false,"id":6910,"mutability":"mutable","name":"nextNftId","nameLocation":"1450:9:24","nodeType":"VariableDeclaration","scope":7262,"src":"1443:16:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6909,"name":"uint64","nodeType":"ElementaryTypeName","src":"1443:6:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"documentation":{"id":6911,"nodeType":"StructuredDocumentation","src":"1466:39:24","text":"@notice Accounting redemption queue"},"functionSelector":"103cf9e3","id":6914,"mutability":"mutable","name":"redemptionQueueAccounting","nameLocation":"1543:25:24","nodeType":"VariableDeclaration","scope":7262,"src":"1510:58:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueAccounting_$6908_storage","typeString":"struct RedemptionQueue.RedemptionQueueAccounting"},"typeName":{"id":6913,"nodeType":"UserDefinedTypeName","pathNode":{"id":6912,"name":"RedemptionQueueAccounting","nameLocations":["1510:25:24"],"nodeType":"IdentifierPath","referencedDeclaration":6908,"src":"1510:25:24"},"referencedDeclaration":6908,"src":"1510:25:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueAccounting_$6908_storage_ptr","typeString":"struct RedemptionQueue.RedemptionQueueAccounting"}},"visibility":"public"},{"constant":false,"documentation":{"id":6915,"nodeType":"StructuredDocumentation","src":"1575:60:24","text":"@notice Information about a user's redemption ticket NFT"},"functionSelector":"16b79639","id":6920,"mutability":"mutable","name":"nftInformation","nameLocation":"1693:14:24","nodeType":"VariableDeclaration","scope":7262,"src":"1640:67:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RedemptionQueueItem_$6902_storage_$","typeString":"mapping(uint256 => struct RedemptionQueue.RedemptionQueueItem)"},"typeName":{"id":6919,"keyName":"nftId","keyNameLocation":"1656:5:24","keyType":{"id":6916,"name":"uint256","nodeType":"ElementaryTypeName","src":"1648:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1640:45:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RedemptionQueueItem_$6902_storage_$","typeString":"mapping(uint256 => struct RedemptionQueue.RedemptionQueueItem)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6918,"nodeType":"UserDefinedTypeName","pathNode":{"id":6917,"name":"RedemptionQueueItem","nameLocations":["1665:19:24"],"nodeType":"IdentifierPath","referencedDeclaration":6902,"src":"1665:19:24"},"referencedDeclaration":6902,"src":"1665:19:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem"}}},"visibility":"public"},{"constant":false,"functionSelector":"9336ce80","id":6923,"mutability":"mutable","name":"veMetis","nameLocation":"1728:7:24","nodeType":"VariableDeclaration","scope":7262,"src":"1714:21:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":6922,"nodeType":"UserDefinedTypeName","pathNode":{"id":6921,"name":"IERC20","nameLocations":["1714:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"1714:6:24"},"referencedDeclaration":1853,"src":"1714:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"f0dadf2e","id":6926,"mutability":"mutable","name":"METIS","nameLocation":"1755:5:24","nodeType":"VariableDeclaration","scope":7262,"src":"1741:19:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"},"typeName":{"id":6925,"nodeType":"UserDefinedTypeName","pathNode":{"id":6924,"name":"IERC20","nameLocations":["1741:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"1741:6:24"},"referencedDeclaration":1853,"src":"1741:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"visibility":"public"},{"anonymous":false,"documentation":{"id":6927,"nodeType":"StructuredDocumentation","src":"1771:256:24","text":"@notice When someone redeems their NFT for Metis\n @param nftId the if of the nft redeemed\n @param sender the msg.sender\n @param recipient the recipient of the ether\n @param amountOut the amount of ether sent to the recipient"},"eventSelector":"2bb34f95ef23b2c81d8c149136c7ebb303c6525e5795d78e15be628068b2e5d2","id":6937,"name":"RedeemRedemptionTicketNft","nameLocation":"2038:25:24","nodeType":"EventDefinition","parameters":{"id":6936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6929,"indexed":true,"mutability":"mutable","name":"nftId","nameLocation":"2080:5:24","nodeType":"VariableDeclaration","scope":6937,"src":"2064:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6928,"name":"uint256","nodeType":"ElementaryTypeName","src":"2064:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6931,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2103:6:24","nodeType":"VariableDeclaration","scope":6937,"src":"2087:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6930,"name":"address","nodeType":"ElementaryTypeName","src":"2087:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6933,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2127:9:24","nodeType":"VariableDeclaration","scope":6937,"src":"2111:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6932,"name":"address","nodeType":"ElementaryTypeName","src":"2111:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6935,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"2147:9:24","nodeType":"VariableDeclaration","scope":6937,"src":"2139:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":6934,"name":"uint120","nodeType":"ElementaryTypeName","src":"2139:7:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"2063:94:24"},"src":"2032:126:24"},{"anonymous":false,"documentation":{"id":6938,"nodeType":"StructuredDocumentation","src":"2164:287:24","text":"@notice When someone enters the redemption queue\n @param nftId The ID of the NFT\n @param sender The address of the msg.sender, who is redeeming veMetis\n @param recipient The recipient of the NFT\n @param amountVeMetisRedeemed The amount of veMetis redeemed"},"eventSelector":"c0d0e4dc9b213313c7ee4b0ef42d8c64029a48a77f2e72cf58595683a90ec5fb","id":6950,"name":"EnterRedemptionQueue","nameLocation":"2462:20:24","nodeType":"EventDefinition","parameters":{"id":6949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6940,"indexed":true,"mutability":"mutable","name":"nftId","nameLocation":"2508:5:24","nodeType":"VariableDeclaration","scope":6950,"src":"2492:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2492:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6942,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2539:6:24","nodeType":"VariableDeclaration","scope":6950,"src":"2523:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6941,"name":"address","nodeType":"ElementaryTypeName","src":"2523:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6944,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2571:9:24","nodeType":"VariableDeclaration","scope":6950,"src":"2555:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6943,"name":"address","nodeType":"ElementaryTypeName","src":"2555:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6946,"indexed":false,"mutability":"mutable","name":"amountVeMetisRedeemed","nameLocation":"2598:21:24","nodeType":"VariableDeclaration","scope":6950,"src":"2590:29:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6945,"name":"uint256","nodeType":"ElementaryTypeName","src":"2590:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6948,"indexed":false,"mutability":"mutable","name":"maturityTimestamp","nameLocation":"2637:17:24","nodeType":"VariableDeclaration","scope":6950,"src":"2629:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6947,"name":"uint256","nodeType":"ElementaryTypeName","src":"2629:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2482:178:24"},"src":"2456:205:24"},{"body":{"id":6982,"nodeType":"Block","src":"2723:200:24","statements":[{"expression":{"arguments":[{"id":6958,"name":"_config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6952,"src":"2745:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6957,"name":"__Base_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6803,"src":"2733:11:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":6959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2733:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6960,"nodeType":"ExpressionStatement","src":"2733:20:24"},{"expression":{"arguments":[{"hexValue":"76654d65746973526564656d7074696f6e5469636b6574","id":6962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2777:25:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_f5b99aefa828736d03b2b06a691b82b6921277e71e4ef3e7802de92e8e2ed8a8","typeString":"literal_string \"veMetisRedemptionTicket\""},"value":"veMetisRedemptionTicket"},{"hexValue":"76654d6574697320526564656d7074696f6e205469636b6574","id":6963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2804:27:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_1b1402d8ea1a3de02d1630443eda8983ee604c36dfabbf0e24d8f25d5d72eb27","typeString":"literal_string \"veMetis Redemption Ticket\""},"value":"veMetis Redemption Ticket"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f5b99aefa828736d03b2b06a691b82b6921277e71e4ef3e7802de92e8e2ed8a8","typeString":"literal_string \"veMetisRedemptionTicket\""},{"typeIdentifier":"t_stringliteral_1b1402d8ea1a3de02d1630443eda8983ee604c36dfabbf0e24d8f25d5d72eb27","typeString":"literal_string \"veMetis Redemption Ticket\""}],"id":6961,"name":"__ERC721_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"2763:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":6964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2763:69:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6965,"nodeType":"ExpressionStatement","src":"2763:69:24"},{"expression":{"id":6972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6966,"name":"METIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6926,"src":"2842:5:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6968,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"2857:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"id":6969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2864:5:24","memberName":"metis","nodeType":"MemberAccess","referencedDeclaration":7292,"src":"2857:12:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2857:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6967,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"2850:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1853_$","typeString":"type(contract IERC20)"}},"id":6971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"src":"2842:30:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":6973,"nodeType":"ExpressionStatement","src":"2842:30:24"},{"expression":{"id":6980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6974,"name":"veMetis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6923,"src":"2882:7:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6976,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"2899:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"id":6977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2906:7:24","memberName":"veMetis","nodeType":"MemberAccess","referencedDeclaration":7272,"src":"2899:14:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6975,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"2892:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1853_$","typeString":"type(contract IERC20)"}},"id":6979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2892:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"src":"2882:34:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":6981,"nodeType":"ExpressionStatement","src":"2882:34:24"}]},"functionSelector":"c4d66de8","id":6983,"implemented":true,"kind":"function","modifiers":[{"id":6955,"kind":"modifierInvocation","modifierName":{"id":6954,"name":"initializer","nameLocations":["2704:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":107,"src":"2704:11:24"},"nodeType":"ModifierInvocation","src":"2704:11:24"}],"name":"initialize","nameLocation":"2676:10:24","nodeType":"FunctionDefinition","parameters":{"id":6953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6952,"mutability":"mutable","name":"_config","nameLocation":"2695:7:24","nodeType":"VariableDeclaration","scope":6983,"src":"2687:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6951,"name":"address","nodeType":"ElementaryTypeName","src":"2687:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2686:17:24"},"returnParameters":{"id":6956,"nodeType":"ParameterList","parameters":[],"src":"2723:0:24"},"scope":7262,"src":"2667:256:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":7036,"nodeType":"Block","src":"4030:940:24","statements":[{"assignments":[6994],"declarations":[{"constant":false,"id":6994,"mutability":"mutable","name":"_maturityTimestamp","nameLocation":"4091:18:24","nodeType":"VariableDeclaration","scope":7036,"src":"4084:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":6993,"name":"uint64","nodeType":"ElementaryTypeName","src":"4084:6:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":7004,"initialValue":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":7003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":6997,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"4119:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4125:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"4119:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4112:6:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":6995,"name":"uint64","nodeType":"ElementaryTypeName","src":"4112:6:24","typeDescriptions":{}}},"id":6999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4112:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7000,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"4138:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"id":7001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4145:15:24","memberName":"queueLengthSecs","nodeType":"MemberAccess","referencedDeclaration":7322,"src":"4138:22:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint64_$","typeString":"function () view external returns (uint64)"}},"id":7002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:24:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"4112:50:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"4084:78:24"},{"expression":{"id":7013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7005,"name":"nftInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6920,"src":"4242:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RedemptionQueueItem_$6902_storage_$","typeString":"mapping(uint256 => struct RedemptionQueue.RedemptionQueueItem storage ref)"}},"id":7007,"indexExpression":{"id":7006,"name":"nextNftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"4257:9:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4242:25:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage","typeString":"struct RedemptionQueue.RedemptionQueueItem storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7009,"name":"_amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6988,"src":"4312:15:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},{"id":7010,"name":"_maturityTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6994,"src":"4351:18:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"66616c7365","id":7011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4400:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint120","typeString":"uint120"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":7008,"name":"RedemptionQueueItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6902,"src":"4270:19:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_RedemptionQueueItem_$6902_storage_ptr_$","typeString":"type(struct RedemptionQueue.RedemptionQueueItem storage pointer)"}},"id":7012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["4304:6:24","4341:8:24","4383:15:24"],"names":["amount","maturity","hasBeenRedeemed"],"nodeType":"FunctionCall","src":"4270:146:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"src":"4242:174:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage","typeString":"struct RedemptionQueue.RedemptionQueueItem storage ref"}},"id":7014,"nodeType":"ExpressionStatement","src":"4242:174:24"},{"expression":{"arguments":[{"id":7016,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6986,"src":"4536:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7017,"name":"nextNftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"4557:9:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":7015,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[995,1025],"referencedDeclaration":995,"src":"4520:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":7018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["4532:2:24","4548:7:24"],"names":["to","tokenId"],"nodeType":"FunctionCall","src":"4520:49:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7019,"nodeType":"ExpressionStatement","src":"4520:49:24"},{"expression":{"id":7022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7020,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6991,"src":"4626:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7021,"name":"nextNftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"4635:9:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"4626:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7023,"nodeType":"ExpressionStatement","src":"4626:18:24"},{"eventCall":{"arguments":[{"id":7025,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6991,"src":"4701:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7026,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"4729:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4733:6:24","memberName":"sender","nodeType":"MemberAccess","src":"4729:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7028,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6986,"src":"4764:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7029,"name":"_amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6988,"src":"4811:15:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},{"id":7030,"name":"_maturityTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6994,"src":"4859:18:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint120","typeString":"uint120"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":7024,"name":"EnterRedemptionQueue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6950,"src":"4659:20:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,address,uint256,uint256)"}},"id":7031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["4694:5:24","4721:6:24","4753:9:24","4788:21:24","4840:17:24"],"names":["nftId","sender","recipient","amountVeMetisRedeemed","maturityTimestamp"],"nodeType":"FunctionCall","src":"4659:229:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7032,"nodeType":"EmitStatement","src":"4654:234:24"},{"expression":{"id":7034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4952:11:24","subExpression":{"id":7033,"name":"nextNftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"4954:9:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":7035,"nodeType":"ExpressionStatement","src":"4952:11:24"}]},"documentation":{"id":6984,"nodeType":"StructuredDocumentation","src":"3403:508:24","text":"@notice Enter the queue for redeeming veMetis 1-to-1. Must approve first. Internal only so payor can be set\n @notice Will generate a veMetisRedemptionTicket NFT that can be redeemed for the actual Metis later.\n @param _recipient Recipient of the NFT. Must be ERC721 compatible if a contract\n @param _amountToRedeem Amount of veMetis to redeem\n @param _nftId The ID of the veMetisRedemptionTicket NFT\n @dev Must call approve/permit on veMetis contract prior to this call"},"id":7037,"implemented":true,"kind":"function","modifiers":[],"name":"_enterRedemptionQueueCore","nameLocation":"3925:25:24","nodeType":"FunctionDefinition","parameters":{"id":6989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6986,"mutability":"mutable","name":"_recipient","nameLocation":"3959:10:24","nodeType":"VariableDeclaration","scope":7037,"src":"3951:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6985,"name":"address","nodeType":"ElementaryTypeName","src":"3951:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6988,"mutability":"mutable","name":"_amountToRedeem","nameLocation":"3979:15:24","nodeType":"VariableDeclaration","scope":7037,"src":"3971:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":6987,"name":"uint120","nodeType":"ElementaryTypeName","src":"3971:7:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"3950:45:24"},"returnParameters":{"id":6992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6991,"mutability":"mutable","name":"_nftId","nameLocation":"4022:6:24","nodeType":"VariableDeclaration","scope":7037,"src":"4014:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6990,"name":"uint256","nodeType":"ElementaryTypeName","src":"4014:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4013:16:24"},"scope":7262,"src":"3916:1054:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7085,"nodeType":"Block","src":"5585:452:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7050,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7040,"src":"5603:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":7053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5625:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5617:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7051,"name":"address","nodeType":"ElementaryTypeName","src":"5617:7:24","typeDescriptions":{}}},"id":7054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5617:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5603:24:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526564656d7074696f6e51756575653a207a65726f2061646472657373","id":7056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5629:31:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6","typeString":"literal_string \"RedemptionQueue: zero address\""},"value":"RedemptionQueue: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6","typeString":"literal_string \"RedemptionQueue: zero address\""}],"id":7049,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5595:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5595:66:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7058,"nodeType":"ExpressionStatement","src":"5595:66:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint120","typeString":"uint120"},"id":7062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7060,"name":"_amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7042,"src":"5679:15:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5697:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5679:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526564656d7074696f6e51756575653a20616d6f756e74206973207a65726f","id":7063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5700:33:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833","typeString":"literal_string \"RedemptionQueue: amount is zero\""},"value":"RedemptionQueue: amount is zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833","typeString":"literal_string \"RedemptionQueue: amount is zero\""}],"id":7059,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5671:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5671:63:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7065,"nodeType":"ExpressionStatement","src":"5671:63:24"},{"expression":{"id":7071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7066,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7047,"src":"5806:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":7068,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7040,"src":"5841:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7069,"name":"_amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7042,"src":"5853:15:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint120","typeString":"uint120"}],"id":7067,"name":"_enterRedemptionQueueCore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7037,"src":"5815:25:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint120_$returns$_t_uint256_$","typeString":"function (address,uint120) returns (uint256)"}},"id":7070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5815:54:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5806:63:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7072,"nodeType":"ExpressionStatement","src":"5806:63:24"},{"expression":{"arguments":[{"expression":{"id":7076,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"5974:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5978:6:24","memberName":"sender","nodeType":"MemberAccess","src":"5974:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":7080,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5998:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_RedemptionQueue_$7262","typeString":"contract RedemptionQueue"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RedemptionQueue_$7262","typeString":"contract RedemptionQueue"}],"id":7079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5990:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7078,"name":"address","nodeType":"ElementaryTypeName","src":"5990:7:24","typeDescriptions":{}}},"id":7081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5990:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7082,"name":"_amountToRedeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7042,"src":"6012:15:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint120","typeString":"uint120"}],"expression":{"id":7073,"name":"veMetis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6923,"src":"5941:7:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":7075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5949:16:24","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1927,"src":"5941:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1853_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":7083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["5968:4:24","5986:2:24","6005:5:24"],"names":["from","to","value"],"nodeType":"FunctionCall","src":"5941:89:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7084,"nodeType":"ExpressionStatement","src":"5941:89:24"}]},"documentation":{"id":7038,"nodeType":"StructuredDocumentation","src":"4976:484:24","text":"@notice Enter the queue for redeeming veMetis 1-to-1. Must approve or permit first.\n @notice Will generate a veMetisRedemptionTicket NFT that can be redeemed for the actual Metis later.\n @param _recipient Recipient of the NFT. Must be ERC721 compatible if a contract\n @param _amountToRedeem Amount of veMetis to redeem\n @param _nftId The ID of the veMetisRedemptionTicket NFT\n @dev Must call approve/permit on veMetis contract prior to this call"},"functionSelector":"4f4798ae","id":7086,"implemented":true,"kind":"function","modifiers":[{"id":7045,"kind":"modifierInvocation","modifierName":{"id":7044,"name":"nonReentrant","nameLocations":["5547:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":1448,"src":"5547:12:24"},"nodeType":"ModifierInvocation","src":"5547:12:24"}],"name":"enterRedemptionQueue","nameLocation":"5474:20:24","nodeType":"FunctionDefinition","parameters":{"id":7043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7040,"mutability":"mutable","name":"_recipient","nameLocation":"5503:10:24","nodeType":"VariableDeclaration","scope":7086,"src":"5495:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7039,"name":"address","nodeType":"ElementaryTypeName","src":"5495:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7042,"mutability":"mutable","name":"_amountToRedeem","nameLocation":"5523:15:24","nodeType":"VariableDeclaration","scope":7086,"src":"5515:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":7041,"name":"uint120","nodeType":"ElementaryTypeName","src":"5515:7:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"5494:45:24"},"returnParameters":{"id":7048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7047,"mutability":"mutable","name":"_nftId","nameLocation":"5577:6:24","nodeType":"VariableDeclaration","scope":7086,"src":"5569:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7046,"name":"uint256","nodeType":"ElementaryTypeName","src":"5569:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5568:16:24"},"scope":7262,"src":"5465:572:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":7160,"nodeType":"Block","src":"6349:987:24","statements":[{"condition":{"id":7103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6410:78:24","subExpression":{"arguments":[{"arguments":[{"id":7097,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7089,"src":"6440:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7096,"name":"ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6432:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":7098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6432:15:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7099,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"6458:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6462:6:24","memberName":"sender","nodeType":"MemberAccess","src":"6458:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7101,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7089,"src":"6479:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7095,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"6411:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":7102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["6426:5:24","6449:7:24","6470:7:24"],"names":["owner","spender","tokenId"],"nodeType":"FunctionCall","src":"6411:77:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7107,"nodeType":"IfStatement","src":"6406:123:24","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7104,"name":"Erc721CallerNotOwnerOrApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7230,"src":"6497:30:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6497:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7106,"nodeType":"RevertStatement","src":"6490:39:24"}},{"expression":{"id":7112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7108,"name":"_redemptionQueueItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7093,"src":"6573:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":7109,"name":"nftInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6920,"src":"6596:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RedemptionQueueItem_$6902_storage_$","typeString":"mapping(uint256 => struct RedemptionQueue.RedemptionQueueItem storage ref)"}},"id":7111,"indexExpression":{"id":7110,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7089,"src":"6611:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6596:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage","typeString":"struct RedemptionQueue.RedemptionQueueItem storage ref"}},"src":"6573:45:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"id":7113,"nodeType":"ExpressionStatement","src":"6573:45:24"},{"condition":{"expression":{"id":7114,"name":"_redemptionQueueItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7093,"src":"6678:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"id":7115,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6699:15:24","memberName":"hasBeenRedeemed","nodeType":"MemberAccess","referencedDeclaration":6897,"src":"6678:36:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7120,"nodeType":"IfStatement","src":"6674:91:24","trueBody":{"id":7119,"nodeType":"Block","src":"6716:49:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7116,"name":"AlreadyRedeemed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7250,"src":"6737:15:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6737:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7118,"nodeType":"RevertStatement","src":"6730:24:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7121,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"6829:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6835:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"6829:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7123,"name":"_redemptionQueueItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7093,"src":"6847:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"id":7124,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6868:8:24","memberName":"maturity","nodeType":"MemberAccess","referencedDeclaration":6899,"src":"6847:29:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6829:47:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7134,"nodeType":"IfStatement","src":"6825:172:24","trueBody":{"id":7133,"nodeType":"Block","src":"6878:119:24","statements":[{"errorCall":{"arguments":[{"expression":{"id":7127,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967292,"src":"6927:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6933:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"6927:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7129,"name":"_redemptionQueueItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7093,"src":"6954:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"id":7130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6975:8:24","memberName":"maturity","nodeType":"MemberAccess","referencedDeclaration":6899,"src":"6954:29:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":7126,"name":"NotMatureYet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7244,"src":"6899:12:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint64_$returns$__$","typeString":"function (uint256,uint64) pure"}},"id":7131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["6914:11:24","6944:8:24"],"names":["currentTime","maturity"],"nodeType":"FunctionCall","src":"6899:87:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7132,"nodeType":"RevertStatement","src":"6892:94:24"}]}},{"expression":{"arguments":[{"id":7136,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7089,"src":"7046:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7135,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"7040:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":7137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7040:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7138,"nodeType":"ExpressionStatement","src":"7040:13:24"},{"expression":{"id":7144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":7139,"name":"nftInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6920,"src":"7109:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RedemptionQueueItem_$6902_storage_$","typeString":"mapping(uint256 => struct RedemptionQueue.RedemptionQueueItem storage ref)"}},"id":7141,"indexExpression":{"id":7140,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7089,"src":"7124:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7109:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage","typeString":"struct RedemptionQueue.RedemptionQueueItem storage ref"}},"id":7142,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7132:15:24","memberName":"hasBeenRedeemed","nodeType":"MemberAccess","referencedDeclaration":6897,"src":"7109:38:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":7143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7150:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7109:45:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7145,"nodeType":"ExpressionStatement","src":"7109:45:24"},{"expression":{"arguments":[{"arguments":[{"id":7154,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"7294:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_RedemptionQueue_$7262","typeString":"contract RedemptionQueue"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RedemptionQueue_$7262","typeString":"contract RedemptionQueue"}],"id":7153,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7286:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7152,"name":"address","nodeType":"ElementaryTypeName","src":"7286:7:24","typeDescriptions":{}}},"id":7155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7286:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7156,"name":"_redemptionQueueItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7093,"src":"7301:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"id":7157,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7322:6:24","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6901,"src":"7301:27:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint120","typeString":"uint120"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7147,"name":"config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6728,"src":"7263:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_IConfig_$7382","typeString":"contract IConfig"}},"id":7148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7270:7:24","memberName":"veMetis","nodeType":"MemberAccess","referencedDeclaration":7272,"src":"7263:14:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":7149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7263:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7146,"name":"IVeMetis","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7403,"src":"7254:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVeMetis_$7403_$","typeString":"type(contract IVeMetis)"}},"id":7150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7254:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVeMetis_$7403","typeString":"contract IVeMetis"}},"id":7151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7281:4:24","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":7402,"src":"7254:31:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":7158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7254:75:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7159,"nodeType":"ExpressionStatement","src":"7254:75:24"}]},"documentation":{"id":7087,"nodeType":"StructuredDocumentation","src":"6044:178:24","text":"@notice Redeems a veMetisRedemptionTicket NFT for Metis. (Pre-Metis send)\n @param _nftId The ID of the NFT\n @return _redemptionQueueItem The RedemptionQueueItem"},"id":7161,"implemented":true,"kind":"function","modifiers":[],"name":"_redeemRedemptionTicketNftPre","nameLocation":"6236:29:24","nodeType":"FunctionDefinition","parameters":{"id":7090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7089,"mutability":"mutable","name":"_nftId","nameLocation":"6274:6:24","nodeType":"VariableDeclaration","scope":7161,"src":"6266:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7088,"name":"uint256","nodeType":"ElementaryTypeName","src":"6266:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6265:16:24"},"returnParameters":{"id":7094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7093,"mutability":"mutable","name":"_redemptionQueueItem","nameLocation":"6327:20:24","nodeType":"VariableDeclaration","scope":7161,"src":"6300:47:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem"},"typeName":{"id":7092,"nodeType":"UserDefinedTypeName","pathNode":{"id":7091,"name":"RedemptionQueueItem","nameLocations":["6300:19:24"],"nodeType":"IdentifierPath","referencedDeclaration":6902,"src":"6300:19:24"},"referencedDeclaration":6902,"src":"6300:19:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem"}},"visibility":"internal"}],"src":"6299:49:24"},"scope":7262,"src":"6227:1109:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7205,"nodeType":"Block","src":"7653:580:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7172,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7166,"src":"7671:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":7175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7693:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7685:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7173,"name":"address","nodeType":"ElementaryTypeName","src":"7685:7:24","typeDescriptions":{}}},"id":7176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7685:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7671:24:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526564656d7074696f6e51756575653a207a65726f2061646472657373","id":7178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7697:31:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6","typeString":"literal_string \"RedemptionQueue: zero address\""},"value":"RedemptionQueue: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6","typeString":"literal_string \"RedemptionQueue: zero address\""}],"id":7171,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"7663:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7663:66:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7180,"nodeType":"ExpressionStatement","src":"7663:66:24"},{"assignments":[7183],"declarations":[{"constant":false,"id":7183,"mutability":"mutable","name":"_redemptionQueueItem","nameLocation":"7844:20:24","nodeType":"VariableDeclaration","scope":7205,"src":"7817:47:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem"},"typeName":{"id":7182,"nodeType":"UserDefinedTypeName","pathNode":{"id":7181,"name":"RedemptionQueueItem","nameLocations":["7817:19:24"],"nodeType":"IdentifierPath","referencedDeclaration":6902,"src":"7817:19:24"},"referencedDeclaration":6902,"src":"7817:19:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem"}},"visibility":"internal"}],"id":7187,"initialValue":{"arguments":[{"id":7185,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7164,"src":"7897:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7184,"name":"_redeemRedemptionTicketNftPre","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7161,"src":"7867:29:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_struct$_RedemptionQueueItem_$6902_memory_ptr_$","typeString":"function (uint256) returns (struct RedemptionQueue.RedemptionQueueItem memory)"}},"id":7186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7867:37:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"nodeType":"VariableDeclarationStatement","src":"7817:87:24"},{"expression":{"arguments":[{"id":7191,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7166,"src":"7987:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7192,"name":"_redemptionQueueItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7183,"src":"7999:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"id":7193,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8020:6:24","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6901,"src":"7999:27:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint120","typeString":"uint120"}],"expression":{"id":7188,"name":"METIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6926,"src":"7968:5:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}},"id":7190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7974:12:24","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1900,"src":"7968:18:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1853_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1853_$","typeString":"function (contract IERC20,address,uint256)"}},"id":7194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7968:59:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7195,"nodeType":"ExpressionStatement","src":"7968:59:24"},{"eventCall":{"arguments":[{"id":7197,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7164,"src":"8090:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7198,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"8118:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8122:6:24","memberName":"sender","nodeType":"MemberAccess","src":"8118:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7200,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7166,"src":"8153:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":7201,"name":"_redemptionQueueItem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7183,"src":"8188:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem memory"}},"id":7202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8209:6:24","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":6901,"src":"8188:27:24","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint120","typeString":"uint120"}],"id":7196,"name":"RedeemRedemptionTicketNft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6937,"src":"8043:25:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint120_$returns$__$","typeString":"function (uint256,address,address,uint120)"}},"id":7203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["8083:5:24","8110:6:24","8142:9:24","8177:9:24"],"names":["nftId","sender","recipient","amountOut"],"nodeType":"FunctionCall","src":"8043:183:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7204,"nodeType":"EmitStatement","src":"8038:188:24"}]},"documentation":{"id":7162,"nodeType":"StructuredDocumentation","src":"7342:205:24","text":"@notice Redeems a veMetisRedemptionTicket NFT for Metis. Must have reached the maturity date first.\n @param _nftId The ID of the NFT\n @param _recipient The recipient of the redeemed Metis"},"functionSelector":"cc928d52","id":7206,"implemented":true,"kind":"function","modifiers":[{"id":7169,"kind":"modifierInvocation","modifierName":{"id":7168,"name":"nonReentrant","nameLocations":["7640:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":1448,"src":"7640:12:24"},"nodeType":"ModifierInvocation","src":"7640:12:24"}],"name":"redeemRedemptionTicketNft","nameLocation":"7561:25:24","nodeType":"FunctionDefinition","parameters":{"id":7167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7164,"mutability":"mutable","name":"_nftId","nameLocation":"7595:6:24","nodeType":"VariableDeclaration","scope":7206,"src":"7587:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7163,"name":"uint256","nodeType":"ElementaryTypeName","src":"7587:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7166,"mutability":"mutable","name":"_recipient","nameLocation":"7611:10:24","nodeType":"VariableDeclaration","scope":7206,"src":"7603:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7165,"name":"address","nodeType":"ElementaryTypeName","src":"7603:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7586:36:24"},"returnParameters":{"id":7170,"nodeType":"ParameterList","parameters":[],"src":"7653:0:24"},"scope":7262,"src":"7552:681:24","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":7213,"nodeType":"Block","src":"8290:33:24","statements":[{"expression":{"id":7211,"name":"nextNftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6910,"src":"8307:9:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":7210,"id":7212,"nodeType":"Return","src":"8300:16:24"}]},"functionSelector":"644c45e0","id":7214,"implemented":true,"kind":"function","modifiers":[],"name":"getNftId","nameLocation":"8248:8:24","nodeType":"FunctionDefinition","parameters":{"id":7207,"nodeType":"ParameterList","parameters":[],"src":"8256:2:24"},"returnParameters":{"id":7210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7209,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7214,"src":"8282:6:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7208,"name":"uint64","nodeType":"ElementaryTypeName","src":"8282:6:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8281:8:24"},"scope":7262,"src":"8239:84:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7226,"nodeType":"Block","src":"8423:46:24","statements":[{"expression":{"baseExpression":{"id":7222,"name":"nftInformation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6920,"src":"8440:14:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RedemptionQueueItem_$6902_storage_$","typeString":"mapping(uint256 => struct RedemptionQueue.RedemptionQueueItem storage ref)"}},"id":7224,"indexExpression":{"id":7223,"name":"_nftId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7216,"src":"8455:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8440:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage","typeString":"struct RedemptionQueue.RedemptionQueueItem storage ref"}},"functionReturnParameters":7221,"id":7225,"nodeType":"Return","src":"8433:29:24"}]},"functionSelector":"fe663b81","id":7227,"implemented":true,"kind":"function","modifiers":[],"name":"getNftInformation","nameLocation":"8338:17:24","nodeType":"FunctionDefinition","parameters":{"id":7217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7216,"mutability":"mutable","name":"_nftId","nameLocation":"8364:6:24","nodeType":"VariableDeclaration","scope":7227,"src":"8356:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7215,"name":"uint256","nodeType":"ElementaryTypeName","src":"8356:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8355:16:24"},"returnParameters":{"id":7221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7227,"src":"8395:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_memory_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem"},"typeName":{"id":7219,"nodeType":"UserDefinedTypeName","pathNode":{"id":7218,"name":"RedemptionQueueItem","nameLocations":["8395:19:24"],"nodeType":"IdentifierPath","referencedDeclaration":6902,"src":"8395:19:24"},"referencedDeclaration":6902,"src":"8395:19:24","typeDescriptions":{"typeIdentifier":"t_struct$_RedemptionQueueItem_$6902_storage_ptr","typeString":"struct RedemptionQueue.RedemptionQueueItem"}},"visibility":"internal"}],"src":"8394:28:24"},"scope":7262,"src":"8329:140:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":7228,"nodeType":"StructuredDocumentation","src":"8577:57:24","text":"@notice ERC721: caller is not token owner or approved"},"errorSelector":"e8162744","id":7230,"name":"Erc721CallerNotOwnerOrApproved","nameLocation":"8645:30:24","nodeType":"ErrorDefinition","parameters":{"id":7229,"nodeType":"ParameterList","parameters":[],"src":"8675:2:24"},"src":"8639:39:24"},{"documentation":{"id":7231,"nodeType":"StructuredDocumentation","src":"8684:224:24","text":"@notice When timelock/operator tries collecting more fees than they are due\n @param collectAmount How much fee the ounsender is trying to collect\n @param accruedAmount How much fees are actually collectable"},"errorSelector":"cf1950de","id":7237,"name":"ExceedsCollectedFees","nameLocation":"8919:20:24","nodeType":"ErrorDefinition","parameters":{"id":7236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7233,"mutability":"mutable","name":"collectAmount","nameLocation":"8948:13:24","nodeType":"VariableDeclaration","scope":7237,"src":"8940:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":7232,"name":"uint128","nodeType":"ElementaryTypeName","src":"8940:7:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":7235,"mutability":"mutable","name":"accruedAmount","nameLocation":"8971:13:24","nodeType":"VariableDeclaration","scope":7237,"src":"8963:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":7234,"name":"uint128","nodeType":"ElementaryTypeName","src":"8963:7:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8939:46:24"},"src":"8913:73:24"},{"documentation":{"id":7238,"nodeType":"StructuredDocumentation","src":"8992:132:24","text":"@notice NFT is not mature enough to redeem yet\n @param currentTime Current time.\n @param maturity Time of maturity"},"errorSelector":"375394cb","id":7244,"name":"NotMatureYet","nameLocation":"9135:12:24","nodeType":"ErrorDefinition","parameters":{"id":7243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7240,"mutability":"mutable","name":"currentTime","nameLocation":"9156:11:24","nodeType":"VariableDeclaration","scope":7244,"src":"9148:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7239,"name":"uint256","nodeType":"ElementaryTypeName","src":"9148:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7242,"mutability":"mutable","name":"maturity","nameLocation":"9176:8:24","nodeType":"VariableDeclaration","scope":7244,"src":"9169:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7241,"name":"uint64","nodeType":"ElementaryTypeName","src":"9169:6:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"9147:38:24"},"src":"9129:57:24"},{"documentation":{"id":7245,"nodeType":"StructuredDocumentation","src":"9192:36:24","text":"@notice Already reduced maturity"},"errorSelector":"e7c075d5","id":7247,"name":"AlreadyReducedMaturity","nameLocation":"9239:22:24","nodeType":"ErrorDefinition","parameters":{"id":7246,"nodeType":"ParameterList","parameters":[],"src":"9261:2:24"},"src":"9233:31:24"},{"documentation":{"id":7248,"nodeType":"StructuredDocumentation","src":"9274:28:24","text":"@notice already redeemed"},"errorSelector":"1b4e0c3c","id":7250,"name":"AlreadyRedeemed","nameLocation":"9313:15:24","nodeType":"ErrorDefinition","parameters":{"id":7249,"nodeType":"ParameterList","parameters":[],"src":"9328:2:24"},"src":"9307:24:24"},{"body":{"id":7260,"nodeType":"Block","src":"9392:38:24","statements":[{"expression":{"arguments":[{"id":7257,"name":"METIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6926,"src":"9417:5:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1853","typeString":"contract IERC20"}],"id":7256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9409:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7255,"name":"address","nodeType":"ElementaryTypeName","src":"9409:7:24","typeDescriptions":{}}},"id":7258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9409:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":7254,"id":7259,"nodeType":"Return","src":"9402:21:24"}]},"functionSelector":"2e6dd472","id":7261,"implemented":true,"kind":"function","modifiers":[],"name":"getMetisAddress","nameLocation":"9346:15:24","nodeType":"FunctionDefinition","parameters":{"id":7251,"nodeType":"ParameterList","parameters":[],"src":"9361:2:24"},"returnParameters":{"id":7254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7253,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7261,"src":"9384:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7252,"name":"address","nodeType":"ElementaryTypeName","src":"9384:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9383:9:24"},"scope":7262,"src":"9337:93:24","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":7263,"src":"587:8845:24","usedErrors":[16,19,1410,1686,1691,1700,1705,1710,1717,1722,1727,1867,7230,7237,7244,7247,7250],"usedEvents":[24,2280,2289,2298,6937,6950]}],"src":"33:9399:24"},"id":24},"contracts/interface/IConfig.sol":{"ast":{"absolutePath":"contracts/interface/IConfig.sol","exportedSymbols":{"IConfig":[7382]},"id":7383,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7264,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"31:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IConfig","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":7382,"linearizedBaseContracts":[7382],"name":"IConfig","nameLocation":"66:7:25","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8129fc1c","id":7267,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"89:10:25","nodeType":"FunctionDefinition","parameters":{"id":7265,"nodeType":"ParameterList","parameters":[],"src":"99:2:25"},"returnParameters":{"id":7266,"nodeType":"ParameterList","parameters":[],"src":"110:0:25"},"scope":7382,"src":"80:31:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"9336ce80","id":7272,"implemented":false,"kind":"function","modifiers":[],"name":"veMetis","nameLocation":"126:7:25","nodeType":"FunctionDefinition","parameters":{"id":7268,"nodeType":"ParameterList","parameters":[],"src":"133:2:25"},"returnParameters":{"id":7271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7272,"src":"159:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7269,"name":"address","nodeType":"ElementaryTypeName","src":"159:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"158:9:25"},"scope":7382,"src":"117:51:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"bf27726c","id":7277,"implemented":false,"kind":"function","modifiers":[],"name":"veMetisMinter","nameLocation":"183:13:25","nodeType":"FunctionDefinition","parameters":{"id":7273,"nodeType":"ParameterList","parameters":[],"src":"196:2:25"},"returnParameters":{"id":7276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7277,"src":"222:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7274,"name":"address","nodeType":"ElementaryTypeName","src":"222:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"221:9:25"},"scope":7382,"src":"174:57:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a2191470","id":7282,"implemented":false,"kind":"function","modifiers":[],"name":"sveMetis","nameLocation":"246:8:25","nodeType":"FunctionDefinition","parameters":{"id":7278,"nodeType":"ParameterList","parameters":[],"src":"254:2:25"},"returnParameters":{"id":7281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7282,"src":"280:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7279,"name":"address","nodeType":"ElementaryTypeName","src":"280:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"279:9:25"},"scope":7382,"src":"237:52:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"21951955","id":7287,"implemented":false,"kind":"function","modifiers":[],"name":"rewardDispatcher","nameLocation":"304:16:25","nodeType":"FunctionDefinition","parameters":{"id":7283,"nodeType":"ParameterList","parameters":[],"src":"320:2:25"},"returnParameters":{"id":7286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7287,"src":"346:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7284,"name":"address","nodeType":"ElementaryTypeName","src":"346:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"345:9:25"},"scope":7382,"src":"295:60:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e5974554","id":7292,"implemented":false,"kind":"function","modifiers":[],"name":"metis","nameLocation":"370:5:25","nodeType":"FunctionDefinition","parameters":{"id":7288,"nodeType":"ParameterList","parameters":[],"src":"375:2:25"},"returnParameters":{"id":7291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7292,"src":"401:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7289,"name":"address","nodeType":"ElementaryTypeName","src":"401:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"400:9:25"},"scope":7382,"src":"361:49:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e78cea92","id":7297,"implemented":false,"kind":"function","modifiers":[],"name":"bridge","nameLocation":"425:6:25","nodeType":"FunctionDefinition","parameters":{"id":7293,"nodeType":"ParameterList","parameters":[],"src":"431:2:25"},"returnParameters":{"id":7296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7297,"src":"457:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7294,"name":"address","nodeType":"ElementaryTypeName","src":"457:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"456:9:25"},"scope":7382,"src":"416:50:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a2be57ad","id":7302,"implemented":false,"kind":"function","modifiers":[],"name":"l1Dealer","nameLocation":"481:8:25","nodeType":"FunctionDefinition","parameters":{"id":7298,"nodeType":"ParameterList","parameters":[],"src":"489:2:25"},"returnParameters":{"id":7301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7302,"src":"515:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7299,"name":"address","nodeType":"ElementaryTypeName","src":"515:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"514:9:25"},"scope":7382,"src":"472:52:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"803db96d","id":7307,"implemented":false,"kind":"function","modifiers":[],"name":"protocolTreasury","nameLocation":"539:16:25","nodeType":"FunctionDefinition","parameters":{"id":7303,"nodeType":"ParameterList","parameters":[],"src":"555:2:25"},"returnParameters":{"id":7306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7307,"src":"581:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7304,"name":"address","nodeType":"ElementaryTypeName","src":"581:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"580:9:25"},"scope":7382,"src":"530:60:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"8b587b9c","id":7312,"implemented":false,"kind":"function","modifiers":[],"name":"protocolTreasuryRatio","nameLocation":"605:21:25","nodeType":"FunctionDefinition","parameters":{"id":7308,"nodeType":"ParameterList","parameters":[],"src":"626:2:25"},"returnParameters":{"id":7311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7310,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7312,"src":"652:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7309,"name":"uint32","nodeType":"ElementaryTypeName","src":"652:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"651:8:25"},"scope":7382,"src":"596:64:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"97ec19be","id":7317,"implemented":false,"kind":"function","modifiers":[],"name":"redemptionQueue","nameLocation":"675:15:25","nodeType":"FunctionDefinition","parameters":{"id":7313,"nodeType":"ParameterList","parameters":[],"src":"690:2:25"},"returnParameters":{"id":7316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7317,"src":"716:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7314,"name":"address","nodeType":"ElementaryTypeName","src":"716:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"715:9:25"},"scope":7382,"src":"666:59:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2d76710b","id":7322,"implemented":false,"kind":"function","modifiers":[],"name":"queueLengthSecs","nameLocation":"740:15:25","nodeType":"FunctionDefinition","parameters":{"id":7318,"nodeType":"ParameterList","parameters":[],"src":"755:2:25"},"returnParameters":{"id":7321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7322,"src":"781:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7319,"name":"uint64","nodeType":"ElementaryTypeName","src":"781:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"780:8:25"},"scope":7382,"src":"731:58:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0c5a61f8","id":7327,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolTreasury","nameLocation":"804:19:25","nodeType":"FunctionDefinition","parameters":{"id":7325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7324,"mutability":"mutable","name":"_protocolTreasury","nameLocation":"832:17:25","nodeType":"VariableDeclaration","scope":7327,"src":"824:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7323,"name":"address","nodeType":"ElementaryTypeName","src":"824:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"823:27:25"},"returnParameters":{"id":7326,"nodeType":"ParameterList","parameters":[],"src":"859:0:25"},"scope":7382,"src":"795:65:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d27bc94a","id":7332,"implemented":false,"kind":"function","modifiers":[],"name":"setProtocolTreasuryRatio","nameLocation":"880:24:25","nodeType":"FunctionDefinition","parameters":{"id":7330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7329,"mutability":"mutable","name":"_protocolTreasuryRatio","nameLocation":"912:22:25","nodeType":"VariableDeclaration","scope":7332,"src":"905:29:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7328,"name":"uint32","nodeType":"ElementaryTypeName","src":"905:6:25","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"904:31:25"},"returnParameters":{"id":7331,"nodeType":"ParameterList","parameters":[],"src":"944:0:25"},"scope":7382,"src":"871:74:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"093c4e21","id":7337,"implemented":false,"kind":"function","modifiers":[],"name":"setQueueLengthSecs","nameLocation":"959:18:25","nodeType":"FunctionDefinition","parameters":{"id":7335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7334,"mutability":"mutable","name":"_queueLengthSecs","nameLocation":"985:16:25","nodeType":"VariableDeclaration","scope":7337,"src":"978:23:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7333,"name":"uint64","nodeType":"ElementaryTypeName","src":"978:6:25","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"977:25:25"},"returnParameters":{"id":7336,"nodeType":"ParameterList","parameters":[],"src":"1011:0:25"},"scope":7382,"src":"950:62:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"91d14854","id":7346,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1027:7:25","nodeType":"FunctionDefinition","parameters":{"id":7342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7339,"mutability":"mutable","name":"role","nameLocation":"1052:4:25","nodeType":"VariableDeclaration","scope":7346,"src":"1044:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1044:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7341,"mutability":"mutable","name":"account","nameLocation":"1074:7:25","nodeType":"VariableDeclaration","scope":7346,"src":"1066:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7340,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1034:53:25"},"returnParameters":{"id":7345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7346,"src":"1111:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7343,"name":"bool","nodeType":"ElementaryTypeName","src":"1111:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1110:6:25"},"scope":7382,"src":"1018:99:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"248a9ca3","id":7353,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1132:12:25","nodeType":"FunctionDefinition","parameters":{"id":7349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7348,"mutability":"mutable","name":"role","nameLocation":"1153:4:25","nodeType":"VariableDeclaration","scope":7353,"src":"1145:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1145:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1144:14:25"},"returnParameters":{"id":7352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7353,"src":"1182:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1182:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1181:9:25"},"scope":7382,"src":"1123:68:25","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2f2ff15d","id":7360,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1206:9:25","nodeType":"FunctionDefinition","parameters":{"id":7358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7355,"mutability":"mutable","name":"role","nameLocation":"1224:4:25","nodeType":"VariableDeclaration","scope":7360,"src":"1216:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1216:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7357,"mutability":"mutable","name":"account","nameLocation":"1238:7:25","nodeType":"VariableDeclaration","scope":7360,"src":"1230:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7356,"name":"address","nodeType":"ElementaryTypeName","src":"1230:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1215:31:25"},"returnParameters":{"id":7359,"nodeType":"ParameterList","parameters":[],"src":"1255:0:25"},"scope":7382,"src":"1197:59:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d547741f","id":7367,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1271:10:25","nodeType":"FunctionDefinition","parameters":{"id":7365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7362,"mutability":"mutable","name":"role","nameLocation":"1290:4:25","nodeType":"VariableDeclaration","scope":7367,"src":"1282:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1282:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7364,"mutability":"mutable","name":"account","nameLocation":"1304:7:25","nodeType":"VariableDeclaration","scope":7367,"src":"1296:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7363,"name":"address","nodeType":"ElementaryTypeName","src":"1296:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1281:31:25"},"returnParameters":{"id":7366,"nodeType":"ParameterList","parameters":[],"src":"1321:0:25"},"scope":7382,"src":"1262:60:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"36568abe","id":7374,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"1337:12:25","nodeType":"FunctionDefinition","parameters":{"id":7372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7369,"mutability":"mutable","name":"role","nameLocation":"1358:4:25","nodeType":"VariableDeclaration","scope":7374,"src":"1350:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7368,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1350:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7371,"mutability":"mutable","name":"account","nameLocation":"1372:7:25","nodeType":"VariableDeclaration","scope":7374,"src":"1364:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7370,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1349:31:25"},"returnParameters":{"id":7373,"nodeType":"ParameterList","parameters":[],"src":"1389:0:25"},"scope":7382,"src":"1328:62:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"1e4e0091","id":7381,"implemented":false,"kind":"function","modifiers":[],"name":"setRoleAdmin","nameLocation":"1405:12:25","nodeType":"FunctionDefinition","parameters":{"id":7379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7376,"mutability":"mutable","name":"role","nameLocation":"1426:4:25","nodeType":"VariableDeclaration","scope":7381,"src":"1418:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7375,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1418:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7378,"mutability":"mutable","name":"adminRole","nameLocation":"1440:9:25","nodeType":"VariableDeclaration","scope":7381,"src":"1432:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1432:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1417:33:25"},"returnParameters":{"id":7380,"nodeType":"ParameterList","parameters":[],"src":"1459:0:25"},"scope":7382,"src":"1396:64:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":7383,"src":"56:1406:25","usedErrors":[],"usedEvents":[]}],"src":"31:1432:25"},"id":25},"contracts/interface/IVeMetis.sol":{"ast":{"absolutePath":"contracts/interface/IVeMetis.sol","exportedSymbols":{"IERC20":[1853],"IVeMetis":[7403]},"id":7404,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7384,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"31:23:26"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":7386,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7404,"sourceUnit":1639,"src":"56:69:26","symbolAliases":[{"foreign":{"id":7385,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"64:6:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":7387,"name":"IERC20","nameLocations":["149:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":1853,"src":"149:6:26"},"id":7388,"nodeType":"InheritanceSpecifier","src":"149:6:26"}],"canonicalName":"IVeMetis","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":7403,"linearizedBaseContracts":[7403,1853],"name":"IVeMetis","nameLocation":"137:8:26","nodeType":"ContractDefinition","nodes":[{"functionSelector":"40c10f19","id":7395,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"171:4:26","nodeType":"FunctionDefinition","parameters":{"id":7393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7390,"mutability":"mutable","name":"user","nameLocation":"184:4:26","nodeType":"VariableDeclaration","scope":7395,"src":"176:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7389,"name":"address","nodeType":"ElementaryTypeName","src":"176:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7392,"mutability":"mutable","name":"amount","nameLocation":"198:6:26","nodeType":"VariableDeclaration","scope":7395,"src":"190:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7391,"name":"uint256","nodeType":"ElementaryTypeName","src":"190:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"175:30:26"},"returnParameters":{"id":7394,"nodeType":"ParameterList","parameters":[],"src":"214:0:26"},"scope":7403,"src":"162:53:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"9dc29fac","id":7402,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"229:4:26","nodeType":"FunctionDefinition","parameters":{"id":7400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7397,"mutability":"mutable","name":"user","nameLocation":"242:4:26","nodeType":"VariableDeclaration","scope":7402,"src":"234:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7396,"name":"address","nodeType":"ElementaryTypeName","src":"234:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7399,"mutability":"mutable","name":"amount","nameLocation":"256:6:26","nodeType":"VariableDeclaration","scope":7402,"src":"248:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7398,"name":"uint256","nodeType":"ElementaryTypeName","src":"248:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"233:30:26"},"returnParameters":{"id":7401,"nodeType":"ParameterList","parameters":[],"src":"272:0:26"},"scope":7403,"src":"220:53:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":7404,"src":"127:148:26","usedErrors":[],"usedEvents":[1787,1796]}],"src":"31:245:26"},"id":26}},"contracts":{"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol":{"ERC721Upgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":\"ERC721Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0xfd473ea8f70e13eaa6475c7e348885b8a32925252e3bc237e07c0e3fde0f10f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"IERC1363":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"approveAndCall(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"approveAndCall(address,uint256,bytes)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.","params":{"data":"Additional data with no specified format, sent in call to `spender`.","spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferAndCall(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferAndCall(address,uint256,bytes)":{"details":"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"data":"Additional data with no specified format, sent in call to `to`.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFromAndCall(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"from":"The address which you want to send tokens from.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferFromAndCall(address,address,uint256,bytes)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"data":"Additional data with no specified format, sent in call to `to`.","from":"The address which you want to send tokens from.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}}},"title":"IERC1363","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","approveAndCall(address,uint256)":"3177029f","approveAndCall(address,uint256,bytes)":"cae9ca51","balanceOf(address)":"70a08231","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256)":"1296ee62","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd","transferFromAndCall(address,address,uint256)":"d8fbe994","transferFromAndCall(address,address,uint256,bytes)":"c1d34b89"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-20 standard as defined in the ERC.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"currentAllowance","type":"uint256"},{"internalType":"uint256","name":"requestedDecrease","type":"uint256"}],"name":"SafeERC20FailedDecreaseAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"}],"devdoc":{"details":"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","errors":{"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)":[{"details":"Indicates a failed `decreaseAllowance` request."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f5e29fa1d072db821107e1f63e700dd2a730b6ec901212f7b1c70786df608cc664736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 0xE2 SWAP16 LOG1 0xD0 PUSH19 0xDB821107E1F63E700DD2A730B6EC901212F7B1 0xC7 SMOD DUP7 0xDF PUSH1 0x8C 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"750:8692:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f5e29fa1d072db821107e1f63e700dd2a730b6ec901212f7b1c70786df608cc664736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 0xE2 SWAP16 LOG1 0xD0 PUSH19 0xDB821107E1F63E700DD2A730B6EC901212F7B1 0xC7 SMOD DUP7 0xDF PUSH1 0x8C 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"750:8692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite","transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)":"infinite","transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC-721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC-721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC-721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC-721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC-721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC-721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol":{"ERC721Utils":{"abi":[],"devdoc":{"details":"Library that provide common ERC-721 utility functions. See https://eips.ethereum.org/EIPS/eip-721[ERC-721]. _Available since v5.1._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122040941742a40788c4d1b2003eda69b0305cb644f191b42548f85c80c28b226a0264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH SWAP5 OR TIMESTAMP LOG4 SMOD DUP9 0xC4 0xD1 0xB2 STOP RETURNDATACOPY 0xDA PUSH10 0xB0305CB644F191B42548 0xF8 0x5C DUP1 0xC2 DUP12 0x22 PUSH11 0x264736F6C634300081400 CALLER ","sourceMap":"431:1480:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122040941742a40788c4d1b2003eda69b0305cb644f191b42548f85c80c28b226a0264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH SWAP5 OR TIMESTAMP LOG4 SMOD DUP9 0xC4 0xD1 0xB2 STOP RETURNDATACOPY 0xDA PUSH10 0xB0305CB644F191B42548 0xF8 0x5C DUP1 0xC2 DUP12 0x22 PUSH11 0x264736F6C634300081400 CALLER ","sourceMap":"431:1480:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"checkOnERC721Received(address,address,address,uint256,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library that provide common ERC-721 utility functions. See https://eips.ethereum.org/EIPS/eip-721[ERC-721]. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":\"ERC721Utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"}],"devdoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c79679c51a49628db9a480139c3205b39fa3b061533f15b74da82830397e245164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 SWAP7 PUSH26 0xC51A49628DB9A480139C3205B39FA3B061533F15B74DA8283039 PUSH31 0x245164736F6C63430008140033000000000000000000000000000000000000 ","sourceMap":"233:5799:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c79679c51a49628db9a480139c3205b39fa3b061533f15b74da82830397e245164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 SWAP7 PUSH26 0xC51A49628DB9A480139C3205B39FA3B061533F15B74DA8283039 PUSH31 0x245164736F6C63430008140033000000000000000000000000000000000000 ","sourceMap":"233:5799:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Errors.sol":{"Errors":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"FailedDeployment","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"MissingPrecompile","type":"error"}],"devdoc":{"details":"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._","errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"FailedDeployment()":[{"details":"The deployment failed."}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"MissingPrecompile(address)":[{"details":"A necessary precompile is missing."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030047e89f569f535fb79437d3c64a47b98bc4a23c8fe7989bf067c3e96028dd464736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS DIV PUSH31 0x89F569F535FB79437D3C64A47B98BC4A23C8FE7989BF067C3E96028DD46473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"411:484:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122030047e89f569f535fb79437d3c64a47b98bc4a23c8fe7989bf067c3e96028dd464736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS DIV PUSH31 0x89F569F535FB79437D3C64A47B98BC4A23C8FE7989BF067C3E96028DD46473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"411:484:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MissingPrecompile\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"MissingPrecompile(address)\":[{\"details\":\"A necessary precompile is missing.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Errors.sol\":\"Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Panic.sol":{"Panic":{"abi":[],"devdoc":{"details":"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._","kind":"dev","methods":{},"stateVariables":{"ARRAY_OUT_OF_BOUNDS":{"details":"array out of bounds access"},"ASSERT":{"details":"used by the assert() builtin"},"DIVISION_BY_ZERO":{"details":"division or modulo by zero"},"EMPTY_ARRAY_POP":{"details":"empty array pop"},"ENUM_CONVERSION_ERROR":{"details":"enum conversion error"},"GENERIC":{"details":"generic / unspecified error"},"INVALID_INTERNAL_FUNCTION":{"details":"calling invalid internal function"},"RESOURCE_ERROR":{"details":"resource error (too large allocation or too large array)"},"STORAGE_ENCODING_ERROR":{"details":"invalid encoding in storage"},"UNDER_OVERFLOW":{"details":"arithmetic underflow or overflow"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122001d13d41b67a8951898cc82350b56096bf7576d7a4b558784791a9239d8e768364736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD 0xD1 RETURNDATASIZE COINBASE 0xB6 PUSH27 0x8951898CC82350B56096BF7576D7A4B558784791A9239D8E768364 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"657:1315:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122001d13d41b67a8951898cc82350b56096bf7576d7a4b558784791a9239d8e768364736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADD 0xD1 RETURNDATASIZE COINBASE 0xB6 PUSH27 0x8951898CC82350B56096BF7576D7A4B558784791A9239D8E768364 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"657:1315:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"panic(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper library for emitting standardized panic codes. ```solidity contract Example {      using Panic for uint256;      // Use any of the declared internal constants      function foo() { Panic.GENERIC.panic(); }      // Alternatively      function foo() { Panic.panic(Panic.GENERIC); } } ``` Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil]. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ARRAY_OUT_OF_BOUNDS\":{\"details\":\"array out of bounds access\"},\"ASSERT\":{\"details\":\"used by the assert() builtin\"},\"DIVISION_BY_ZERO\":{\"details\":\"division or modulo by zero\"},\"EMPTY_ARRAY_POP\":{\"details\":\"empty array pop\"},\"ENUM_CONVERSION_ERROR\":{\"details\":\"enum conversion error\"},\"GENERIC\":{\"details\":\"generic / unspecified error\"},\"INVALID_INTERNAL_FUNCTION\":{\"details\":\"calling invalid internal function\"},\"RESOURCE_ERROR\":{\"details\":\"resource error (too large allocation or too large array)\"},\"STORAGE_ENCODING_ERROR\":{\"details\":\"invalid encoding in storage\"},\"UNDER_OVERFLOW\":{\"details\":\"arithmetic underflow or overflow\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Panic.sol\":\"Panic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122026812d90030215fae268de149673f2a420b4fbd26e61d2d76ea85f22a709a82064736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 DUP2 0x2D SWAP1 SUB MUL ISZERO STATICCALL 0xE2 PUSH9 0xDE149673F2A420B4FB 0xD2 PUSH15 0x61D2D76EA85F22A709A82064736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"251:3680:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122026812d90030215fae268de149673f2a420b4fbd26e61d2d76ea85f22a709a82064736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 DUP2 0x2D SWAP1 SUB MUL ISZERO STATICCALL 0xE2 PUSH9 0xDE149673F2A420B4FB 0xD2 PUSH15 0x61D2D76EA85F22A709A82064736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"251:3680:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toChecksumHexString(address)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220137fabfb44e7c3e22180b75001f40ec2e303d4614e94526c4e317c5181cbd6db64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT PUSH32 0xABFB44E7C3E22180B75001F40EC2E303D4614E94526C4E317C5181CBD6DB6473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"281:28026:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220137fabfb44e7c3e22180b75001f40ec2e303d4614e94526c4e317c5181cbd6db64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT PUSH32 0xABFB44E7C3E22180B75001F40EC2E303D4614E94526C4E317C5181CBD6DB6473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"281:28026:20:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_zeroBytes(bytes memory)":"infinite","average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","invMod(uint256,uint256)":"infinite","invModPrime(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","modExp(bytes memory,bytes memory,bytes memory)":"infinite","modExp(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","ternary(bool,uint256,uint256)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryModExp(bytes memory,bytes memory,bytes memory)":"infinite","tryModExp(uint256,uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntDowncast","type":"error"},{"inputs":[{"internalType":"int256","name":"value","type":"int256"}],"name":"SafeCastOverflowedIntToUint","type":"error"},{"inputs":[{"internalType":"uint8","name":"bits","type":"uint8"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintDowncast","type":"error"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"SafeCastOverflowedUintToInt","type":"error"}],"devdoc":{"details":"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.","errors":{"SafeCastOverflowedIntDowncast(uint8,int256)":[{"details":"Value doesn't fit in an int of `bits` size."}],"SafeCastOverflowedIntToUint(int256)":[{"details":"An int value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintDowncast(uint8,uint256)":[{"details":"Value doesn't fit in an uint of `bits` size."}],"SafeCastOverflowedUintToInt(uint256)":[{"details":"An uint value doesn't fit in an int of `bits` size."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b00d9d8d547b97744c2ab370a7c491822621fd5748ee205a79603c33cd199ba964736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 0xD SWAP14 DUP14 SLOAD PUSH28 0x97744C2AB370A7C491822621FD5748EE205A79603C33CD199BA96473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"769:34173:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b00d9d8d547b97744c2ab370a7c491822621fd5748ee205a79603c33cd199ba964736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 0xD SWAP14 DUP14 SLOAD PUSH28 0x97744C2AB370A7C491822621FD5748EE205A79603C33CD199BA96473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"769:34173:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toInt104(int256)":"infinite","toInt112(int256)":"infinite","toInt120(int256)":"infinite","toInt128(int256)":"infinite","toInt136(int256)":"infinite","toInt144(int256)":"infinite","toInt152(int256)":"infinite","toInt16(int256)":"infinite","toInt160(int256)":"infinite","toInt168(int256)":"infinite","toInt176(int256)":"infinite","toInt184(int256)":"infinite","toInt192(int256)":"infinite","toInt200(int256)":"infinite","toInt208(int256)":"infinite","toInt216(int256)":"infinite","toInt224(int256)":"infinite","toInt232(int256)":"infinite","toInt24(int256)":"infinite","toInt240(int256)":"infinite","toInt248(int256)":"infinite","toInt256(uint256)":"infinite","toInt32(int256)":"infinite","toInt40(int256)":"infinite","toInt48(int256)":"infinite","toInt56(int256)":"infinite","toInt64(int256)":"infinite","toInt72(int256)":"infinite","toInt8(int256)":"infinite","toInt80(int256)":"infinite","toInt88(int256)":"infinite","toInt96(int256)":"infinite","toUint(bool)":"infinite","toUint104(uint256)":"infinite","toUint112(uint256)":"infinite","toUint120(uint256)":"infinite","toUint128(uint256)":"infinite","toUint136(uint256)":"infinite","toUint144(uint256)":"infinite","toUint152(uint256)":"infinite","toUint16(uint256)":"infinite","toUint160(uint256)":"infinite","toUint168(uint256)":"infinite","toUint176(uint256)":"infinite","toUint184(uint256)":"infinite","toUint192(uint256)":"infinite","toUint200(uint256)":"infinite","toUint208(uint256)":"infinite","toUint216(uint256)":"infinite","toUint224(uint256)":"infinite","toUint232(uint256)":"infinite","toUint24(uint256)":"infinite","toUint240(uint256)":"infinite","toUint248(uint256)":"infinite","toUint256(int256)":"infinite","toUint32(uint256)":"infinite","toUint40(uint256)":"infinite","toUint48(uint256)":"infinite","toUint56(uint256)":"infinite","toUint64(uint256)":"infinite","toUint72(uint256)":"infinite","toUint8(uint256)":"infinite","toUint80(uint256)":"infinite","toUint88(uint256)":"infinite","toUint96(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintToInt\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"errors\":{\"SafeCastOverflowedIntDowncast(uint8,int256)\":[{\"details\":\"Value doesn't fit in an int of `bits` size.\"}],\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeCastOverflowedUintToInt(uint256)\":[{\"details\":\"An uint value doesn't fit in an int of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd4dd2bac108633d876efaa5b38bee7522180a23113fe36d8f6bbb454c5b0cbd64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT 0x4D 0xD2 0xBA 0xC1 ADDMOD PUSH4 0x3D876EFA 0xA5 0xB3 DUP12 0xEE PUSH22 0x22180A23113FE36D8F6BBB454C5B0CBD64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"258:2354:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd4dd2bac108633d876efaa5b38bee7522180a23113fe36d8f6bbb454c5b0cbd64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT 0x4D 0xD2 0xBA 0xC1 ADDMOD PUSH4 0x3D876EFA 0xA5 0xB3 DUP12 0xEE PUSH22 0x22180A23113FE36D8F6BBB454C5B0CBD64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"258:2354:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite","ternary(bool,int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Base.sol":{"Base":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BACKEND_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FEE_PRECISION","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_DEPOSIT_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMELOCK_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"config","outputs":[{"internalType":"contract IConfig","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","BACKEND_ROLE()":"92c2becc","DEFAULT_ADMIN_ROLE()":"a217fddf","FEE_PRECISION()":"e63a391f","INITIAL_DEPOSIT_AMOUNT()":"e52083c6","TIMELOCK_ROLE()":"f288a2e2","config()":"79502c55"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BACKEND_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"The role for the admin\"},\"BACKEND_ROLE()\":{\"notice\":\"The role for the backend\"},\"DEFAULT_ADMIN_ROLE()\":{\"notice\":\"The default admin role\"},\"FEE_PRECISION()\":{\"notice\":\"The precision of the fee\"},\"INITIAL_DEPOSIT_AMOUNT()\":{\"notice\":\"sveMetis vault initial deposit amount\"},\"TIMELOCK_ROLE()\":{\"notice\":\"The role for the tmelock\"},\"config()\":{\"notice\":\"holds the address of the config contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Base.sol\":\"Base\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interface/IConfig.sol\\\";\\n\\nabstract contract Base is ContextUpgradeable, ReentrancyGuardUpgradeable {\\n    /// @notice The precision of the fee\\n    uint64 public constant FEE_PRECISION = 1e6;\\n\\n    /// @notice The default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice The role for the tmelock\\n    bytes32 public constant TIMELOCK_ROLE = keccak256(\\\"TIMELOCK_ROLE\\\");\\n    \\n    /// @notice The role for the admin\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    /// @notice The role for the backend\\n    bytes32 public constant BACKEND_ROLE = keccak256(\\\"BACKEND_ROLE\\\");\\n\\n    /// @notice sveMetis vault initial deposit amount\\n    uint256 public constant INITIAL_DEPOSIT_AMOUNT = 1 ether;\\n\\n    /// @notice holds the address of the config contract\\n    IConfig public config;\\n\\n    address private internalCalling;\\n\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!config.hasRole(role, _msgSender())) {\\n          _checkRole(role);\\n        }  \\n        _;\\n    }\\n    \\n    modifier onlyBackend() {\\n        _checkRole(BACKEND_ROLE);\\n        _;\\n    }\\n\\n    modifier internalOnly(address internalAddress) {\\n        require(_msgSender() == internalAddress, \\\"internal only\\\");\\n        internalCalling = internalAddress;\\n        _;\\n        internalCalling = address(0);\\n    }\\n\\n    /// @notice Initializes the contract with the config contract address\\n    /// @param _config The address of the config contract\\n    function __Base_init(address _config) internal onlyInitializing {\\n        config = IConfig(_config);\\n        __ReentrancyGuard_init();\\n        __Context_init();\\n    }\\n\\n  /// @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!config.hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * reject Metis transfer\\n     */\\n    receive() external payable {\\n        revert(\\\"Base: not support Metis transfer\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[30] private __gap;\\n}\\n\",\"keccak256\":\"0x89f2371e422679be9eae4fdbc69c4d41d752167fa421f4cacca857e617751431\",\"license\":\"MIT\"},\"contracts/interface/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IConfig {\\n    function initialize() external;\\n\\n    function veMetis() external view returns (address);\\n\\n    function veMetisMinter() external view returns (address);\\n\\n    function sveMetis() external view returns (address);\\n\\n    function rewardDispatcher() external view returns (address);\\n\\n    function metis() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function l1Dealer() external view returns (address);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTreasuryRatio() external view returns (uint32);\\n\\n    function redemptionQueue() external view returns (address);\\n\\n    function queueLengthSecs() external view returns (uint64);\\n\\n    function setProtocolTreasury(address _protocolTreasury) external;\\n    \\n\\n    function setProtocolTreasuryRatio(uint32 _protocolTreasuryRatio) external;\\n    function setQueueLengthSecs(uint64 _queueLengthSecs) external;\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x8212190496343b78997b10f14d5c3b0bec521ca50925082442a5eaea825b1a38\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6728,"contract":"contracts/Base.sol:Base","label":"config","offset":0,"slot":"0","type":"t_contract(IConfig)7382"},{"astId":6730,"contract":"contracts/Base.sol:Base","label":"internalCalling","offset":0,"slot":"1","type":"t_address"},{"astId":6870,"contract":"contracts/Base.sol:Base","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)30_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)30_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[30]","numberOfBytes":"960"},"t_contract(IConfig)7382":{"encoding":"inplace","label":"contract IConfig","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"ADMIN_ROLE()":{"notice":"The role for the admin"},"BACKEND_ROLE()":{"notice":"The role for the backend"},"DEFAULT_ADMIN_ROLE()":{"notice":"The default admin role"},"FEE_PRECISION()":{"notice":"The precision of the fee"},"INITIAL_DEPOSIT_AMOUNT()":{"notice":"sveMetis vault initial deposit amount"},"TIMELOCK_ROLE()":{"notice":"The role for the tmelock"},"config()":{"notice":"holds the address of the config contract"}},"version":1}}},"contracts/RedemptionQueue.sol":{"RedemptionQueue":{"abi":[{"inputs":[],"name":"AlreadyRedeemed","type":"error"},{"inputs":[],"name":"AlreadyReducedMaturity","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[],"name":"Erc721CallerNotOwnerOrApproved","type":"error"},{"inputs":[{"internalType":"uint128","name":"collectAmount","type":"uint128"},{"internalType":"uint128","name":"accruedAmount","type":"uint128"}],"name":"ExceedsCollectedFees","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[{"internalType":"uint256","name":"currentTime","type":"uint256"},{"internalType":"uint64","name":"maturity","type":"uint64"}],"name":"NotMatureYet","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"nftId","type":"uint256"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountVeMetisRedeemed","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"maturityTimestamp","type":"uint256"}],"name":"EnterRedemptionQueue","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"nftId","type":"uint256"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint120","name":"amountOut","type":"uint120"}],"name":"RedeemRedemptionTicketNft","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BACKEND_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FEE_PRECISION","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_DEPOSIT_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"METIS","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TIMELOCK_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"config","outputs":[{"internalType":"contract IConfig","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint120","name":"_amountToRedeem","type":"uint120"}],"name":"enterRedemptionQueue","outputs":[{"internalType":"uint256","name":"_nftId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMetisAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNftId","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_nftId","type":"uint256"}],"name":"getNftInformation","outputs":[{"components":[{"internalType":"bool","name":"hasBeenRedeemed","type":"bool"},{"internalType":"uint64","name":"maturity","type":"uint64"},{"internalType":"uint120","name":"amount","type":"uint120"}],"internalType":"struct RedemptionQueue.RedemptionQueueItem","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_config","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"nftId","type":"uint256"}],"name":"nftInformation","outputs":[{"internalType":"bool","name":"hasBeenRedeemed","type":"bool"},{"internalType":"uint64","name":"maturity","type":"uint64"},{"internalType":"uint120","name":"amount","type":"uint120"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_nftId","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"}],"name":"redeemRedemptionTicketNft","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"redemptionQueueAccounting","outputs":[{"internalType":"uint128","name":"etherLiabilities","type":"uint128"},{"internalType":"uint128","name":"unclaimedFees","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"veMetis","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}],"ExceedsCollectedFees(uint128,uint128)":[{"params":{"accruedAmount":"How much fees are actually collectable","collectAmount":"How much fee the ounsender is trying to collect"}}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"NotMatureYet(uint256,uint64)":[{"params":{"currentTime":"Current time.","maturity":"Time of maturity"}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"EnterRedemptionQueue(uint256,address,address,uint256,uint256)":{"params":{"amountVeMetisRedeemed":"The amount of veMetis redeemed","nftId":"The ID of the NFT","recipient":"The recipient of the NFT","sender":"The address of the msg.sender, who is redeeming veMetis"}},"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RedeemRedemptionTicketNft(uint256,address,address,uint120)":{"params":{"amountOut":"the amount of ether sent to the recipient","nftId":"the if of the nft redeemed","recipient":"the recipient of the ether","sender":"the msg.sender"}},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"enterRedemptionQueue(address,uint120)":{"details":"Must call approve/permit on veMetis contract prior to this call","params":{"_amountToRedeem":"Amount of veMetis to redeem","_nftId":"The ID of the veMetisRedemptionTicket NFT","_recipient":"Recipient of the NFT. Must be ERC721 compatible if a contract"}},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"redeemRedemptionTicketNft(uint256,address)":{"params":{"_nftId":"The ID of the NFT","_recipient":"The recipient of the redeemed Metis"}},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"title":"RedemptionQueue","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50613fc4806100206000396000f3fe6080604052600436106101d15760003560e01c806392c2becc116100f7578063c87b56dd11610095578063e985e9c511610064578063e985e9c5146106e7578063f0dadf2e14610724578063f288a2e21461074f578063fe663b811461077a57610211565b8063c87b56dd1461062b578063cc928d5214610668578063e52083c614610691578063e63a391f146106bc57610211565b8063a217fddf116100d1578063a217fddf14610585578063a22cb465146105b0578063b88d4fde146105d9578063c4d66de81461060257610211565b806392c2becc146105045780639336ce801461052f57806395d89b411461055a57610211565b80632e6dd4721161016f578063644c45e01161013e578063644c45e01461044657806370a082311461047157806375b238fc146104ae57806379502c55146104d957610211565b80632e6dd4721461037857806342842e0e146103a35780634f4798ae146103cc5780636352211e1461040957610211565b8063095ea7b3116101ab578063095ea7b3146102bb578063103cf9e3146102e457806316b796391461031057806323b872dd1461034f57610211565b806301ffc9a71461021657806306fdde0314610253578063081812fc1461027e57610211565b36610211576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020890612e79565b60405180910390fd5b600080fd5b34801561022257600080fd5b5061023d60048036038101906102389190612f05565b6107b7565b60405161024a9190612f4d565b60405180910390f35b34801561025f57600080fd5b50610268610899565b6040516102759190612fe7565b60405180910390f35b34801561028a57600080fd5b506102a560048036038101906102a0919061303f565b61093a565b6040516102b291906130ad565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd91906130f4565b610956565b005b3480156102f057600080fd5b506102f961096c565b60405161030792919061315f565b60405180910390f35b34801561031c57600080fd5b506103376004803603810190610332919061303f565b6109b6565b604051610346939291906131d5565b60405180910390f35b34801561035b57600080fd5b506103766004803603810190610371919061320c565b610a1c565b005b34801561038457600080fd5b5061038d610b1e565b60405161039a91906130ad565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c5919061320c565b610b48565b005b3480156103d857600080fd5b506103f360048036038101906103ee919061328b565b610b68565b60405161040091906132da565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b919061303f565b610caf565b60405161043d91906130ad565b60405180910390f35b34801561045257600080fd5b5061045b610cc1565b60405161046891906132f5565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190613310565b610cdf565b6040516104a591906132da565b60405180910390f35b3480156104ba57600080fd5b506104c3610da8565b6040516104d09190613356565b60405180910390f35b3480156104e557600080fd5b506104ee610dcc565b6040516104fb91906133d0565b60405180910390f35b34801561051057600080fd5b50610519610df0565b6040516105269190613356565b60405180910390f35b34801561053b57600080fd5b50610544610e14565b604051610551919061340c565b60405180910390f35b34801561056657600080fd5b5061056f610e3a565b60405161057c9190612fe7565b60405180910390f35b34801561059157600080fd5b5061059a610edb565b6040516105a79190613356565b60405180910390f35b3480156105bc57600080fd5b506105d760048036038101906105d29190613453565b610ee2565b005b3480156105e557600080fd5b5061060060048036038101906105fb91906135c8565b610ef8565b005b34801561060e57600080fd5b5061062960048036038101906106249190613310565b610f1d565b005b34801561063757600080fd5b50610652600480360381019061064d919061303f565b6112be565b60405161065f9190612fe7565b60405180910390f35b34801561067457600080fd5b5061068f600480360381019061068a919061364b565b611327565b005b34801561069d57600080fd5b506106a6611484565b6040516106b391906132da565b60405180910390f35b3480156106c857600080fd5b506106d1611490565b6040516106de91906132f5565b60405180910390f35b3480156106f357600080fd5b5061070e6004803603810190610709919061368b565b611497565b60405161071b9190612f4d565b60405180910390f35b34801561073057600080fd5b50610739611539565b604051610746919061340c565b60405180910390f35b34801561075b57600080fd5b5061076461155f565b6040516107719190613356565b60405180910390f35b34801561078657600080fd5b506107a1600480360381019061079c919061303f565b611583565b6040516107ae919061373a565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061088257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610892575061089182611644565b5b9050919050565b606060006108a56116ae565b90508060000180546108b690613784565b80601f01602080910402602001604051908101604052809291908181526020018280546108e290613784565b801561092f5780601f106109045761010080835404028352916020019161092f565b820191906000526020600020905b81548152906001019060200180831161091257829003601f168201915b505050505091505090565b6000610945826116d6565b5061094f8261175e565b9050919050565b61096882826109636117a9565b6117b1565b5050565b60218060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60226020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900467ffffffffffffffff16908060000160099054906101000a90046effffffffffffffffffffffffffffff16905083565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a8e5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610a8591906130ad565b60405180910390fd5b6000610aa28383610a9d6117a9565b6117c3565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b18578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610b0f939291906137b5565b60405180910390fd5b50505050565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b6383838360405180602001604052806000815250610ef8565b505050565b6000610b726119f0565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610be1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd890613838565b60405180910390fd5b6000826effffffffffffffffffffffffffffff1611610c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2c906138a4565b60405180910390fd5b610c3f8383611a47565b9050610ca13330846effffffffffffffffffffffffffffff16602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611ce5909392919063ffffffff16565b610ca9611d67565b92915050565b6000610cba826116d6565b9050919050565b6000602060009054906101000a900467ffffffffffffffff16905090565b600080610cea6116ae565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d5e5760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610d5591906130ad565b60405180910390fd5b8060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f25cf2b509f2a7f322675b2a5322b182f44ad2c03ac941a0af17c9b178f5d5d5f81565b602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000610e466116ae565b9050806001018054610e5790613784565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8390613784565b8015610ed05780601f10610ea557610100808354040283529160200191610ed0565b820191906000526020600020905b815481529060010190602001808311610eb357829003601f168201915b505050505091505090565b6000801b81565b610ef4610eed6117a9565b8383611d80565b5050565b610f03848484610a1c565b610f17610f0e6117a9565b85858585611efe565b50505050565b6000610f276120af565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610f755750825b9050600060018367ffffffffffffffff16148015610faa575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610fb8575080155b15610fef576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561103f5760018560000160086101000a81548160ff0219169083151502179055505b611048866120d7565b6110bc6040518060400160405280601781526020017f76654d65746973526564656d7074696f6e5469636b65740000000000000000008152506040518060400160405280601981526020017f76654d6574697320526564656d7074696f6e205469636b657400000000000000815250612132565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e59745546040518163ffffffff1660e01b8152600401602060405180830381865afa158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b91906138d9565b602460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639336ce806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121a91906138d9565b602360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156112b65760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516112ad9190613941565b60405180910390a15b505050505050565b60606112c9826116d6565b5060006112d4612148565b905060008151116112f4576040518060200160405280600081525061131f565b806112fe8461215f565b60405160200161130f929190613998565b6040516020818303038152906040525b915050919050565b61132f6119f0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361139e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139590613838565b60405180910390fd5b60006113a98361222d565b905061140d8282604001516effffffffffffffffffffffffffffff16602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125039092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16847f2bb34f95ef23b2c81d8c149136c7ebb303c6525e5795d78e15be628068b2e5d2846040015160405161146f91906139bc565b60405180910390a450611480611d67565b5050565b670de0b6b3a764000081565b620f424081565b6000806114a26116ae565b90508060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b61158b612dde565b602260008381526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160099054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815250509050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300905090565b6000806116e283612582565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361175557826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161174c91906132da565b60405180910390fd5b80915050919050565b6000806117696116ae565b905080600401600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600033905090565b6117be83838360016125cd565b505050565b6000806117ce6116ae565b905060006117db85612582565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461181d5761181c8185876127a1565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118b05761185f6000866000806125cd565b60018260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146119355760018260030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8582600201600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480925050509392505050565b60006119fa612865565b90506002816000015403611a3a576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d76710b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad99190613a03565b42611ae49190613a5f565b905060405180606001604052806000151581526020018267ffffffffffffffff168152602001846effffffffffffffffffffffffffffff1681525060226000602060009054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160096101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550905050611c0b84602060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1661288d565b602060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1691508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16837fc0d0e4dc9b213313c7ee4b0ef42d8c64029a48a77f2e72cf58595683a90ec5fb8685604051611c8e929190613afd565b60405180910390a46020600081819054906101000a900467ffffffffffffffff16611cb890613b26565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505092915050565b611d61848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401611d1a93929190613b56565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128ab565b50505050565b6000611d71612865565b90506001816000018190555050565b6000611d8a6116ae565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dfd57826040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401611df491906130ad565b60405180910390fd5b818160050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051611ef09190612f4d565b60405180910390a350505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156120a8578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401611f5d9493929190613be2565b6020604051808303816000875af1925050508015611f9957506040513d601f19601f82011682018060405250810190611f969190613c43565b60015b61201d573d8060008114611fc9576040519150601f19603f3d011682016040523d82523d6000602084013e611fce565b606091505b50600081510361201557836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161200c91906130ad565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146120a657836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161209d91906130ad565b60405180910390fd5b505b5050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6120df61294d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061212761298d565b61212f61299f565b50565b61213a61294d565b61214482826129a9565b5050565b606060405180602001604052806000815250905090565b60606000600161216e846129e6565b01905060008167ffffffffffffffff81111561218d5761218c61349d565b5b6040519080825280601f01601f1916602001820160405280156121bf5781602001600182028036833780820191505090505b509050600082602001820190505b600115612222578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161221657612215613c70565b5b049450600085036121cd575b819350505050919050565b612235612dde565b61224861224183610caf565b3384612b39565b61227e576040517fe816274400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602260008381526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160099054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff1681525050905080600001511561236e576040517f1b4e0c3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015167ffffffffffffffff164210156123c7574281602001516040517f375394cb0000000000000000000000000000000000000000000000000000000081526004016123be929190613c9f565b60405180910390fd5b6123d082612bfa565b60016022600084815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639336ce806040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248e91906138d9565b73ffffffffffffffffffffffffffffffffffffffff16639dc29fac3083604001516040518363ffffffff1660e01b81526004016124cc929190613cc8565b600060405180830381600087803b1580156124e657600080fd5b505af11580156124fa573d6000803e3d6000fd5b50505050919050565b61257d838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612536929190613cf1565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128ab565b505050565b60008061258d6116ae565b905080600201600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60006125d76116ae565b905081806126125750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15612746576000612622856116d6565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561268d57508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156126a0575061269e8185611497565b155b156126e257836040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016126d991906130ad565b60405180910390fd5b821561274457848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8481600401600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6127ac838383612b39565b61286057600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361282157806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161281891906132da565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612857929190613cf1565b60405180910390fd5b505050565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b6128a7828260405180602001604052806000815250612c80565b5050565b600080602060008451602086016000885af1806128ce576040513d6000823e3d81fd5b3d9250600051915050600082146128e9576001811415612905565b60008473ffffffffffffffffffffffffffffffffffffffff163b145b1561294757836040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161293e91906130ad565b60405180910390fd5b50505050565b612955612ca4565b61298b576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61299561294d565b61299d612cc4565b565b6129a761294d565b565b6129b161294d565b60006129bb6116ae565b9050828160000190816129ce9190613ebc565b50818160010190816129e09190613ebc565b50505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a44577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a3a57612a39613c70565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612a81576d04ee2d6d415b85acef81000000008381612a7757612a76613c70565b5b0492506020810190505b662386f26fc100008310612ab057662386f26fc100008381612aa657612aa5613c70565b5b0492506010810190505b6305f5e1008310612ad9576305f5e1008381612acf57612ace613c70565b5b0492506008810190505b6127108310612afe576127108381612af457612af3613c70565b5b0492506004810190505b60648310612b215760648381612b1757612b16613c70565b5b0492506002810190505b600a8310612b30576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612bf157508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612bb25750612bb18484611497565b5b80612bf057508273ffffffffffffffffffffffffffffffffffffffff16612bd88361175e565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000612c0960008360006117c3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612c7c57816040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612c7391906132da565b60405180910390fd5b5050565b612c8a8383612ce5565b612c9f612c956117a9565b6000858585611efe565b505050565b6000612cae6120af565b60000160089054906101000a900460ff16905090565b612ccc61294d565b6000612cd6612865565b90506001816000018190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612d575760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612d4e91906130ad565b60405180910390fd5b6000612d65838360006117c3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612dd95760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401612dd091906130ad565b60405180910390fd5b505050565b6040518060600160405280600015158152602001600067ffffffffffffffff16815260200160006effffffffffffffffffffffffffffff1681525090565b600082825260208201905092915050565b7f426173653a206e6f7420737570706f7274204d65746973207472616e73666572600082015250565b6000612e63602083612e1c565b9150612e6e82612e2d565b602082019050919050565b60006020820190508181036000830152612e9281612e56565b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ee281612ead565b8114612eed57600080fd5b50565b600081359050612eff81612ed9565b92915050565b600060208284031215612f1b57612f1a612ea3565b5b6000612f2984828501612ef0565b91505092915050565b60008115159050919050565b612f4781612f32565b82525050565b6000602082019050612f626000830184612f3e565b92915050565b600081519050919050565b60005b83811015612f91578082015181840152602081019050612f76565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fb982612f68565b612fc38185612e1c565b9350612fd3818560208601612f73565b612fdc81612f9d565b840191505092915050565b600060208201905081810360008301526130018184612fae565b905092915050565b6000819050919050565b61301c81613009565b811461302757600080fd5b50565b60008135905061303981613013565b92915050565b60006020828403121561305557613054612ea3565b5b60006130638482850161302a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130978261306c565b9050919050565b6130a78161308c565b82525050565b60006020820190506130c2600083018461309e565b92915050565b6130d18161308c565b81146130dc57600080fd5b50565b6000813590506130ee816130c8565b92915050565b6000806040838503121561310b5761310a612ea3565b5b6000613119858286016130df565b925050602061312a8582860161302a565b9150509250929050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61315981613134565b82525050565b60006040820190506131746000830185613150565b6131816020830184613150565b9392505050565b600067ffffffffffffffff82169050919050565b6131a581613188565b82525050565b60006effffffffffffffffffffffffffffff82169050919050565b6131cf816131ab565b82525050565b60006060820190506131ea6000830186612f3e565b6131f7602083018561319c565b61320460408301846131c6565b949350505050565b60008060006060848603121561322557613224612ea3565b5b6000613233868287016130df565b9350506020613244868287016130df565b92505060406132558682870161302a565b9150509250925092565b613268816131ab565b811461327357600080fd5b50565b6000813590506132858161325f565b92915050565b600080604083850312156132a2576132a1612ea3565b5b60006132b0858286016130df565b92505060206132c185828601613276565b9150509250929050565b6132d481613009565b82525050565b60006020820190506132ef60008301846132cb565b92915050565b600060208201905061330a600083018461319c565b92915050565b60006020828403121561332657613325612ea3565b5b6000613334848285016130df565b91505092915050565b6000819050919050565b6133508161333d565b82525050565b600060208201905061336b6000830184613347565b92915050565b6000819050919050565b600061339661339161338c8461306c565b613371565b61306c565b9050919050565b60006133a88261337b565b9050919050565b60006133ba8261339d565b9050919050565b6133ca816133af565b82525050565b60006020820190506133e560008301846133c1565b92915050565b60006133f68261339d565b9050919050565b613406816133eb565b82525050565b600060208201905061342160008301846133fd565b92915050565b61343081612f32565b811461343b57600080fd5b50565b60008135905061344d81613427565b92915050565b6000806040838503121561346a57613469612ea3565b5b6000613478858286016130df565b92505060206134898582860161343e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134d582612f9d565b810181811067ffffffffffffffff821117156134f4576134f361349d565b5b80604052505050565b6000613507612e99565b905061351382826134cc565b919050565b600067ffffffffffffffff8211156135335761353261349d565b5b61353c82612f9d565b9050602081019050919050565b82818337600083830152505050565b600061356b61356684613518565b6134fd565b90508281526020810184848401111561358757613586613498565b5b613592848285613549565b509392505050565b600082601f8301126135af576135ae613493565b5b81356135bf848260208601613558565b91505092915050565b600080600080608085870312156135e2576135e1612ea3565b5b60006135f0878288016130df565b9450506020613601878288016130df565b93505060406136128782880161302a565b925050606085013567ffffffffffffffff81111561363357613632612ea8565b5b61363f8782880161359a565b91505092959194509250565b6000806040838503121561366257613661612ea3565b5b60006136708582860161302a565b9250506020613681858286016130df565b9150509250929050565b600080604083850312156136a2576136a1612ea3565b5b60006136b0858286016130df565b92505060206136c1858286016130df565b9150509250929050565b6136d481612f32565b82525050565b6136e381613188565b82525050565b6136f2816131ab565b82525050565b60608201600082015161370e60008501826136cb565b50602082015161372160208501826136da565b50604082015161373460408501826136e9565b50505050565b600060608201905061374f60008301846136f8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061379c57607f821691505b6020821081036137af576137ae613755565b5b50919050565b60006060820190506137ca600083018661309e565b6137d760208301856132cb565b6137e4604083018461309e565b949350505050565b7f526564656d7074696f6e51756575653a207a65726f2061646472657373000000600082015250565b6000613822601d83612e1c565b915061382d826137ec565b602082019050919050565b6000602082019050818103600083015261385181613815565b9050919050565b7f526564656d7074696f6e51756575653a20616d6f756e74206973207a65726f00600082015250565b600061388e601f83612e1c565b915061389982613858565b602082019050919050565b600060208201905081810360008301526138bd81613881565b9050919050565b6000815190506138d3816130c8565b92915050565b6000602082840312156138ef576138ee612ea3565b5b60006138fd848285016138c4565b91505092915050565b6000819050919050565b600061392b61392661392184613906565b613371565b613188565b9050919050565b61393b81613910565b82525050565b60006020820190506139566000830184613932565b92915050565b600081905092915050565b600061397282612f68565b61397c818561395c565b935061398c818560208601612f73565b80840191505092915050565b60006139a48285613967565b91506139b08284613967565b91508190509392505050565b60006020820190506139d160008301846131c6565b92915050565b6139e081613188565b81146139eb57600080fd5b50565b6000815190506139fd816139d7565b92915050565b600060208284031215613a1957613a18612ea3565b5b6000613a27848285016139ee565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a6a82613188565b9150613a7583613188565b9250828201905067ffffffffffffffff811115613a9557613a94613a30565b5b92915050565b6000613ab6613ab1613aac846131ab565b613371565b613009565b9050919050565b613ac681613a9b565b82525050565b6000613ae7613ae2613add84613188565b613371565b613009565b9050919050565b613af781613acc565b82525050565b6000604082019050613b126000830185613abd565b613b1f6020830184613aee565b9392505050565b6000613b3182613188565b915067ffffffffffffffff8203613b4b57613b4a613a30565b5b600182019050919050565b6000606082019050613b6b600083018661309e565b613b78602083018561309e565b613b8560408301846132cb565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000613bb482613b8d565b613bbe8185613b98565b9350613bce818560208601612f73565b613bd781612f9d565b840191505092915050565b6000608082019050613bf7600083018761309e565b613c04602083018661309e565b613c1160408301856132cb565b8181036060830152613c238184613ba9565b905095945050505050565b600081519050613c3d81612ed9565b92915050565b600060208284031215613c5957613c58612ea3565b5b6000613c6784828501613c2e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000604082019050613cb460008301856132cb565b613cc1602083018461319c565b9392505050565b6000604082019050613cdd600083018561309e565b613cea6020830184613abd565b9392505050565b6000604082019050613d06600083018561309e565b613d1360208301846132cb565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613d7c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d3f565b613d868683613d3f565b95508019841693508086168417925050509392505050565b6000613db9613db4613daf84613009565b613371565b613009565b9050919050565b6000819050919050565b613dd383613d9e565b613de7613ddf82613dc0565b848454613d4c565b825550505050565b600090565b613dfc613def565b613e07818484613dca565b505050565b5b81811015613e2b57613e20600082613df4565b600181019050613e0d565b5050565b601f821115613e7057613e4181613d1a565b613e4a84613d2f565b81016020851015613e59578190505b613e6d613e6585613d2f565b830182613e0c565b50505b505050565b600082821c905092915050565b6000613e9360001984600802613e75565b1980831691505092915050565b6000613eac8383613e82565b9150826002028217905092915050565b613ec582612f68565b67ffffffffffffffff811115613ede57613edd61349d565b5b613ee88254613784565b613ef3828285613e2f565b600060209050601f831160018114613f265760008415613f14578287015190505b613f1e8582613ea0565b865550613f86565b601f198416613f3486613d1a565b60005b82811015613f5c57848901518255600182019150602085019450602081019050613f37565b86831015613f795784890151613f75601f891682613e82565b8355505b6001600288020188555050505b50505050505056fea26469706673582212206ba3d86278027461d8019626c5059a2deb58fd68423dff1c00dc08169aaa4a3864736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FC4 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x92C2BECC GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x6E7 JUMPI DUP1 PUSH4 0xF0DADF2E EQ PUSH2 0x724 JUMPI DUP1 PUSH4 0xF288A2E2 EQ PUSH2 0x74F JUMPI DUP1 PUSH4 0xFE663B81 EQ PUSH2 0x77A JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0xCC928D52 EQ PUSH2 0x668 JUMPI DUP1 PUSH4 0xE52083C6 EQ PUSH2 0x691 JUMPI DUP1 PUSH4 0xE63A391F EQ PUSH2 0x6BC JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x585 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5B0 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x5D9 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x602 JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x92C2BECC EQ PUSH2 0x504 JUMPI DUP1 PUSH4 0x9336CE80 EQ PUSH2 0x52F JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x55A JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x2E6DD472 GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x644C45E0 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x644C45E0 EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x471 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0x79502C55 EQ PUSH2 0x4D9 JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x2E6DD472 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3A3 JUMPI DUP1 PUSH4 0x4F4798AE EQ PUSH2 0x3CC JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x409 JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x103CF9E3 EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x16B79639 EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x34F JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x27E JUMPI PUSH2 0x211 JUMP JUMPDEST CALLDATASIZE PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x208 SWAP1 PUSH2 0x2E79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x238 SWAP2 SWAP1 PUSH2 0x2F05 JUMP JUMPDEST PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24A SWAP2 SWAP1 PUSH2 0x2F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x899 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x2FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A0 SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B2 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DD SWAP2 SWAP1 PUSH2 0x30F4 JUMP JUMPDEST PUSH2 0x956 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F9 PUSH2 0x96C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x307 SWAP3 SWAP2 SWAP1 PUSH2 0x315F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x337 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x9B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x346 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x376 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x320C JUMP JUMPDEST PUSH2 0xA1C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0xB1E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39A SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C5 SWAP2 SWAP1 PUSH2 0x320C JUMP JUMPDEST PUSH2 0xB48 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EE SWAP2 SWAP1 PUSH2 0x328B JUMP JUMPDEST PUSH2 0xB68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x430 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x42B SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0xCAF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x43D SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45B PUSH2 0xCC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x468 SWAP2 SWAP1 PUSH2 0x32F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x498 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x493 SWAP2 SWAP1 PUSH2 0x3310 JUMP JUMPDEST PUSH2 0xCDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A5 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C3 PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EE PUSH2 0xDCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FB SWAP2 SWAP1 PUSH2 0x33D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x519 PUSH2 0xDF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x526 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x544 PUSH2 0xE14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x340C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x56F PUSH2 0xE3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57C SWAP2 SWAP1 PUSH2 0x2FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59A PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A7 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5D2 SWAP2 SWAP1 PUSH2 0x3453 JUMP JUMPDEST PUSH2 0xEE2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x600 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5FB SWAP2 SWAP1 PUSH2 0x35C8 JUMP JUMPDEST PUSH2 0xEF8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x629 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x624 SWAP2 SWAP1 PUSH2 0x3310 JUMP JUMPDEST PUSH2 0xF1D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x652 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x64D SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x12BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65F SWAP2 SWAP1 PUSH2 0x2FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x674 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x68F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x68A SWAP2 SWAP1 PUSH2 0x364B JUMP JUMPDEST PUSH2 0x1327 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A6 PUSH2 0x1484 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6B3 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D1 PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6DE SWAP2 SWAP1 PUSH2 0x32F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x709 SWAP2 SWAP1 PUSH2 0x368B JUMP JUMPDEST PUSH2 0x1497 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71B SWAP2 SWAP1 PUSH2 0x2F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x739 PUSH2 0x1539 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x746 SWAP2 SWAP1 PUSH2 0x340C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x764 PUSH2 0x155F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x771 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x79C SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x1583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7AE SWAP2 SWAP1 PUSH2 0x373A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x882 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x892 JUMPI POP PUSH2 0x891 DUP3 PUSH2 0x1644 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x8A5 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x8B6 SWAP1 PUSH2 0x3784 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8E2 SWAP1 PUSH2 0x3784 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x92F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x904 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x92F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x912 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH2 0x94F DUP3 PUSH2 0x175E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x968 DUP3 DUP3 PUSH2 0x963 PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x17B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x21 DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x22 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA8E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA85 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAA2 DUP4 DUP4 PUSH2 0xA9D PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x17C3 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB18 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB0F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x37B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x24 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB63 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xEF8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB72 PUSH2 0x19F0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD8 SWAP1 PUSH2 0x3838 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0xC35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC2C SWAP1 PUSH2 0x38A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC3F DUP4 DUP4 PUSH2 0x1A47 JUMP JUMPDEST SWAP1 POP PUSH2 0xCA1 CALLER ADDRESS DUP5 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x23 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1CE5 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xCA9 PUSH2 0x1D67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBA DUP3 PUSH2 0x16D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCEA PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD5E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD55 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH32 0x25CF2B509F2A7F322675B2A5322B182F44AD2C03AC941A0AF17C9B178F5D5D5F DUP2 JUMP JUMPDEST PUSH1 0x23 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE46 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xE57 SWAP1 PUSH2 0x3784 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE83 SWAP1 PUSH2 0x3784 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xED0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xEA5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xED0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEB3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0xEF4 PUSH2 0xEED PUSH2 0x17A9 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1D80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xF03 DUP5 DUP5 DUP5 PUSH2 0xA1C JUMP JUMPDEST PUSH2 0xF17 PUSH2 0xF0E PUSH2 0x17A9 JUMP JUMPDEST DUP6 DUP6 DUP6 DUP6 PUSH2 0x1EFE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF27 PUSH2 0x20AF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xF75 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xFAA JUMPI POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xFB8 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0xFEF JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x103F JUMPI PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1048 DUP7 PUSH2 0x20D7 JUMP JUMPDEST PUSH2 0x10BC PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x76654D65746973526564656D7074696F6E5469636B6574000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x76654D6574697320526564656D7074696F6E205469636B657400000000000000 DUP2 MSTORE POP PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE5974554 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1127 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x38D9 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9336CE80 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x38D9 JUMP JUMPDEST PUSH1 0x23 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x12B6 JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x12AD SWAP2 SWAP1 PUSH2 0x3941 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x12C9 DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x12D4 PUSH2 0x2148 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x12F4 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x131F JUMP JUMPDEST DUP1 PUSH2 0x12FE DUP5 PUSH2 0x215F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x130F SWAP3 SWAP2 SWAP1 PUSH2 0x3998 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x132F PUSH2 0x19F0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x139E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1395 SWAP1 PUSH2 0x3838 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13A9 DUP4 PUSH2 0x222D JUMP JUMPDEST SWAP1 POP PUSH2 0x140D DUP3 DUP3 PUSH1 0x40 ADD MLOAD PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x24 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2503 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x2BB34F95EF23B2C81D8C149136C7EBB303C6525E5795D78E15BE628068B2E5D2 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x146F SWAP2 SWAP1 PUSH2 0x39BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH2 0x1480 PUSH2 0x1D67 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14A2 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x5 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH32 0xF66846415D2BF9EABDA9E84793FF9C0EA96D87F50FC41E66AA16469C6A442F05 DUP2 JUMP JUMPDEST PUSH2 0x158B PUSH2 0x2DDE JUMP JUMPDEST PUSH1 0x22 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x16E2 DUP4 PUSH2 0x2582 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1755 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x174C SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1769 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x17BE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x25CD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x17CE PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17DB DUP6 PUSH2 0x2582 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x181D JUMPI PUSH2 0x181C DUP2 DUP6 DUP8 PUSH2 0x27A1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18B0 JUMPI PUSH2 0x185F PUSH1 0x0 DUP7 PUSH1 0x0 DUP1 PUSH2 0x25CD JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1935 JUMPI PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP6 DUP3 PUSH1 0x2 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FA PUSH2 0x2865 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1A3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2D76710B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AD9 SWAP2 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST TIMESTAMP PUSH2 0x1AE4 SWAP2 SWAP1 PUSH2 0x3A5F JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x22 PUSH1 0x0 PUSH1 0x20 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x9 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x1C0B DUP5 PUSH1 0x20 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x288D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP2 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xC0D0E4DC9B213313C7EE4B0EF42D8C64029A48A77F2E72CF58595683A90EC5FB DUP7 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1C8E SWAP3 SWAP2 SWAP1 PUSH2 0x3AFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x20 PUSH1 0x0 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x1CB8 SWAP1 PUSH2 0x3B26 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D61 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D1A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x28AB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D71 PUSH2 0x2865 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D8A PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DFD JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DF4 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x5 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1EF0 SWAP2 SWAP1 PUSH2 0x2F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x20A8 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 DUP7 DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F5D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3BE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F99 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F96 SWAP2 SWAP1 PUSH2 0x3C43 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x201D JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2015 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x200C SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x20A6 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x209D SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x20DF PUSH2 0x294D JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x2127 PUSH2 0x298D JUMP JUMPDEST PUSH2 0x212F PUSH2 0x299F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x213A PUSH2 0x294D JUMP JUMPDEST PUSH2 0x2144 DUP3 DUP3 PUSH2 0x29A9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x216E DUP5 PUSH2 0x29E6 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x218D JUMPI PUSH2 0x218C PUSH2 0x349D JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21BF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2222 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2216 JUMPI PUSH2 0x2215 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x21CD JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2235 PUSH2 0x2DDE JUMP JUMPDEST PUSH2 0x2248 PUSH2 0x2241 DUP4 PUSH2 0xCAF JUMP JUMPDEST CALLER DUP5 PUSH2 0x2B39 JUMP JUMPDEST PUSH2 0x227E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE816274400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x22 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD ISZERO PUSH2 0x236E JUMPI PUSH1 0x40 MLOAD PUSH32 0x1B4E0C3C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND TIMESTAMP LT ISZERO PUSH2 0x23C7 JUMPI TIMESTAMP DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x375394CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23BE SWAP3 SWAP2 SWAP1 PUSH2 0x3C9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23D0 DUP3 PUSH2 0x2BFA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x22 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9336CE80 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x246A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x248E SWAP2 SWAP1 PUSH2 0x38D9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9DC29FAC ADDRESS DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24CC SWAP3 SWAP2 SWAP1 PUSH2 0x3CC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x24FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x257D DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2536 SWAP3 SWAP2 SWAP1 PUSH2 0x3CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x28AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x258D PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25D7 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP2 DUP1 PUSH2 0x2612 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2746 JUMPI PUSH1 0x0 PUSH2 0x2622 DUP6 PUSH2 0x16D6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x268D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x26A0 JUMPI POP PUSH2 0x269E DUP2 DUP6 PUSH2 0x1497 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x26E2 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26D9 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 ISZERO PUSH2 0x2744 JUMPI DUP5 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP5 DUP2 PUSH1 0x4 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x27AC DUP4 DUP4 DUP4 PUSH2 0x2B39 JUMP JUMPDEST PUSH2 0x2860 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2821 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2818 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2857 SWAP3 SWAP2 SWAP1 PUSH2 0x3CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x28A7 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2C80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0x28CE JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST RETURNDATASIZE SWAP3 POP PUSH1 0x0 MLOAD SWAP2 POP POP PUSH1 0x0 DUP3 EQ PUSH2 0x28E9 JUMPI PUSH1 0x1 DUP2 EQ ISZERO PUSH2 0x2905 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x2947 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x293E SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2955 PUSH2 0x2CA4 JUMP JUMPDEST PUSH2 0x298B JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x2995 PUSH2 0x294D JUMP JUMPDEST PUSH2 0x299D PUSH2 0x2CC4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x29A7 PUSH2 0x294D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x29B1 PUSH2 0x294D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BB PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD SWAP1 DUP2 PUSH2 0x29CE SWAP2 SWAP1 PUSH2 0x3EBC JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x1 ADD SWAP1 DUP2 PUSH2 0x29E0 SWAP2 SWAP1 PUSH2 0x3EBC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2A44 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2A3A JUMPI PUSH2 0x2A39 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2A81 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2A77 JUMPI PUSH2 0x2A76 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2AB0 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2AA6 JUMPI PUSH2 0x2AA5 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2AD9 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2ACF JUMPI PUSH2 0x2ACE PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2AFE JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2AF4 JUMPI PUSH2 0x2AF3 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2B21 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2B17 JUMPI PUSH2 0x2B16 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2B30 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2BF1 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2BB2 JUMPI POP PUSH2 0x2BB1 DUP5 DUP5 PUSH2 0x1497 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2BF0 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BD8 DUP4 PUSH2 0x175E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C09 PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x17C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2C7C JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C73 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2C8A DUP4 DUP4 PUSH2 0x2CE5 JUMP JUMPDEST PUSH2 0x2C9F PUSH2 0x2C95 PUSH2 0x17A9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 PUSH2 0x1EFE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CAE PUSH2 0x20AF JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2CCC PUSH2 0x294D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CD6 PUSH2 0x2865 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2D57 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D4E SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D65 DUP4 DUP4 PUSH1 0x0 PUSH2 0x17C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2DD9 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DD0 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x426173653A206E6F7420737570706F7274204D65746973207472616E73666572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E63 PUSH1 0x20 DUP4 PUSH2 0x2E1C JUMP JUMPDEST SWAP2 POP PUSH2 0x2E6E DUP3 PUSH2 0x2E2D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E92 DUP2 PUSH2 0x2E56 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2EE2 DUP2 PUSH2 0x2EAD JUMP JUMPDEST DUP2 EQ PUSH2 0x2EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2EFF DUP2 PUSH2 0x2ED9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F1B JUMPI PUSH2 0x2F1A PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F29 DUP5 DUP3 DUP6 ADD PUSH2 0x2EF0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F47 DUP2 PUSH2 0x2F32 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F62 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2F91 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2F76 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FB9 DUP3 PUSH2 0x2F68 JUMP JUMPDEST PUSH2 0x2FC3 DUP2 DUP6 PUSH2 0x2E1C JUMP JUMPDEST SWAP4 POP PUSH2 0x2FD3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F73 JUMP JUMPDEST PUSH2 0x2FDC DUP2 PUSH2 0x2F9D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3001 DUP2 DUP5 PUSH2 0x2FAE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x301C DUP2 PUSH2 0x3009 JUMP JUMPDEST DUP2 EQ PUSH2 0x3027 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3039 DUP2 PUSH2 0x3013 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3055 JUMPI PUSH2 0x3054 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3063 DUP5 DUP3 DUP6 ADD PUSH2 0x302A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3097 DUP3 PUSH2 0x306C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x30A7 DUP2 PUSH2 0x308C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x30C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x309E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x30D1 DUP2 PUSH2 0x308C JUMP JUMPDEST DUP2 EQ PUSH2 0x30DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x30EE DUP2 PUSH2 0x30C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x310B JUMPI PUSH2 0x310A PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3119 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x312A DUP6 DUP3 DUP7 ADD PUSH2 0x302A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3159 DUP2 PUSH2 0x3134 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3174 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3150 JUMP JUMPDEST PUSH2 0x3181 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3150 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31A5 DUP2 PUSH2 0x3188 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31CF DUP2 PUSH2 0x31AB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31EA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2F3E JUMP JUMPDEST PUSH2 0x31F7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x319C JUMP JUMPDEST PUSH2 0x3204 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x31C6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3225 JUMPI PUSH2 0x3224 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3233 DUP7 DUP3 DUP8 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3244 DUP7 DUP3 DUP8 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3255 DUP7 DUP3 DUP8 ADD PUSH2 0x302A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x3268 DUP2 PUSH2 0x31AB JUMP JUMPDEST DUP2 EQ PUSH2 0x3273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3285 DUP2 PUSH2 0x325F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32A2 JUMPI PUSH2 0x32A1 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x32B0 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x32C1 DUP6 DUP3 DUP7 ADD PUSH2 0x3276 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x32D4 DUP2 PUSH2 0x3009 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32EF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x32CB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x330A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x319C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3326 JUMPI PUSH2 0x3325 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3334 DUP5 DUP3 DUP6 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3350 DUP2 PUSH2 0x333D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x336B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3347 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3396 PUSH2 0x3391 PUSH2 0x338C DUP5 PUSH2 0x306C JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x306C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A8 DUP3 PUSH2 0x337B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33BA DUP3 PUSH2 0x339D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33CA DUP2 PUSH2 0x33AF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x33E5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x33C1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33F6 DUP3 PUSH2 0x339D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3406 DUP2 PUSH2 0x33EB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3421 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x33FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3430 DUP2 PUSH2 0x2F32 JUMP JUMPDEST DUP2 EQ PUSH2 0x343B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x344D DUP2 PUSH2 0x3427 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x346A JUMPI PUSH2 0x3469 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3478 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3489 DUP6 DUP3 DUP7 ADD PUSH2 0x343E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x34D5 DUP3 PUSH2 0x2F9D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x34F4 JUMPI PUSH2 0x34F3 PUSH2 0x349D JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3507 PUSH2 0x2E99 JUMP JUMPDEST SWAP1 POP PUSH2 0x3513 DUP3 DUP3 PUSH2 0x34CC JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3533 JUMPI PUSH2 0x3532 PUSH2 0x349D JUMP JUMPDEST JUMPDEST PUSH2 0x353C DUP3 PUSH2 0x2F9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x356B PUSH2 0x3566 DUP5 PUSH2 0x3518 JUMP JUMPDEST PUSH2 0x34FD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3587 JUMPI PUSH2 0x3586 PUSH2 0x3498 JUMP JUMPDEST JUMPDEST PUSH2 0x3592 DUP5 DUP3 DUP6 PUSH2 0x3549 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x35AF JUMPI PUSH2 0x35AE PUSH2 0x3493 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x35BF DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3558 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x35E2 JUMPI PUSH2 0x35E1 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35F0 DUP8 DUP3 DUP9 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3601 DUP8 DUP3 DUP9 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x3612 DUP8 DUP3 DUP9 ADD PUSH2 0x302A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3633 JUMPI PUSH2 0x3632 PUSH2 0x2EA8 JUMP JUMPDEST JUMPDEST PUSH2 0x363F DUP8 DUP3 DUP9 ADD PUSH2 0x359A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3662 JUMPI PUSH2 0x3661 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3670 DUP6 DUP3 DUP7 ADD PUSH2 0x302A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3681 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36A2 JUMPI PUSH2 0x36A1 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36B0 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x36C1 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x36D4 DUP2 PUSH2 0x2F32 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x36E3 DUP2 PUSH2 0x3188 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x36F2 DUP2 PUSH2 0x31AB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x370E PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x36CB JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x3721 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x36DA JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x3734 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x36E9 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x374F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x36F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x379C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x37AF JUMPI PUSH2 0x37AE PUSH2 0x3755 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x37CA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x37D7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x37E4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x309E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x526564656D7074696F6E51756575653A207A65726F2061646472657373000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3822 PUSH1 0x1D DUP4 PUSH2 0x2E1C JUMP JUMPDEST SWAP2 POP PUSH2 0x382D DUP3 PUSH2 0x37EC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3851 DUP2 PUSH2 0x3815 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526564656D7074696F6E51756575653A20616D6F756E74206973207A65726F00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x388E PUSH1 0x1F DUP4 PUSH2 0x2E1C JUMP JUMPDEST SWAP2 POP PUSH2 0x3899 DUP3 PUSH2 0x3858 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x38BD DUP2 PUSH2 0x3881 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x38D3 DUP2 PUSH2 0x30C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38EF JUMPI PUSH2 0x38EE PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38FD DUP5 DUP3 DUP6 ADD PUSH2 0x38C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x392B PUSH2 0x3926 PUSH2 0x3921 DUP5 PUSH2 0x3906 JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x3188 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x393B DUP2 PUSH2 0x3910 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3956 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3932 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3972 DUP3 PUSH2 0x2F68 JUMP JUMPDEST PUSH2 0x397C DUP2 DUP6 PUSH2 0x395C JUMP JUMPDEST SWAP4 POP PUSH2 0x398C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F73 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39A4 DUP3 DUP6 PUSH2 0x3967 JUMP JUMPDEST SWAP2 POP PUSH2 0x39B0 DUP3 DUP5 PUSH2 0x3967 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x39D1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x31C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x39E0 DUP2 PUSH2 0x3188 JUMP JUMPDEST DUP2 EQ PUSH2 0x39EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x39FD DUP2 PUSH2 0x39D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A19 JUMPI PUSH2 0x3A18 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A27 DUP5 DUP3 DUP6 ADD PUSH2 0x39EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A6A DUP3 PUSH2 0x3188 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A75 DUP4 PUSH2 0x3188 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A95 JUMPI PUSH2 0x3A94 PUSH2 0x3A30 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB6 PUSH2 0x3AB1 PUSH2 0x3AAC DUP5 PUSH2 0x31AB JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x3009 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3AC6 DUP2 PUSH2 0x3A9B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AE7 PUSH2 0x3AE2 PUSH2 0x3ADD DUP5 PUSH2 0x3188 JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x3009 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3AF7 DUP2 PUSH2 0x3ACC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3B12 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3ABD JUMP JUMPDEST PUSH2 0x3B1F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3AEE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B31 DUP3 PUSH2 0x3188 JUMP JUMPDEST SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3B4B JUMPI PUSH2 0x3B4A PUSH2 0x3A30 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3B6B PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3B78 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3B85 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x32CB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BB4 DUP3 PUSH2 0x3B8D JUMP JUMPDEST PUSH2 0x3BBE DUP2 DUP6 PUSH2 0x3B98 JUMP JUMPDEST SWAP4 POP PUSH2 0x3BCE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F73 JUMP JUMPDEST PUSH2 0x3BD7 DUP2 PUSH2 0x2F9D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3BF7 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3C04 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3C11 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x32CB JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3C23 DUP2 DUP5 PUSH2 0x3BA9 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3C3D DUP2 PUSH2 0x2ED9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C59 JUMPI PUSH2 0x3C58 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3C67 DUP5 DUP3 DUP6 ADD PUSH2 0x3C2E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3CB4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x3CC1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x319C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3CDD PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3CEA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3ABD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3D06 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3D13 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x32CB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3D7C PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3D3F JUMP JUMPDEST PUSH2 0x3D86 DUP7 DUP4 PUSH2 0x3D3F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DB9 PUSH2 0x3DB4 PUSH2 0x3DAF DUP5 PUSH2 0x3009 JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x3009 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3DD3 DUP4 PUSH2 0x3D9E JUMP JUMPDEST PUSH2 0x3DE7 PUSH2 0x3DDF DUP3 PUSH2 0x3DC0 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3D4C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3DFC PUSH2 0x3DEF JUMP JUMPDEST PUSH2 0x3E07 DUP2 DUP5 DUP5 PUSH2 0x3DCA JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3E2B JUMPI PUSH2 0x3E20 PUSH1 0x0 DUP3 PUSH2 0x3DF4 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3E0D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3E70 JUMPI PUSH2 0x3E41 DUP2 PUSH2 0x3D1A JUMP JUMPDEST PUSH2 0x3E4A DUP5 PUSH2 0x3D2F JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3E59 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3E6D PUSH2 0x3E65 DUP6 PUSH2 0x3D2F JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3E0C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E93 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3E75 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EAC DUP4 DUP4 PUSH2 0x3E82 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3EC5 DUP3 PUSH2 0x2F68 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EDE JUMPI PUSH2 0x3EDD PUSH2 0x349D JUMP JUMPDEST JUMPDEST PUSH2 0x3EE8 DUP3 SLOAD PUSH2 0x3784 JUMP JUMPDEST PUSH2 0x3EF3 DUP3 DUP3 DUP6 PUSH2 0x3E2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3F26 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3F14 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3F1E DUP6 DUP3 PUSH2 0x3EA0 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3F86 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3F34 DUP7 PUSH2 0x3D1A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3F5C JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3F37 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3F79 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3F75 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3E82 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xA3D86278027461D8019626C5 SDIV SWAP11 0x2D 0xEB PC REVERT PUSH9 0x423DFF1C00DC08169A 0xAA 0x4A CODESIZE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"587:8845:24:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_6714":{"entryPoint":3496,"id":6714,"parameterSlots":0,"returnSlots":0},"@BACKEND_ROLE_6720":{"entryPoint":3568,"id":6720,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_6702":{"entryPoint":3803,"id":6702,"parameterSlots":0,"returnSlots":0},"@FEE_PRECISION_6698":{"entryPoint":5264,"id":6698,"parameterSlots":0,"returnSlots":0},"@INITIAL_DEPOSIT_AMOUNT_6724":{"entryPoint":5252,"id":6724,"parameterSlots":0,"returnSlots":0},"@METIS_6926":{"entryPoint":5433,"id":6926,"parameterSlots":0,"returnSlots":0},"@TIMELOCK_ROLE_6708":{"entryPoint":5471,"id":6708,"parameterSlots":0,"returnSlots":0},"@_6865":{"entryPoint":null,"id":6865,"parameterSlots":0,"returnSlots":0},"@__Base_init_6803":{"entryPoint":8407,"id":6803,"parameterSlots":1,"returnSlots":0},"@__Context_init_1346":{"entryPoint":10655,"id":1346,"parameterSlots":0,"returnSlots":0},"@__ERC721_init_340":{"entryPoint":8498,"id":340,"parameterSlots":2,"returnSlots":0},"@__ERC721_init_unchained_368":{"entryPoint":10665,"id":368,"parameterSlots":2,"returnSlots":0},"@__ReentrancyGuard_init_1419":{"entryPoint":10637,"id":1419,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_1437":{"entryPoint":11460,"id":1437,"parameterSlots":0,"returnSlots":0},"@_approve_1184":{"entryPoint":6065,"id":1184,"parameterSlots":3,"returnSlots":0},"@_approve_1258":{"entryPoint":9677,"id":1258,"parameterSlots":4,"returnSlots":0},"@_baseURI_524":{"entryPoint":8520,"id":524,"parameterSlots":0,"returnSlots":1},"@_burn_1058":{"entryPoint":11258,"id":1058,"parameterSlots":1,"returnSlots":0},"@_callOptionalReturn_2222":{"entryPoint":10411,"id":2222,"parameterSlots":2,"returnSlots":0},"@_checkAuthorized_804":{"entryPoint":10145,"id":804,"parameterSlots":3,"returnSlots":0},"@_checkInitializing_175":{"entryPoint":10573,"id":175,"parameterSlots":0,"returnSlots":0},"@_enterRedemptionQueueCore_7037":{"entryPoint":6727,"id":7037,"parameterSlots":2,"returnSlots":1},"@_getApproved_731":{"entryPoint":5982,"id":731,"parameterSlots":1,"returnSlots":1},"@_getERC721Storage_324":{"entryPoint":5806,"id":324,"parameterSlots":0,"returnSlots":1},"@_getInitializableStorage_252":{"entryPoint":8367,"id":252,"parameterSlots":0,"returnSlots":1},"@_getReentrancyGuardStorage_1407":{"entryPoint":10341,"id":1407,"parameterSlots":0,"returnSlots":1},"@_isAuthorized_767":{"entryPoint":11065,"id":767,"parameterSlots":3,"returnSlots":1},"@_isInitializing_243":{"entryPoint":11428,"id":243,"parameterSlots":0,"returnSlots":1},"@_mint_980":{"entryPoint":11493,"id":980,"parameterSlots":2,"returnSlots":0},"@_msgSender_1361":{"entryPoint":6057,"id":1361,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_1489":{"entryPoint":7527,"id":1489,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_1473":{"entryPoint":6640,"id":1473,"parameterSlots":0,"returnSlots":0},"@_ownerOf_711":{"entryPoint":9602,"id":711,"parameterSlots":1,"returnSlots":1},"@_redeemRedemptionTicketNftPre_7161":{"entryPoint":8749,"id":7161,"parameterSlots":1,"returnSlots":1},"@_requireOwned_1332":{"entryPoint":5846,"id":1332,"parameterSlots":1,"returnSlots":1},"@_safeMint_1025":{"entryPoint":11392,"id":1025,"parameterSlots":3,"returnSlots":0},"@_safeMint_995":{"entryPoint":10381,"id":995,"parameterSlots":2,"returnSlots":0},"@_setApprovalForAll_1303":{"entryPoint":7552,"id":1303,"parameterSlots":3,"returnSlots":0},"@_update_930":{"entryPoint":6083,"id":930,"parameterSlots":3,"returnSlots":1},"@approve_540":{"entryPoint":2390,"id":540,"parameterSlots":2,"returnSlots":0},"@balanceOf_434":{"entryPoint":3295,"id":434,"parameterSlots":1,"returnSlots":1},"@checkOnERC721Received_2503":{"entryPoint":7934,"id":2503,"parameterSlots":5,"returnSlots":0},"@config_6728":{"entryPoint":3532,"id":6728,"parameterSlots":0,"returnSlots":0},"@enterRedemptionQueue_7086":{"entryPoint":2920,"id":7086,"parameterSlots":2,"returnSlots":1},"@getApproved_557":{"entryPoint":2362,"id":557,"parameterSlots":1,"returnSlots":1},"@getMetisAddress_7261":{"entryPoint":2846,"id":7261,"parameterSlots":0,"returnSlots":1},"@getNftId_7214":{"entryPoint":3265,"id":7214,"parameterSlots":0,"returnSlots":1},"@getNftInformation_7227":{"entryPoint":5507,"id":7227,"parameterSlots":1,"returnSlots":1},"@initialize_6983":{"entryPoint":3869,"id":6983,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_597":{"entryPoint":5271,"id":597,"parameterSlots":2,"returnSlots":1},"@log10_4547":{"entryPoint":10726,"id":4547,"parameterSlots":1,"returnSlots":1},"@name_463":{"entryPoint":2201,"id":463,"parameterSlots":0,"returnSlots":1},"@nftInformation_6920":{"entryPoint":2486,"id":6920,"parameterSlots":0,"returnSlots":0},"@ownerOf_447":{"entryPoint":3247,"id":447,"parameterSlots":1,"returnSlots":1},"@redeemRedemptionTicketNft_7206":{"entryPoint":4903,"id":7206,"parameterSlots":2,"returnSlots":0},"@redemptionQueueAccounting_6914":{"entryPoint":2412,"id":6914,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_1927":{"entryPoint":7397,"id":1927,"parameterSlots":4,"returnSlots":0},"@safeTransferFrom_661":{"entryPoint":2888,"id":661,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_691":{"entryPoint":3832,"id":691,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1900":{"entryPoint":9475,"id":1900,"parameterSlots":3,"returnSlots":0},"@setApprovalForAll_573":{"entryPoint":3810,"id":573,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1547":{"entryPoint":5700,"id":1547,"parameterSlots":1,"returnSlots":1},"@supportsInterface_399":{"entryPoint":1975,"id":399,"parameterSlots":1,"returnSlots":1},"@symbol_479":{"entryPoint":3642,"id":479,"parameterSlots":0,"returnSlots":1},"@toString_2905":{"entryPoint":8543,"id":2905,"parameterSlots":1,"returnSlots":1},"@tokenURI_515":{"entryPoint":4798,"id":515,"parameterSlots":1,"returnSlots":1},"@transferFrom_643":{"entryPoint":2588,"id":643,"parameterSlots":3,"returnSlots":0},"@veMetis_6923":{"entryPoint":3604,"id":6923,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":13656,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":12511,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":14532,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":13374,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":12016,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":15406,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":13722,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint120":{"entryPoint":12918,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":12330,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":14830,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":13072,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":14553,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":13963,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12812,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":13768,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":13395,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint120":{"entryPoint":12939,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":12532,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":12037,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":15427,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":12351,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":13899,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64_fromMemory":{"entryPoint":14851,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":12446,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool":{"entryPoint":14027,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":12094,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":13127,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":15273,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_IConfig_$7382_to_t_address_fromStack":{"entryPoint":13249,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_contract$_IERC20_$1853_to_t_address_fromStack":{"entryPoint":13309,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack":{"entryPoint":14642,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":12206,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":14695,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833_to_t_string_memory_ptr_fromStack":{"entryPoint":14465,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6_to_t_string_memory_ptr_fromStack":{"entryPoint":14357,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032_to_t_string_memory_ptr_fromStack":{"entryPoint":11862,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_RedemptionQueueItem_$6902_memory_ptr_to_t_struct$_RedemptionQueueItem_$6902_memory_ptr_fromStack":{"entryPoint":14072,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint120_to_t_uint120":{"entryPoint":14057,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint120_to_t_uint120_fromStack":{"entryPoint":12742,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint120_to_t_uint256_fromStack":{"entryPoint":15037,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint128_to_t_uint128_fromStack":{"entryPoint":12624,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13003,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint256_fromStack":{"entryPoint":15086,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64":{"entryPoint":14042,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":12700,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14744,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":12461,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":15190,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":15330,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint120__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":15560,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":15601,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":14261,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":12109,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_uint64_t_uint120__to_t_bool_t_uint64_t_uint120__fromStack_reversed":{"entryPoint":12757,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":13142,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IConfig_$7382__to_t_address__fromStack_reversed":{"entryPoint":13264,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$1853__to_t_address__fromStack_reversed":{"entryPoint":13324,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed":{"entryPoint":14657,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12263,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14500,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14392,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11897,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_RedemptionQueueItem_$6902_memory_ptr__to_t_struct$_RedemptionQueueItem_$6902_memory_ptr__fromStack_reversed":{"entryPoint":14138,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint120__to_t_uint120__fromStack_reversed":{"entryPoint":14780,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint120_t_uint64__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":15101,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed":{"entryPoint":12639,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13018,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint64__to_t_uint256_t_uint64__fromStack_reversed":{"entryPoint":15519,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":13045,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":13565,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":11929,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":13592,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":15642,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":15245,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":12136,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":15256,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":11804,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":14684,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint64":{"entryPoint":14943,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":15919,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":12428,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":12082,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":13117,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":11949,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":14598,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint120":{"entryPoint":12715,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint128":{"entryPoint":12596,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":12396,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":12297,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":12680,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":15884,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_contract$_IConfig_$7382_to_t_address":{"entryPoint":13231,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IERC20_$1853_to_t_address":{"entryPoint":13291,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint64":{"entryPoint":14608,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint120_to_t_uint256":{"entryPoint":15003,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":13213,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":13179,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":15774,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint64_to_t_uint256":{"entryPoint":15052,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":16060,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":13641,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":12147,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":15663,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":14212,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":16032,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":13516,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":13169,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint64":{"entryPoint":15142,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":16002,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":14896,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":15472,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":14165,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":13469,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":15808,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":13459,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":13464,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":11944,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":11939,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":12189,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":15679,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":15989,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":15860,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833":{"entryPoint":14424,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6":{"entryPoint":14316,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032":{"entryPoint":11821,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":15692,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":15818,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":12488,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":13351,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":11993,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint120":{"entryPoint":12895,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":12307,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":14807,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":15855,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:32991:27","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:27"},"nodeType":"YulFunctionCall","src":"113:19:27"},"nodeType":"YulExpressionStatement","src":"113:19:27"},{"nodeType":"YulAssignment","src":"141:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:27"},"nodeType":"YulFunctionCall","src":"156:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:27","type":""}],"src":"7:169:27"},{"body":{"nodeType":"YulBlock","src":"288:76:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:27"},"nodeType":"YulFunctionCall","src":"306:14:27"},{"hexValue":"426173653a206e6f7420737570706f7274204d65746973207472616e73666572","kind":"string","nodeType":"YulLiteral","src":"322:34:27","type":"","value":"Base: not support Metis transfer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:27"},"nodeType":"YulFunctionCall","src":"299:58:27"},"nodeType":"YulExpressionStatement","src":"299:58:27"}]},"name":"store_literal_in_memory_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:27","type":""}],"src":"182:182:27"},{"body":{"nodeType":"YulBlock","src":"516:220:27","statements":[{"nodeType":"YulAssignment","src":"526:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"592:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"597:2:27","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"533:58:27"},"nodeType":"YulFunctionCall","src":"533:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"526:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"698:3:27"}],"functionName":{"name":"store_literal_in_memory_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032","nodeType":"YulIdentifier","src":"609:88:27"},"nodeType":"YulFunctionCall","src":"609:93:27"},"nodeType":"YulExpressionStatement","src":"609:93:27"},{"nodeType":"YulAssignment","src":"711:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"722:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"727:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"718:3:27"},"nodeType":"YulFunctionCall","src":"718:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"711:3:27"}]}]},"name":"abi_encode_t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"504:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"512:3:27","type":""}],"src":"370:366:27"},{"body":{"nodeType":"YulBlock","src":"913:248:27","statements":[{"nodeType":"YulAssignment","src":"923:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"935:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"946:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"931:3:27"},"nodeType":"YulFunctionCall","src":"931:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"923:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"970:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"981:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"966:3:27"},"nodeType":"YulFunctionCall","src":"966:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"989:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"995:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"985:3:27"},"nodeType":"YulFunctionCall","src":"985:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"959:6:27"},"nodeType":"YulFunctionCall","src":"959:47:27"},"nodeType":"YulExpressionStatement","src":"959:47:27"},{"nodeType":"YulAssignment","src":"1015:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1149:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1023:124:27"},"nodeType":"YulFunctionCall","src":"1023:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1015:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"893:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"908:4:27","type":""}],"src":"742:419:27"},{"body":{"nodeType":"YulBlock","src":"1207:35:27","statements":[{"nodeType":"YulAssignment","src":"1217:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1233:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1227:5:27"},"nodeType":"YulFunctionCall","src":"1227:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1217:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1200:6:27","type":""}],"src":"1167:75:27"},{"body":{"nodeType":"YulBlock","src":"1337:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1354:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1357:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1347:6:27"},"nodeType":"YulFunctionCall","src":"1347:12:27"},"nodeType":"YulExpressionStatement","src":"1347:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1248:117:27"},{"body":{"nodeType":"YulBlock","src":"1460:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1477:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1480:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1470:6:27"},"nodeType":"YulFunctionCall","src":"1470:12:27"},"nodeType":"YulExpressionStatement","src":"1470:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1371:117:27"},{"body":{"nodeType":"YulBlock","src":"1538:105:27","statements":[{"nodeType":"YulAssignment","src":"1548:89:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1563:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"1570:66:27","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1559:3:27"},"nodeType":"YulFunctionCall","src":"1559:78:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1548:7:27"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1520:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1530:7:27","type":""}],"src":"1494:149:27"},{"body":{"nodeType":"YulBlock","src":"1691:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"1747:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1756:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1759:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1749:6:27"},"nodeType":"YulFunctionCall","src":"1749:12:27"},"nodeType":"YulExpressionStatement","src":"1749:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1714:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1738:5:27"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"1721:16:27"},"nodeType":"YulFunctionCall","src":"1721:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1711:2:27"},"nodeType":"YulFunctionCall","src":"1711:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:27"},"nodeType":"YulFunctionCall","src":"1704:42:27"},"nodeType":"YulIf","src":"1701:62:27"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1684:5:27","type":""}],"src":"1649:120:27"},{"body":{"nodeType":"YulBlock","src":"1826:86:27","statements":[{"nodeType":"YulAssignment","src":"1836:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1858:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1845:12:27"},"nodeType":"YulFunctionCall","src":"1845:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1836:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1900:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"1874:25:27"},"nodeType":"YulFunctionCall","src":"1874:32:27"},"nodeType":"YulExpressionStatement","src":"1874:32:27"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1804:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"1812:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1820:5:27","type":""}],"src":"1775:137:27"},{"body":{"nodeType":"YulBlock","src":"1983:262:27","statements":[{"body":{"nodeType":"YulBlock","src":"2029:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2031:77:27"},"nodeType":"YulFunctionCall","src":"2031:79:27"},"nodeType":"YulExpressionStatement","src":"2031:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2004:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2013:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2000:3:27"},"nodeType":"YulFunctionCall","src":"2000:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"2025:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1996:3:27"},"nodeType":"YulFunctionCall","src":"1996:32:27"},"nodeType":"YulIf","src":"1993:119:27"},{"nodeType":"YulBlock","src":"2122:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2137:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2151:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2141:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2166:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2200:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2211:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2196:3:27"},"nodeType":"YulFunctionCall","src":"2196:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2220:7:27"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"2176:19:27"},"nodeType":"YulFunctionCall","src":"2176:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2166:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1953:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1964:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1976:6:27","type":""}],"src":"1918:327:27"},{"body":{"nodeType":"YulBlock","src":"2293:48:27","statements":[{"nodeType":"YulAssignment","src":"2303:32:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2328:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2321:6:27"},"nodeType":"YulFunctionCall","src":"2321:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2314:6:27"},"nodeType":"YulFunctionCall","src":"2314:21:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2303:7:27"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2275:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2285:7:27","type":""}],"src":"2251:90:27"},{"body":{"nodeType":"YulBlock","src":"2406:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2423:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2443:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"2428:14:27"},"nodeType":"YulFunctionCall","src":"2428:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2416:6:27"},"nodeType":"YulFunctionCall","src":"2416:34:27"},"nodeType":"YulExpressionStatement","src":"2416:34:27"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2394:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2401:3:27","type":""}],"src":"2347:109:27"},{"body":{"nodeType":"YulBlock","src":"2554:118:27","statements":[{"nodeType":"YulAssignment","src":"2564:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2576:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2587:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2572:3:27"},"nodeType":"YulFunctionCall","src":"2572:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2564:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2638:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2651:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2662:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2647:3:27"},"nodeType":"YulFunctionCall","src":"2647:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"2600:37:27"},"nodeType":"YulFunctionCall","src":"2600:65:27"},"nodeType":"YulExpressionStatement","src":"2600:65:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2526:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2538:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2549:4:27","type":""}],"src":"2462:210:27"},{"body":{"nodeType":"YulBlock","src":"2737:40:27","statements":[{"nodeType":"YulAssignment","src":"2748:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2764:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2758:5:27"},"nodeType":"YulFunctionCall","src":"2758:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2748:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2720:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2730:6:27","type":""}],"src":"2678:99:27"},{"body":{"nodeType":"YulBlock","src":"2845:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2855:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2864:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2859:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"2924:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2949:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"2954:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2945:3:27"},"nodeType":"YulFunctionCall","src":"2945:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2968:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"2973:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:27"},"nodeType":"YulFunctionCall","src":"2964:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2958:5:27"},"nodeType":"YulFunctionCall","src":"2958:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2938:6:27"},"nodeType":"YulFunctionCall","src":"2938:39:27"},"nodeType":"YulExpressionStatement","src":"2938:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2885:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"2888:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2882:2:27"},"nodeType":"YulFunctionCall","src":"2882:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2896:19:27","statements":[{"nodeType":"YulAssignment","src":"2898:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2907:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"2910:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2903:3:27"},"nodeType":"YulFunctionCall","src":"2903:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2898:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"2878:3:27","statements":[]},"src":"2874:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3007:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"3012:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3003:3:27"},"nodeType":"YulFunctionCall","src":"3003:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"3021:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2996:6:27"},"nodeType":"YulFunctionCall","src":"2996:27:27"},"nodeType":"YulExpressionStatement","src":"2996:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2827:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2832:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"2837:6:27","type":""}],"src":"2783:246:27"},{"body":{"nodeType":"YulBlock","src":"3083:54:27","statements":[{"nodeType":"YulAssignment","src":"3093:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3111:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"3118:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3107:3:27"},"nodeType":"YulFunctionCall","src":"3107:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3127:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3123:3:27"},"nodeType":"YulFunctionCall","src":"3123:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3103:3:27"},"nodeType":"YulFunctionCall","src":"3103:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3093:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3066:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3076:6:27","type":""}],"src":"3035:102:27"},{"body":{"nodeType":"YulBlock","src":"3235:285:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3245:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3292:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3259:32:27"},"nodeType":"YulFunctionCall","src":"3259:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3249:6:27","type":""}]},{"nodeType":"YulAssignment","src":"3307:78:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3373:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"3378:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3314:58:27"},"nodeType":"YulFunctionCall","src":"3314:71:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3307:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3433:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"3440:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3429:3:27"},"nodeType":"YulFunctionCall","src":"3429:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"3447:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"3452:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3394:34:27"},"nodeType":"YulFunctionCall","src":"3394:65:27"},"nodeType":"YulExpressionStatement","src":"3394:65:27"},{"nodeType":"YulAssignment","src":"3468:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3479:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3506:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3484:21:27"},"nodeType":"YulFunctionCall","src":"3484:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3475:3:27"},"nodeType":"YulFunctionCall","src":"3475:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3468:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3216:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3223:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3231:3:27","type":""}],"src":"3143:377:27"},{"body":{"nodeType":"YulBlock","src":"3644:195:27","statements":[{"nodeType":"YulAssignment","src":"3654:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3666:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3677:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3662:3:27"},"nodeType":"YulFunctionCall","src":"3662:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3654:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3701:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3712:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3697:3:27"},"nodeType":"YulFunctionCall","src":"3697:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3720:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3726:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3716:3:27"},"nodeType":"YulFunctionCall","src":"3716:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3690:6:27"},"nodeType":"YulFunctionCall","src":"3690:47:27"},"nodeType":"YulExpressionStatement","src":"3690:47:27"},{"nodeType":"YulAssignment","src":"3746:86:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3818:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"3827:4:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3754:63:27"},"nodeType":"YulFunctionCall","src":"3754:78:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3746:4:27"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3616:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3628:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3639:4:27","type":""}],"src":"3526:313:27"},{"body":{"nodeType":"YulBlock","src":"3890:32:27","statements":[{"nodeType":"YulAssignment","src":"3900:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"3911:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3900:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3872:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3882:7:27","type":""}],"src":"3845:77:27"},{"body":{"nodeType":"YulBlock","src":"3971:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"4028:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4037:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4040:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4030:6:27"},"nodeType":"YulFunctionCall","src":"4030:12:27"},"nodeType":"YulExpressionStatement","src":"4030:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3994:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4019:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4001:17:27"},"nodeType":"YulFunctionCall","src":"4001:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3991:2:27"},"nodeType":"YulFunctionCall","src":"3991:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3984:6:27"},"nodeType":"YulFunctionCall","src":"3984:43:27"},"nodeType":"YulIf","src":"3981:63:27"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3964:5:27","type":""}],"src":"3928:122:27"},{"body":{"nodeType":"YulBlock","src":"4108:87:27","statements":[{"nodeType":"YulAssignment","src":"4118:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4140:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4127:12:27"},"nodeType":"YulFunctionCall","src":"4127:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4118:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4183:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"4156:26:27"},"nodeType":"YulFunctionCall","src":"4156:33:27"},"nodeType":"YulExpressionStatement","src":"4156:33:27"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4086:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"4094:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4102:5:27","type":""}],"src":"4056:139:27"},{"body":{"nodeType":"YulBlock","src":"4267:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"4313:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4315:77:27"},"nodeType":"YulFunctionCall","src":"4315:79:27"},"nodeType":"YulExpressionStatement","src":"4315:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4288:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4297:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4284:3:27"},"nodeType":"YulFunctionCall","src":"4284:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"4309:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4280:3:27"},"nodeType":"YulFunctionCall","src":"4280:32:27"},"nodeType":"YulIf","src":"4277:119:27"},{"nodeType":"YulBlock","src":"4406:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4421:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4435:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4425:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4450:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4485:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4496:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4481:3:27"},"nodeType":"YulFunctionCall","src":"4481:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4505:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4460:20:27"},"nodeType":"YulFunctionCall","src":"4460:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4450:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4237:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4248:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4260:6:27","type":""}],"src":"4201:329:27"},{"body":{"nodeType":"YulBlock","src":"4581:81:27","statements":[{"nodeType":"YulAssignment","src":"4591:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4606:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"4613:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4602:3:27"},"nodeType":"YulFunctionCall","src":"4602:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4591:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4563:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4573:7:27","type":""}],"src":"4536:126:27"},{"body":{"nodeType":"YulBlock","src":"4713:51:27","statements":[{"nodeType":"YulAssignment","src":"4723:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4752:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4734:17:27"},"nodeType":"YulFunctionCall","src":"4734:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4723:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4695:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4705:7:27","type":""}],"src":"4668:96:27"},{"body":{"nodeType":"YulBlock","src":"4835:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4852:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4875:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4857:17:27"},"nodeType":"YulFunctionCall","src":"4857:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4845:6:27"},"nodeType":"YulFunctionCall","src":"4845:37:27"},"nodeType":"YulExpressionStatement","src":"4845:37:27"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4823:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4830:3:27","type":""}],"src":"4770:118:27"},{"body":{"nodeType":"YulBlock","src":"4992:124:27","statements":[{"nodeType":"YulAssignment","src":"5002:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5014:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5025:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5010:3:27"},"nodeType":"YulFunctionCall","src":"5010:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5002:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5082:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5095:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5106:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5091:3:27"},"nodeType":"YulFunctionCall","src":"5091:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5038:43:27"},"nodeType":"YulFunctionCall","src":"5038:71:27"},"nodeType":"YulExpressionStatement","src":"5038:71:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4964:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4976:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4987:4:27","type":""}],"src":"4894:222:27"},{"body":{"nodeType":"YulBlock","src":"5165:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"5222:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5231:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5234:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5224:6:27"},"nodeType":"YulFunctionCall","src":"5224:12:27"},"nodeType":"YulExpressionStatement","src":"5224:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5188:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5213:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5195:17:27"},"nodeType":"YulFunctionCall","src":"5195:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5185:2:27"},"nodeType":"YulFunctionCall","src":"5185:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5178:6:27"},"nodeType":"YulFunctionCall","src":"5178:43:27"},"nodeType":"YulIf","src":"5175:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5158:5:27","type":""}],"src":"5122:122:27"},{"body":{"nodeType":"YulBlock","src":"5302:87:27","statements":[{"nodeType":"YulAssignment","src":"5312:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5334:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5321:12:27"},"nodeType":"YulFunctionCall","src":"5321:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5312:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5377:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5350:26:27"},"nodeType":"YulFunctionCall","src":"5350:33:27"},"nodeType":"YulExpressionStatement","src":"5350:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5280:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"5288:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5296:5:27","type":""}],"src":"5250:139:27"},{"body":{"nodeType":"YulBlock","src":"5478:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"5524:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5526:77:27"},"nodeType":"YulFunctionCall","src":"5526:79:27"},"nodeType":"YulExpressionStatement","src":"5526:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5499:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"5508:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5495:3:27"},"nodeType":"YulFunctionCall","src":"5495:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"5520:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5491:3:27"},"nodeType":"YulFunctionCall","src":"5491:32:27"},"nodeType":"YulIf","src":"5488:119:27"},{"nodeType":"YulBlock","src":"5617:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5632:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5646:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5636:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5661:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5696:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5707:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5692:3:27"},"nodeType":"YulFunctionCall","src":"5692:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5716:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5671:20:27"},"nodeType":"YulFunctionCall","src":"5671:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5661:6:27"}]}]},{"nodeType":"YulBlock","src":"5744:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5759:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5773:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5763:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5789:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5824:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5835:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5820:3:27"},"nodeType":"YulFunctionCall","src":"5820:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5844:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5799:20:27"},"nodeType":"YulFunctionCall","src":"5799:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5789:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5440:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5451:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5463:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5471:6:27","type":""}],"src":"5395:474:27"},{"body":{"nodeType":"YulBlock","src":"5920:73:27","statements":[{"nodeType":"YulAssignment","src":"5930:57:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5945:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"5952:34:27","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5941:3:27"},"nodeType":"YulFunctionCall","src":"5941:46:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5930:7:27"}]}]},"name":"cleanup_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5902:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5912:7:27","type":""}],"src":"5875:118:27"},{"body":{"nodeType":"YulBlock","src":"6064:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6081:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6104:5:27"}],"functionName":{"name":"cleanup_t_uint128","nodeType":"YulIdentifier","src":"6086:17:27"},"nodeType":"YulFunctionCall","src":"6086:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6074:6:27"},"nodeType":"YulFunctionCall","src":"6074:37:27"},"nodeType":"YulExpressionStatement","src":"6074:37:27"}]},"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6052:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6059:3:27","type":""}],"src":"5999:118:27"},{"body":{"nodeType":"YulBlock","src":"6249:206:27","statements":[{"nodeType":"YulAssignment","src":"6259:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6271:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6282:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6267:3:27"},"nodeType":"YulFunctionCall","src":"6267:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6259:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6339:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6352:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6363:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6348:3:27"},"nodeType":"YulFunctionCall","src":"6348:17:27"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulIdentifier","src":"6295:43:27"},"nodeType":"YulFunctionCall","src":"6295:71:27"},"nodeType":"YulExpressionStatement","src":"6295:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6420:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6433:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6444:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6429:3:27"},"nodeType":"YulFunctionCall","src":"6429:18:27"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulIdentifier","src":"6376:43:27"},"nodeType":"YulFunctionCall","src":"6376:72:27"},"nodeType":"YulExpressionStatement","src":"6376:72:27"}]},"name":"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6213:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6225:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6233:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6244:4:27","type":""}],"src":"6123:332:27"},{"body":{"nodeType":"YulBlock","src":"6505:57:27","statements":[{"nodeType":"YulAssignment","src":"6515:41:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6530:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"6537:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6526:3:27"},"nodeType":"YulFunctionCall","src":"6526:30:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6515:7:27"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6487:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6497:7:27","type":""}],"src":"6461:101:27"},{"body":{"nodeType":"YulBlock","src":"6631:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6648:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6670:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"6653:16:27"},"nodeType":"YulFunctionCall","src":"6653:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6641:6:27"},"nodeType":"YulFunctionCall","src":"6641:36:27"},"nodeType":"YulExpressionStatement","src":"6641:36:27"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6619:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6626:3:27","type":""}],"src":"6568:115:27"},{"body":{"nodeType":"YulBlock","src":"6734:71:27","statements":[{"nodeType":"YulAssignment","src":"6744:55:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6759:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"6766:32:27","type":"","value":"0xffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6755:3:27"},"nodeType":"YulFunctionCall","src":"6755:44:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6744:7:27"}]}]},"name":"cleanup_t_uint120","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6716:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6726:7:27","type":""}],"src":"6689:116:27"},{"body":{"nodeType":"YulBlock","src":"6876:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6893:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6916:5:27"}],"functionName":{"name":"cleanup_t_uint120","nodeType":"YulIdentifier","src":"6898:17:27"},"nodeType":"YulFunctionCall","src":"6898:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6886:6:27"},"nodeType":"YulFunctionCall","src":"6886:37:27"},"nodeType":"YulExpressionStatement","src":"6886:37:27"}]},"name":"abi_encode_t_uint120_to_t_uint120_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6864:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6871:3:27","type":""}],"src":"6811:118:27"},{"body":{"nodeType":"YulBlock","src":"7081:280:27","statements":[{"nodeType":"YulAssignment","src":"7091:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7103:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7114:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7099:3:27"},"nodeType":"YulFunctionCall","src":"7099:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7091:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7165:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7178:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7189:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7174:3:27"},"nodeType":"YulFunctionCall","src":"7174:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"7127:37:27"},"nodeType":"YulFunctionCall","src":"7127:65:27"},"nodeType":"YulExpressionStatement","src":"7127:65:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7244:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7257:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7268:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7253:3:27"},"nodeType":"YulFunctionCall","src":"7253:18:27"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"7202:41:27"},"nodeType":"YulFunctionCall","src":"7202:70:27"},"nodeType":"YulExpressionStatement","src":"7202:70:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7326:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7339:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7350:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7335:3:27"},"nodeType":"YulFunctionCall","src":"7335:18:27"}],"functionName":{"name":"abi_encode_t_uint120_to_t_uint120_fromStack","nodeType":"YulIdentifier","src":"7282:43:27"},"nodeType":"YulFunctionCall","src":"7282:72:27"},"nodeType":"YulExpressionStatement","src":"7282:72:27"}]},"name":"abi_encode_tuple_t_bool_t_uint64_t_uint120__to_t_bool_t_uint64_t_uint120__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7037:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7049:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7057:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7065:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7076:4:27","type":""}],"src":"6935:426:27"},{"body":{"nodeType":"YulBlock","src":"7467:519:27","statements":[{"body":{"nodeType":"YulBlock","src":"7513:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7515:77:27"},"nodeType":"YulFunctionCall","src":"7515:79:27"},"nodeType":"YulExpressionStatement","src":"7515:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7488:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"7497:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7484:3:27"},"nodeType":"YulFunctionCall","src":"7484:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"7509:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7480:3:27"},"nodeType":"YulFunctionCall","src":"7480:32:27"},"nodeType":"YulIf","src":"7477:119:27"},{"nodeType":"YulBlock","src":"7606:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7621:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7635:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7625:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7650:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7685:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7696:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7681:3:27"},"nodeType":"YulFunctionCall","src":"7681:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7705:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7660:20:27"},"nodeType":"YulFunctionCall","src":"7660:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7650:6:27"}]}]},{"nodeType":"YulBlock","src":"7733:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7748:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7762:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7752:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7778:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7813:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7824:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7809:3:27"},"nodeType":"YulFunctionCall","src":"7809:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7833:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7788:20:27"},"nodeType":"YulFunctionCall","src":"7788:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7778:6:27"}]}]},{"nodeType":"YulBlock","src":"7861:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7876:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7890:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7880:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7906:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7941:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7952:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7937:3:27"},"nodeType":"YulFunctionCall","src":"7937:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7961:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7916:20:27"},"nodeType":"YulFunctionCall","src":"7916:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7906:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7421:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7432:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7444:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7452:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7460:6:27","type":""}],"src":"7367:619:27"},{"body":{"nodeType":"YulBlock","src":"8035:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"8092:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8101:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8104:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8094:6:27"},"nodeType":"YulFunctionCall","src":"8094:12:27"},"nodeType":"YulExpressionStatement","src":"8094:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8058:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8083:5:27"}],"functionName":{"name":"cleanup_t_uint120","nodeType":"YulIdentifier","src":"8065:17:27"},"nodeType":"YulFunctionCall","src":"8065:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8055:2:27"},"nodeType":"YulFunctionCall","src":"8055:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8048:6:27"},"nodeType":"YulFunctionCall","src":"8048:43:27"},"nodeType":"YulIf","src":"8045:63:27"}]},"name":"validator_revert_t_uint120","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8028:5:27","type":""}],"src":"7992:122:27"},{"body":{"nodeType":"YulBlock","src":"8172:87:27","statements":[{"nodeType":"YulAssignment","src":"8182:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8204:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8191:12:27"},"nodeType":"YulFunctionCall","src":"8191:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8182:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8247:5:27"}],"functionName":{"name":"validator_revert_t_uint120","nodeType":"YulIdentifier","src":"8220:26:27"},"nodeType":"YulFunctionCall","src":"8220:33:27"},"nodeType":"YulExpressionStatement","src":"8220:33:27"}]},"name":"abi_decode_t_uint120","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8150:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"8158:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8166:5:27","type":""}],"src":"8120:139:27"},{"body":{"nodeType":"YulBlock","src":"8348:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"8394:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8396:77:27"},"nodeType":"YulFunctionCall","src":"8396:79:27"},"nodeType":"YulExpressionStatement","src":"8396:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8369:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"8378:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8365:3:27"},"nodeType":"YulFunctionCall","src":"8365:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"8390:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8361:3:27"},"nodeType":"YulFunctionCall","src":"8361:32:27"},"nodeType":"YulIf","src":"8358:119:27"},{"nodeType":"YulBlock","src":"8487:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8502:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8516:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8506:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8531:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8566:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8577:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8562:3:27"},"nodeType":"YulFunctionCall","src":"8562:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8586:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8541:20:27"},"nodeType":"YulFunctionCall","src":"8541:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8531:6:27"}]}]},{"nodeType":"YulBlock","src":"8614:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8629:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8643:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8633:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8659:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8694:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8705:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8690:3:27"},"nodeType":"YulFunctionCall","src":"8690:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8714:7:27"}],"functionName":{"name":"abi_decode_t_uint120","nodeType":"YulIdentifier","src":"8669:20:27"},"nodeType":"YulFunctionCall","src":"8669:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8659:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint120","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8310:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8321:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8333:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8341:6:27","type":""}],"src":"8265:474:27"},{"body":{"nodeType":"YulBlock","src":"8810:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8827:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8850:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8832:17:27"},"nodeType":"YulFunctionCall","src":"8832:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8820:6:27"},"nodeType":"YulFunctionCall","src":"8820:37:27"},"nodeType":"YulExpressionStatement","src":"8820:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8798:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8805:3:27","type":""}],"src":"8745:118:27"},{"body":{"nodeType":"YulBlock","src":"8967:124:27","statements":[{"nodeType":"YulAssignment","src":"8977:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8989:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9000:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8985:3:27"},"nodeType":"YulFunctionCall","src":"8985:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8977:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9057:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9070:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9081:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9066:3:27"},"nodeType":"YulFunctionCall","src":"9066:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"9013:43:27"},"nodeType":"YulFunctionCall","src":"9013:71:27"},"nodeType":"YulExpressionStatement","src":"9013:71:27"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8939:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8951:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8962:4:27","type":""}],"src":"8869:222:27"},{"body":{"nodeType":"YulBlock","src":"9193:122:27","statements":[{"nodeType":"YulAssignment","src":"9203:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9215:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9226:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9211:3:27"},"nodeType":"YulFunctionCall","src":"9211:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9203:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9281:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9294:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9305:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9290:3:27"},"nodeType":"YulFunctionCall","src":"9290:17:27"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"9239:41:27"},"nodeType":"YulFunctionCall","src":"9239:69:27"},"nodeType":"YulExpressionStatement","src":"9239:69:27"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9165:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9177:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9188:4:27","type":""}],"src":"9097:218:27"},{"body":{"nodeType":"YulBlock","src":"9387:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"9433:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9435:77:27"},"nodeType":"YulFunctionCall","src":"9435:79:27"},"nodeType":"YulExpressionStatement","src":"9435:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9408:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"9417:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9404:3:27"},"nodeType":"YulFunctionCall","src":"9404:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"9429:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9400:3:27"},"nodeType":"YulFunctionCall","src":"9400:32:27"},"nodeType":"YulIf","src":"9397:119:27"},{"nodeType":"YulBlock","src":"9526:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9541:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9555:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9545:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9570:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9605:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9616:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9601:3:27"},"nodeType":"YulFunctionCall","src":"9601:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9625:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9580:20:27"},"nodeType":"YulFunctionCall","src":"9580:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9570:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9357:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9368:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9380:6:27","type":""}],"src":"9321:329:27"},{"body":{"nodeType":"YulBlock","src":"9701:32:27","statements":[{"nodeType":"YulAssignment","src":"9711:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"9722:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"9711:7:27"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9683:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"9693:7:27","type":""}],"src":"9656:77:27"},{"body":{"nodeType":"YulBlock","src":"9804:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9821:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9844:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"9826:17:27"},"nodeType":"YulFunctionCall","src":"9826:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9814:6:27"},"nodeType":"YulFunctionCall","src":"9814:37:27"},"nodeType":"YulExpressionStatement","src":"9814:37:27"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9792:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9799:3:27","type":""}],"src":"9739:118:27"},{"body":{"nodeType":"YulBlock","src":"9961:124:27","statements":[{"nodeType":"YulAssignment","src":"9971:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9983:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9994:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9979:3:27"},"nodeType":"YulFunctionCall","src":"9979:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9971:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10051:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10064:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10075:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10060:3:27"},"nodeType":"YulFunctionCall","src":"10060:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"10007:43:27"},"nodeType":"YulFunctionCall","src":"10007:71:27"},"nodeType":"YulExpressionStatement","src":"10007:71:27"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9933:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9945:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9956:4:27","type":""}],"src":"9863:222:27"},{"body":{"nodeType":"YulBlock","src":"10123:28:27","statements":[{"nodeType":"YulAssignment","src":"10133:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"10140:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10133:3:27"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10109:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10119:3:27","type":""}],"src":"10091:60:27"},{"body":{"nodeType":"YulBlock","src":"10217:82:27","statements":[{"nodeType":"YulAssignment","src":"10227:66:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10285:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"10267:17:27"},"nodeType":"YulFunctionCall","src":"10267:24:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"10258:8:27"},"nodeType":"YulFunctionCall","src":"10258:34:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"10240:17:27"},"nodeType":"YulFunctionCall","src":"10240:53:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"10227:9:27"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10197:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"10207:9:27","type":""}],"src":"10157:142:27"},{"body":{"nodeType":"YulBlock","src":"10365:66:27","statements":[{"nodeType":"YulAssignment","src":"10375:50:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10419:5:27"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"10388:30:27"},"nodeType":"YulFunctionCall","src":"10388:37:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"10375:9:27"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10345:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"10355:9:27","type":""}],"src":"10305:126:27"},{"body":{"nodeType":"YulBlock","src":"10513:66:27","statements":[{"nodeType":"YulAssignment","src":"10523:50:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10567:5:27"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"10536:30:27"},"nodeType":"YulFunctionCall","src":"10536:37:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"10523:9:27"}]}]},"name":"convert_t_contract$_IConfig_$7382_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10493:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"10503:9:27","type":""}],"src":"10437:142:27"},{"body":{"nodeType":"YulBlock","src":"10666:82:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10683:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10735:5:27"}],"functionName":{"name":"convert_t_contract$_IConfig_$7382_to_t_address","nodeType":"YulIdentifier","src":"10688:46:27"},"nodeType":"YulFunctionCall","src":"10688:53:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10676:6:27"},"nodeType":"YulFunctionCall","src":"10676:66:27"},"nodeType":"YulExpressionStatement","src":"10676:66:27"}]},"name":"abi_encode_t_contract$_IConfig_$7382_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10654:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10661:3:27","type":""}],"src":"10585:163:27"},{"body":{"nodeType":"YulBlock","src":"10868:140:27","statements":[{"nodeType":"YulAssignment","src":"10878:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10890:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10901:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10886:3:27"},"nodeType":"YulFunctionCall","src":"10886:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10878:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10974:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10987:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10998:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10983:3:27"},"nodeType":"YulFunctionCall","src":"10983:17:27"}],"functionName":{"name":"abi_encode_t_contract$_IConfig_$7382_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10914:59:27"},"nodeType":"YulFunctionCall","src":"10914:87:27"},"nodeType":"YulExpressionStatement","src":"10914:87:27"}]},"name":"abi_encode_tuple_t_contract$_IConfig_$7382__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10840:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10852:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10863:4:27","type":""}],"src":"10754:254:27"},{"body":{"nodeType":"YulBlock","src":"11089:66:27","statements":[{"nodeType":"YulAssignment","src":"11099:50:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11143:5:27"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"11112:30:27"},"nodeType":"YulFunctionCall","src":"11112:37:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"11099:9:27"}]}]},"name":"convert_t_contract$_IERC20_$1853_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11069:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"11079:9:27","type":""}],"src":"11014:141:27"},{"body":{"nodeType":"YulBlock","src":"11241:81:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11258:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11309:5:27"}],"functionName":{"name":"convert_t_contract$_IERC20_$1853_to_t_address","nodeType":"YulIdentifier","src":"11263:45:27"},"nodeType":"YulFunctionCall","src":"11263:52:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11251:6:27"},"nodeType":"YulFunctionCall","src":"11251:65:27"},"nodeType":"YulExpressionStatement","src":"11251:65:27"}]},"name":"abi_encode_t_contract$_IERC20_$1853_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11229:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11236:3:27","type":""}],"src":"11161:161:27"},{"body":{"nodeType":"YulBlock","src":"11441:139:27","statements":[{"nodeType":"YulAssignment","src":"11451:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11463:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11474:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11459:3:27"},"nodeType":"YulFunctionCall","src":"11459:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11451:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11546:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11559:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11570:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11555:3:27"},"nodeType":"YulFunctionCall","src":"11555:17:27"}],"functionName":{"name":"abi_encode_t_contract$_IERC20_$1853_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11487:58:27"},"nodeType":"YulFunctionCall","src":"11487:86:27"},"nodeType":"YulExpressionStatement","src":"11487:86:27"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$1853__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11413:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11425:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11436:4:27","type":""}],"src":"11328:252:27"},{"body":{"nodeType":"YulBlock","src":"11626:76:27","statements":[{"body":{"nodeType":"YulBlock","src":"11680:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11689:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11692:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11682:6:27"},"nodeType":"YulFunctionCall","src":"11682:12:27"},"nodeType":"YulExpressionStatement","src":"11682:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11649:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11671:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"11656:14:27"},"nodeType":"YulFunctionCall","src":"11656:21:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11646:2:27"},"nodeType":"YulFunctionCall","src":"11646:32:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11639:6:27"},"nodeType":"YulFunctionCall","src":"11639:40:27"},"nodeType":"YulIf","src":"11636:60:27"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11619:5:27","type":""}],"src":"11586:116:27"},{"body":{"nodeType":"YulBlock","src":"11757:84:27","statements":[{"nodeType":"YulAssignment","src":"11767:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11789:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11776:12:27"},"nodeType":"YulFunctionCall","src":"11776:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11767:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11829:5:27"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"11805:23:27"},"nodeType":"YulFunctionCall","src":"11805:30:27"},"nodeType":"YulExpressionStatement","src":"11805:30:27"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11735:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"11743:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"11751:5:27","type":""}],"src":"11708:133:27"},{"body":{"nodeType":"YulBlock","src":"11927:388:27","statements":[{"body":{"nodeType":"YulBlock","src":"11973:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11975:77:27"},"nodeType":"YulFunctionCall","src":"11975:79:27"},"nodeType":"YulExpressionStatement","src":"11975:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11948:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"11957:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11944:3:27"},"nodeType":"YulFunctionCall","src":"11944:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"11969:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11940:3:27"},"nodeType":"YulFunctionCall","src":"11940:32:27"},"nodeType":"YulIf","src":"11937:119:27"},{"nodeType":"YulBlock","src":"12066:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12081:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"12095:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12085:6:27","type":""}]},{"nodeType":"YulAssignment","src":"12110:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12145:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"12156:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12141:3:27"},"nodeType":"YulFunctionCall","src":"12141:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12165:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12120:20:27"},"nodeType":"YulFunctionCall","src":"12120:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12110:6:27"}]}]},{"nodeType":"YulBlock","src":"12193:115:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12208:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"12222:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12212:6:27","type":""}]},{"nodeType":"YulAssignment","src":"12238:60:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12270:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"12281:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12266:3:27"},"nodeType":"YulFunctionCall","src":"12266:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12290:7:27"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"12248:17:27"},"nodeType":"YulFunctionCall","src":"12248:50:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12238:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11889:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11900:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11912:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11920:6:27","type":""}],"src":"11847:468:27"},{"body":{"nodeType":"YulBlock","src":"12410:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12427:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12430:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12420:6:27"},"nodeType":"YulFunctionCall","src":"12420:12:27"},"nodeType":"YulExpressionStatement","src":"12420:12:27"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"12321:117:27"},{"body":{"nodeType":"YulBlock","src":"12533:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12550:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12553:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12543:6:27"},"nodeType":"YulFunctionCall","src":"12543:12:27"},"nodeType":"YulExpressionStatement","src":"12543:12:27"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"12444:117:27"},{"body":{"nodeType":"YulBlock","src":"12595:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12612:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12615:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12605:6:27"},"nodeType":"YulFunctionCall","src":"12605:88:27"},"nodeType":"YulExpressionStatement","src":"12605:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12709:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12712:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12702:6:27"},"nodeType":"YulFunctionCall","src":"12702:15:27"},"nodeType":"YulExpressionStatement","src":"12702:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12733:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12736:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12726:6:27"},"nodeType":"YulFunctionCall","src":"12726:15:27"},"nodeType":"YulExpressionStatement","src":"12726:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"12567:180:27"},{"body":{"nodeType":"YulBlock","src":"12796:238:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12806:58:27","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12828:6:27"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"12858:4:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"12836:21:27"},"nodeType":"YulFunctionCall","src":"12836:27:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12824:3:27"},"nodeType":"YulFunctionCall","src":"12824:40:27"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"12810:10:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"12975:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12977:16:27"},"nodeType":"YulFunctionCall","src":"12977:18:27"},"nodeType":"YulExpressionStatement","src":"12977:18:27"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12918:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"12930:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12915:2:27"},"nodeType":"YulFunctionCall","src":"12915:34:27"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12954:10:27"},{"name":"memPtr","nodeType":"YulIdentifier","src":"12966:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12951:2:27"},"nodeType":"YulFunctionCall","src":"12951:22:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12912:2:27"},"nodeType":"YulFunctionCall","src":"12912:62:27"},"nodeType":"YulIf","src":"12909:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13013:2:27","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"13017:10:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13006:6:27"},"nodeType":"YulFunctionCall","src":"13006:22:27"},"nodeType":"YulExpressionStatement","src":"13006:22:27"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12782:6:27","type":""},{"name":"size","nodeType":"YulTypedName","src":"12790:4:27","type":""}],"src":"12753:281:27"},{"body":{"nodeType":"YulBlock","src":"13081:88:27","statements":[{"nodeType":"YulAssignment","src":"13091:30:27","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"13101:18:27"},"nodeType":"YulFunctionCall","src":"13101:20:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13091:6:27"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13150:6:27"},{"name":"size","nodeType":"YulIdentifier","src":"13158:4:27"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"13130:19:27"},"nodeType":"YulFunctionCall","src":"13130:33:27"},"nodeType":"YulExpressionStatement","src":"13130:33:27"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"13065:4:27","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"13074:6:27","type":""}],"src":"13040:129:27"},{"body":{"nodeType":"YulBlock","src":"13241:241:27","statements":[{"body":{"nodeType":"YulBlock","src":"13346:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"13348:16:27"},"nodeType":"YulFunctionCall","src":"13348:18:27"},"nodeType":"YulExpressionStatement","src":"13348:18:27"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13318:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"13326:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13315:2:27"},"nodeType":"YulFunctionCall","src":"13315:30:27"},"nodeType":"YulIf","src":"13312:56:27"},{"nodeType":"YulAssignment","src":"13378:37:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13408:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13386:21:27"},"nodeType":"YulFunctionCall","src":"13386:29:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13378:4:27"}]},{"nodeType":"YulAssignment","src":"13452:23:27","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"13464:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"13470:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13460:3:27"},"nodeType":"YulFunctionCall","src":"13460:15:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13452:4:27"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"13225:6:27","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"13236:4:27","type":""}],"src":"13175:307:27"},{"body":{"nodeType":"YulBlock","src":"13552:82:27","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13575:3:27"},{"name":"src","nodeType":"YulIdentifier","src":"13580:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"13585:6:27"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"13562:12:27"},"nodeType":"YulFunctionCall","src":"13562:30:27"},"nodeType":"YulExpressionStatement","src":"13562:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13612:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"13617:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13608:3:27"},"nodeType":"YulFunctionCall","src":"13608:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"13626:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13601:6:27"},"nodeType":"YulFunctionCall","src":"13601:27:27"},"nodeType":"YulExpressionStatement","src":"13601:27:27"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13534:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"13539:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"13544:6:27","type":""}],"src":"13488:146:27"},{"body":{"nodeType":"YulBlock","src":"13723:340:27","statements":[{"nodeType":"YulAssignment","src":"13733:74:27","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13799:6:27"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13758:40:27"},"nodeType":"YulFunctionCall","src":"13758:48:27"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"13742:15:27"},"nodeType":"YulFunctionCall","src":"13742:65:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13733:5:27"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13823:5:27"},{"name":"length","nodeType":"YulIdentifier","src":"13830:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13816:6:27"},"nodeType":"YulFunctionCall","src":"13816:21:27"},"nodeType":"YulExpressionStatement","src":"13816:21:27"},{"nodeType":"YulVariableDeclaration","src":"13846:27:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13861:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"13868:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13857:3:27"},"nodeType":"YulFunctionCall","src":"13857:16:27"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"13850:3:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"13911:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"13913:77:27"},"nodeType":"YulFunctionCall","src":"13913:79:27"},"nodeType":"YulExpressionStatement","src":"13913:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13892:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"13897:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13888:3:27"},"nodeType":"YulFunctionCall","src":"13888:16:27"},{"name":"end","nodeType":"YulIdentifier","src":"13906:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13885:2:27"},"nodeType":"YulFunctionCall","src":"13885:25:27"},"nodeType":"YulIf","src":"13882:112:27"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14040:3:27"},{"name":"dst","nodeType":"YulIdentifier","src":"14045:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"14050:6:27"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"14003:36:27"},"nodeType":"YulFunctionCall","src":"14003:54:27"},"nodeType":"YulExpressionStatement","src":"14003:54:27"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13696:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"13701:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"13709:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13717:5:27","type":""}],"src":"13640:423:27"},{"body":{"nodeType":"YulBlock","src":"14143:277:27","statements":[{"body":{"nodeType":"YulBlock","src":"14192:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"14194:77:27"},"nodeType":"YulFunctionCall","src":"14194:79:27"},"nodeType":"YulExpressionStatement","src":"14194:79:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14171:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"14179:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14167:3:27"},"nodeType":"YulFunctionCall","src":"14167:17:27"},{"name":"end","nodeType":"YulIdentifier","src":"14186:3:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14163:3:27"},"nodeType":"YulFunctionCall","src":"14163:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14156:6:27"},"nodeType":"YulFunctionCall","src":"14156:35:27"},"nodeType":"YulIf","src":"14153:122:27"},{"nodeType":"YulVariableDeclaration","src":"14284:34:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14311:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14298:12:27"},"nodeType":"YulFunctionCall","src":"14298:20:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14288:6:27","type":""}]},{"nodeType":"YulAssignment","src":"14327:87:27","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14387:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"14395:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14383:3:27"},"nodeType":"YulFunctionCall","src":"14383:17:27"},{"name":"length","nodeType":"YulIdentifier","src":"14402:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"14410:3:27"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14336:46:27"},"nodeType":"YulFunctionCall","src":"14336:78:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"14327:5:27"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14121:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"14129:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"14137:5:27","type":""}],"src":"14082:338:27"},{"body":{"nodeType":"YulBlock","src":"14552:817:27","statements":[{"body":{"nodeType":"YulBlock","src":"14599:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14601:77:27"},"nodeType":"YulFunctionCall","src":"14601:79:27"},"nodeType":"YulExpressionStatement","src":"14601:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14573:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"14582:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14569:3:27"},"nodeType":"YulFunctionCall","src":"14569:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"14594:3:27","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14565:3:27"},"nodeType":"YulFunctionCall","src":"14565:33:27"},"nodeType":"YulIf","src":"14562:120:27"},{"nodeType":"YulBlock","src":"14692:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14707:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"14721:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14711:6:27","type":""}]},{"nodeType":"YulAssignment","src":"14736:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14771:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"14782:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14767:3:27"},"nodeType":"YulFunctionCall","src":"14767:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14791:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14746:20:27"},"nodeType":"YulFunctionCall","src":"14746:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14736:6:27"}]}]},{"nodeType":"YulBlock","src":"14819:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14834:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"14848:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14838:6:27","type":""}]},{"nodeType":"YulAssignment","src":"14864:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14899:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"14910:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14895:3:27"},"nodeType":"YulFunctionCall","src":"14895:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14919:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14874:20:27"},"nodeType":"YulFunctionCall","src":"14874:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14864:6:27"}]}]},{"nodeType":"YulBlock","src":"14947:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14962:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"14976:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14966:6:27","type":""}]},{"nodeType":"YulAssignment","src":"14992:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15027:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"15038:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15023:3:27"},"nodeType":"YulFunctionCall","src":"15023:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15047:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"15002:20:27"},"nodeType":"YulFunctionCall","src":"15002:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14992:6:27"}]}]},{"nodeType":"YulBlock","src":"15075:287:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15090:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15121:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15132:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15117:3:27"},"nodeType":"YulFunctionCall","src":"15117:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15104:12:27"},"nodeType":"YulFunctionCall","src":"15104:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15094:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"15183:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"15185:77:27"},"nodeType":"YulFunctionCall","src":"15185:79:27"},"nodeType":"YulExpressionStatement","src":"15185:79:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15155:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"15163:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15152:2:27"},"nodeType":"YulFunctionCall","src":"15152:30:27"},"nodeType":"YulIf","src":"15149:117:27"},{"nodeType":"YulAssignment","src":"15280:72:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15324:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"15335:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15320:3:27"},"nodeType":"YulFunctionCall","src":"15320:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15344:7:27"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"15290:29:27"},"nodeType":"YulFunctionCall","src":"15290:62:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15280:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14498:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14509:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14521:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14529:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14537:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14545:6:27","type":""}],"src":"14426:943:27"},{"body":{"nodeType":"YulBlock","src":"15458:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"15504:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15506:77:27"},"nodeType":"YulFunctionCall","src":"15506:79:27"},"nodeType":"YulExpressionStatement","src":"15506:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15479:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"15488:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15475:3:27"},"nodeType":"YulFunctionCall","src":"15475:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"15500:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15471:3:27"},"nodeType":"YulFunctionCall","src":"15471:32:27"},"nodeType":"YulIf","src":"15468:119:27"},{"nodeType":"YulBlock","src":"15597:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15612:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15626:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15616:6:27","type":""}]},{"nodeType":"YulAssignment","src":"15641:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15676:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"15687:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15672:3:27"},"nodeType":"YulFunctionCall","src":"15672:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15696:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"15651:20:27"},"nodeType":"YulFunctionCall","src":"15651:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15641:6:27"}]}]},{"nodeType":"YulBlock","src":"15724:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15739:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15753:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15743:6:27","type":""}]},{"nodeType":"YulAssignment","src":"15769:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15804:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"15815:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15800:3:27"},"nodeType":"YulFunctionCall","src":"15800:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15824:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15779:20:27"},"nodeType":"YulFunctionCall","src":"15779:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15769:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15420:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15431:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15443:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15451:6:27","type":""}],"src":"15375:474:27"},{"body":{"nodeType":"YulBlock","src":"15938:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"15984:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15986:77:27"},"nodeType":"YulFunctionCall","src":"15986:79:27"},"nodeType":"YulExpressionStatement","src":"15986:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15959:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"15968:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15955:3:27"},"nodeType":"YulFunctionCall","src":"15955:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"15980:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15951:3:27"},"nodeType":"YulFunctionCall","src":"15951:32:27"},"nodeType":"YulIf","src":"15948:119:27"},{"nodeType":"YulBlock","src":"16077:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16092:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"16106:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16096:6:27","type":""}]},{"nodeType":"YulAssignment","src":"16121:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16156:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"16167:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16152:3:27"},"nodeType":"YulFunctionCall","src":"16152:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16176:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"16131:20:27"},"nodeType":"YulFunctionCall","src":"16131:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16121:6:27"}]}]},{"nodeType":"YulBlock","src":"16204:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16219:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"16233:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16223:6:27","type":""}]},{"nodeType":"YulAssignment","src":"16249:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16284:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"16295:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16280:3:27"},"nodeType":"YulFunctionCall","src":"16280:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16304:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"16259:20:27"},"nodeType":"YulFunctionCall","src":"16259:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"16249:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15900:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15911:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15923:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15931:6:27","type":""}],"src":"15855:474:27"},{"body":{"nodeType":"YulBlock","src":"16384:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16401:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16421:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"16406:14:27"},"nodeType":"YulFunctionCall","src":"16406:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16394:6:27"},"nodeType":"YulFunctionCall","src":"16394:34:27"},"nodeType":"YulExpressionStatement","src":"16394:34:27"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16372:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16379:3:27","type":""}],"src":"16335:99:27"},{"body":{"nodeType":"YulBlock","src":"16493:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16510:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16532:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"16515:16:27"},"nodeType":"YulFunctionCall","src":"16515:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16503:6:27"},"nodeType":"YulFunctionCall","src":"16503:36:27"},"nodeType":"YulExpressionStatement","src":"16503:36:27"}]},"name":"abi_encode_t_uint64_to_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16481:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16488:3:27","type":""}],"src":"16440:105:27"},{"body":{"nodeType":"YulBlock","src":"16606:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16623:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16646:5:27"}],"functionName":{"name":"cleanup_t_uint120","nodeType":"YulIdentifier","src":"16628:17:27"},"nodeType":"YulFunctionCall","src":"16628:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16616:6:27"},"nodeType":"YulFunctionCall","src":"16616:37:27"},"nodeType":"YulExpressionStatement","src":"16616:37:27"}]},"name":"abi_encode_t_uint120_to_t_uint120","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16594:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16601:3:27","type":""}],"src":"16551:108:27"},{"body":{"nodeType":"YulBlock","src":"16901:574:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16911:26:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16927:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"16932:4:27","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16923:3:27"},"nodeType":"YulFunctionCall","src":"16923:14:27"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"16915:4:27","type":""}]},{"nodeType":"YulBlock","src":"16947:169:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16993:43:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17023:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"17030:4:27","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17019:3:27"},"nodeType":"YulFunctionCall","src":"17019:16:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17013:5:27"},"nodeType":"YulFunctionCall","src":"17013:23:27"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16997:12:27","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17077:12:27"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17095:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17100:4:27","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17091:3:27"},"nodeType":"YulFunctionCall","src":"17091:14:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"17049:27:27"},"nodeType":"YulFunctionCall","src":"17049:57:27"},"nodeType":"YulExpressionStatement","src":"17049:57:27"}]},{"nodeType":"YulBlock","src":"17126:166:27","statements":[{"nodeType":"YulVariableDeclaration","src":"17165:43:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17195:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"17202:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17191:3:27"},"nodeType":"YulFunctionCall","src":"17191:16:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17185:5:27"},"nodeType":"YulFunctionCall","src":"17185:23:27"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17169:12:27","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17253:12:27"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17271:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17276:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17267:3:27"},"nodeType":"YulFunctionCall","src":"17267:14:27"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64","nodeType":"YulIdentifier","src":"17221:31:27"},"nodeType":"YulFunctionCall","src":"17221:61:27"},"nodeType":"YulExpressionStatement","src":"17221:61:27"}]},{"nodeType":"YulBlock","src":"17302:166:27","statements":[{"nodeType":"YulVariableDeclaration","src":"17339:43:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17369:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"17376:4:27","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17365:3:27"},"nodeType":"YulFunctionCall","src":"17365:16:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17359:5:27"},"nodeType":"YulFunctionCall","src":"17359:23:27"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"17343:12:27","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"17429:12:27"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17447:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17452:4:27","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17443:3:27"},"nodeType":"YulFunctionCall","src":"17443:14:27"}],"functionName":{"name":"abi_encode_t_uint120_to_t_uint120","nodeType":"YulIdentifier","src":"17395:33:27"},"nodeType":"YulFunctionCall","src":"17395:63:27"},"nodeType":"YulExpressionStatement","src":"17395:63:27"}]}]},"name":"abi_encode_t_struct$_RedemptionQueueItem_$6902_memory_ptr_to_t_struct$_RedemptionQueueItem_$6902_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16888:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16895:3:27","type":""}],"src":"16761:714:27"},{"body":{"nodeType":"YulBlock","src":"17653:198:27","statements":[{"nodeType":"YulAssignment","src":"17663:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17675:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17686:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17671:3:27"},"nodeType":"YulFunctionCall","src":"17671:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17663:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17817:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17830:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17841:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17826:3:27"},"nodeType":"YulFunctionCall","src":"17826:17:27"}],"functionName":{"name":"abi_encode_t_struct$_RedemptionQueueItem_$6902_memory_ptr_to_t_struct$_RedemptionQueueItem_$6902_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17699:117:27"},"nodeType":"YulFunctionCall","src":"17699:145:27"},"nodeType":"YulExpressionStatement","src":"17699:145:27"}]},"name":"abi_encode_tuple_t_struct$_RedemptionQueueItem_$6902_memory_ptr__to_t_struct$_RedemptionQueueItem_$6902_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17625:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17637:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17648:4:27","type":""}],"src":"17481:370:27"},{"body":{"nodeType":"YulBlock","src":"17885:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17902:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17905:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17895:6:27"},"nodeType":"YulFunctionCall","src":"17895:88:27"},"nodeType":"YulExpressionStatement","src":"17895:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17999:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18002:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17992:6:27"},"nodeType":"YulFunctionCall","src":"17992:15:27"},"nodeType":"YulExpressionStatement","src":"17992:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18023:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18026:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18016:6:27"},"nodeType":"YulFunctionCall","src":"18016:15:27"},"nodeType":"YulExpressionStatement","src":"18016:15:27"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"17857:180:27"},{"body":{"nodeType":"YulBlock","src":"18094:269:27","statements":[{"nodeType":"YulAssignment","src":"18104:22:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"18118:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"18124:1:27","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"18114:3:27"},"nodeType":"YulFunctionCall","src":"18114:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"18104:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"18135:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"18165:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"18171:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18161:3:27"},"nodeType":"YulFunctionCall","src":"18161:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"18139:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"18212:51:27","statements":[{"nodeType":"YulAssignment","src":"18226:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18240:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"18248:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18236:3:27"},"nodeType":"YulFunctionCall","src":"18236:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"18226:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"18192:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18185:6:27"},"nodeType":"YulFunctionCall","src":"18185:26:27"},"nodeType":"YulIf","src":"18182:81:27"},{"body":{"nodeType":"YulBlock","src":"18315:42:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"18329:16:27"},"nodeType":"YulFunctionCall","src":"18329:18:27"},"nodeType":"YulExpressionStatement","src":"18329:18:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"18279:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18302:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"18310:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18299:2:27"},"nodeType":"YulFunctionCall","src":"18299:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18276:2:27"},"nodeType":"YulFunctionCall","src":"18276:38:27"},"nodeType":"YulIf","src":"18273:84:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"18078:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"18087:6:27","type":""}],"src":"18043:320:27"},{"body":{"nodeType":"YulBlock","src":"18523:288:27","statements":[{"nodeType":"YulAssignment","src":"18533:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18545:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18556:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18541:3:27"},"nodeType":"YulFunctionCall","src":"18541:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18533:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18613:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18626:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18637:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18622:3:27"},"nodeType":"YulFunctionCall","src":"18622:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18569:43:27"},"nodeType":"YulFunctionCall","src":"18569:71:27"},"nodeType":"YulExpressionStatement","src":"18569:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18694:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18707:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18718:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18703:3:27"},"nodeType":"YulFunctionCall","src":"18703:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18650:43:27"},"nodeType":"YulFunctionCall","src":"18650:72:27"},"nodeType":"YulExpressionStatement","src":"18650:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18776:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18789:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18800:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18785:3:27"},"nodeType":"YulFunctionCall","src":"18785:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18732:43:27"},"nodeType":"YulFunctionCall","src":"18732:72:27"},"nodeType":"YulExpressionStatement","src":"18732:72:27"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18479:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18491:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18499:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18507:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18518:4:27","type":""}],"src":"18369:442:27"},{"body":{"nodeType":"YulBlock","src":"18923:73:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18945:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"18953:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18941:3:27"},"nodeType":"YulFunctionCall","src":"18941:14:27"},{"hexValue":"526564656d7074696f6e51756575653a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"18957:31:27","type":"","value":"RedemptionQueue: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18934:6:27"},"nodeType":"YulFunctionCall","src":"18934:55:27"},"nodeType":"YulExpressionStatement","src":"18934:55:27"}]},"name":"store_literal_in_memory_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18915:6:27","type":""}],"src":"18817:179:27"},{"body":{"nodeType":"YulBlock","src":"19148:220:27","statements":[{"nodeType":"YulAssignment","src":"19158:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19224:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"19229:2:27","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19165:58:27"},"nodeType":"YulFunctionCall","src":"19165:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19158:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19330:3:27"}],"functionName":{"name":"store_literal_in_memory_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6","nodeType":"YulIdentifier","src":"19241:88:27"},"nodeType":"YulFunctionCall","src":"19241:93:27"},"nodeType":"YulExpressionStatement","src":"19241:93:27"},{"nodeType":"YulAssignment","src":"19343:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19354:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"19359:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19350:3:27"},"nodeType":"YulFunctionCall","src":"19350:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19343:3:27"}]}]},"name":"abi_encode_t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19136:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19144:3:27","type":""}],"src":"19002:366:27"},{"body":{"nodeType":"YulBlock","src":"19545:248:27","statements":[{"nodeType":"YulAssignment","src":"19555:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19567:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19578:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19563:3:27"},"nodeType":"YulFunctionCall","src":"19563:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19555:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19602:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19613:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19598:3:27"},"nodeType":"YulFunctionCall","src":"19598:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19621:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"19627:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19617:3:27"},"nodeType":"YulFunctionCall","src":"19617:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19591:6:27"},"nodeType":"YulFunctionCall","src":"19591:47:27"},"nodeType":"YulExpressionStatement","src":"19591:47:27"},{"nodeType":"YulAssignment","src":"19647:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19781:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19655:124:27"},"nodeType":"YulFunctionCall","src":"19655:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19647:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19525:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19540:4:27","type":""}],"src":"19374:419:27"},{"body":{"nodeType":"YulBlock","src":"19905:75:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19927:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"19935:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19923:3:27"},"nodeType":"YulFunctionCall","src":"19923:14:27"},{"hexValue":"526564656d7074696f6e51756575653a20616d6f756e74206973207a65726f","kind":"string","nodeType":"YulLiteral","src":"19939:33:27","type":"","value":"RedemptionQueue: amount is zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19916:6:27"},"nodeType":"YulFunctionCall","src":"19916:57:27"},"nodeType":"YulExpressionStatement","src":"19916:57:27"}]},"name":"store_literal_in_memory_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19897:6:27","type":""}],"src":"19799:181:27"},{"body":{"nodeType":"YulBlock","src":"20132:220:27","statements":[{"nodeType":"YulAssignment","src":"20142:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20208:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"20213:2:27","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20149:58:27"},"nodeType":"YulFunctionCall","src":"20149:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20142:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20314:3:27"}],"functionName":{"name":"store_literal_in_memory_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833","nodeType":"YulIdentifier","src":"20225:88:27"},"nodeType":"YulFunctionCall","src":"20225:93:27"},"nodeType":"YulExpressionStatement","src":"20225:93:27"},{"nodeType":"YulAssignment","src":"20327:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20338:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"20343:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20334:3:27"},"nodeType":"YulFunctionCall","src":"20334:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20327:3:27"}]}]},"name":"abi_encode_t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20120:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20128:3:27","type":""}],"src":"19986:366:27"},{"body":{"nodeType":"YulBlock","src":"20529:248:27","statements":[{"nodeType":"YulAssignment","src":"20539:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20551:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20562:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20547:3:27"},"nodeType":"YulFunctionCall","src":"20547:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20539:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20586:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20597:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20582:3:27"},"nodeType":"YulFunctionCall","src":"20582:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20605:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"20611:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20601:3:27"},"nodeType":"YulFunctionCall","src":"20601:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20575:6:27"},"nodeType":"YulFunctionCall","src":"20575:47:27"},"nodeType":"YulExpressionStatement","src":"20575:47:27"},{"nodeType":"YulAssignment","src":"20631:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20765:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20639:124:27"},"nodeType":"YulFunctionCall","src":"20639:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20631:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20509:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20524:4:27","type":""}],"src":"20358:419:27"},{"body":{"nodeType":"YulBlock","src":"20846:80:27","statements":[{"nodeType":"YulAssignment","src":"20856:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20871:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20865:5:27"},"nodeType":"YulFunctionCall","src":"20865:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"20856:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20914:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"20887:26:27"},"nodeType":"YulFunctionCall","src":"20887:33:27"},"nodeType":"YulExpressionStatement","src":"20887:33:27"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"20824:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"20832:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"20840:5:27","type":""}],"src":"20783:143:27"},{"body":{"nodeType":"YulBlock","src":"21009:274:27","statements":[{"body":{"nodeType":"YulBlock","src":"21055:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21057:77:27"},"nodeType":"YulFunctionCall","src":"21057:79:27"},"nodeType":"YulExpressionStatement","src":"21057:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21030:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"21039:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21026:3:27"},"nodeType":"YulFunctionCall","src":"21026:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"21051:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21022:3:27"},"nodeType":"YulFunctionCall","src":"21022:32:27"},"nodeType":"YulIf","src":"21019:119:27"},{"nodeType":"YulBlock","src":"21148:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"21163:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"21177:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21167:6:27","type":""}]},{"nodeType":"YulAssignment","src":"21192:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21238:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"21249:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21234:3:27"},"nodeType":"YulFunctionCall","src":"21234:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21258:7:27"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"21202:31:27"},"nodeType":"YulFunctionCall","src":"21202:64:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21192:6:27"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20979:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20990:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21002:6:27","type":""}],"src":"20932:351:27"},{"body":{"nodeType":"YulBlock","src":"21342:32:27","statements":[{"nodeType":"YulAssignment","src":"21352:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"21363:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"21352:7:27"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21324:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"21334:7:27","type":""}],"src":"21289:85:27"},{"body":{"nodeType":"YulBlock","src":"21447:89:27","statements":[{"nodeType":"YulAssignment","src":"21457:73:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21522:5:27"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"21496:25:27"},"nodeType":"YulFunctionCall","src":"21496:32:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"21487:8:27"},"nodeType":"YulFunctionCall","src":"21487:42:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"21470:16:27"},"nodeType":"YulFunctionCall","src":"21470:60:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"21457:9:27"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21427:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"21437:9:27","type":""}],"src":"21380:156:27"},{"body":{"nodeType":"YulBlock","src":"21614:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21631:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21674:5:27"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint64","nodeType":"YulIdentifier","src":"21636:37:27"},"nodeType":"YulFunctionCall","src":"21636:44:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21624:6:27"},"nodeType":"YulFunctionCall","src":"21624:57:27"},"nodeType":"YulExpressionStatement","src":"21624:57:27"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21602:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21609:3:27","type":""}],"src":"21542:145:27"},{"body":{"nodeType":"YulBlock","src":"21798:131:27","statements":[{"nodeType":"YulAssignment","src":"21808:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21820:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21831:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21816:3:27"},"nodeType":"YulFunctionCall","src":"21816:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21808:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21895:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21908:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21919:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21904:3:27"},"nodeType":"YulFunctionCall","src":"21904:17:27"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"21844:50:27"},"nodeType":"YulFunctionCall","src":"21844:78:27"},"nodeType":"YulExpressionStatement","src":"21844:78:27"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21770:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21782:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21793:4:27","type":""}],"src":"21693:236:27"},{"body":{"nodeType":"YulBlock","src":"22049:34:27","statements":[{"nodeType":"YulAssignment","src":"22059:18:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"22074:3:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22059:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22021:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"22026:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22037:11:27","type":""}],"src":"21935:148:27"},{"body":{"nodeType":"YulBlock","src":"22199:280:27","statements":[{"nodeType":"YulVariableDeclaration","src":"22209:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22256:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"22223:32:27"},"nodeType":"YulFunctionCall","src":"22223:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22213:6:27","type":""}]},{"nodeType":"YulAssignment","src":"22271:96:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22355:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"22360:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22278:76:27"},"nodeType":"YulFunctionCall","src":"22278:89:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22271:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22415:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"22422:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22411:3:27"},"nodeType":"YulFunctionCall","src":"22411:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"22429:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"22434:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22376:34:27"},"nodeType":"YulFunctionCall","src":"22376:65:27"},"nodeType":"YulExpressionStatement","src":"22376:65:27"},{"nodeType":"YulAssignment","src":"22450:23:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22461:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"22466:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22457:3:27"},"nodeType":"YulFunctionCall","src":"22457:16:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22450:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22180:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22187:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22195:3:27","type":""}],"src":"22089:390:27"},{"body":{"nodeType":"YulBlock","src":"22669:251:27","statements":[{"nodeType":"YulAssignment","src":"22680:102:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22769:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"22778:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22687:81:27"},"nodeType":"YulFunctionCall","src":"22687:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22680:3:27"}]},{"nodeType":"YulAssignment","src":"22792:102:27","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22881:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"22890:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22799:81:27"},"nodeType":"YulFunctionCall","src":"22799:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22792:3:27"}]},{"nodeType":"YulAssignment","src":"22904:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"22911:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22904:3:27"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22640:3:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22646:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22654:6:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22665:3:27","type":""}],"src":"22485:435:27"},{"body":{"nodeType":"YulBlock","src":"23024:124:27","statements":[{"nodeType":"YulAssignment","src":"23034:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23046:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23057:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23042:3:27"},"nodeType":"YulFunctionCall","src":"23042:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23034:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23114:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23127:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23138:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23123:3:27"},"nodeType":"YulFunctionCall","src":"23123:17:27"}],"functionName":{"name":"abi_encode_t_uint120_to_t_uint120_fromStack","nodeType":"YulIdentifier","src":"23070:43:27"},"nodeType":"YulFunctionCall","src":"23070:71:27"},"nodeType":"YulExpressionStatement","src":"23070:71:27"}]},"name":"abi_encode_tuple_t_uint120__to_t_uint120__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22996:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23008:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23019:4:27","type":""}],"src":"22926:222:27"},{"body":{"nodeType":"YulBlock","src":"23196:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"23252:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23261:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23264:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23254:6:27"},"nodeType":"YulFunctionCall","src":"23254:12:27"},"nodeType":"YulExpressionStatement","src":"23254:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23219:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23243:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"23226:16:27"},"nodeType":"YulFunctionCall","src":"23226:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23216:2:27"},"nodeType":"YulFunctionCall","src":"23216:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23209:6:27"},"nodeType":"YulFunctionCall","src":"23209:42:27"},"nodeType":"YulIf","src":"23206:62:27"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23189:5:27","type":""}],"src":"23154:120:27"},{"body":{"nodeType":"YulBlock","src":"23342:79:27","statements":[{"nodeType":"YulAssignment","src":"23352:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23367:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23361:5:27"},"nodeType":"YulFunctionCall","src":"23361:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23352:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23409:5:27"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"23383:25:27"},"nodeType":"YulFunctionCall","src":"23383:32:27"},"nodeType":"YulExpressionStatement","src":"23383:32:27"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23320:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"23328:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23336:5:27","type":""}],"src":"23280:141:27"},{"body":{"nodeType":"YulBlock","src":"23503:273:27","statements":[{"body":{"nodeType":"YulBlock","src":"23549:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23551:77:27"},"nodeType":"YulFunctionCall","src":"23551:79:27"},"nodeType":"YulExpressionStatement","src":"23551:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23524:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"23533:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23520:3:27"},"nodeType":"YulFunctionCall","src":"23520:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"23545:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23516:3:27"},"nodeType":"YulFunctionCall","src":"23516:32:27"},"nodeType":"YulIf","src":"23513:119:27"},{"nodeType":"YulBlock","src":"23642:127:27","statements":[{"nodeType":"YulVariableDeclaration","src":"23657:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23671:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23661:6:27","type":""}]},{"nodeType":"YulAssignment","src":"23686:73:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23731:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"23742:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23727:3:27"},"nodeType":"YulFunctionCall","src":"23727:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23751:7:27"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"23696:30:27"},"nodeType":"YulFunctionCall","src":"23696:63:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23686:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23473:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23484:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23496:6:27","type":""}],"src":"23427:349:27"},{"body":{"nodeType":"YulBlock","src":"23810:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23827:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23830:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23820:6:27"},"nodeType":"YulFunctionCall","src":"23820:88:27"},"nodeType":"YulExpressionStatement","src":"23820:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23924:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"23927:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23917:6:27"},"nodeType":"YulFunctionCall","src":"23917:15:27"},"nodeType":"YulExpressionStatement","src":"23917:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23948:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23951:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23941:6:27"},"nodeType":"YulFunctionCall","src":"23941:15:27"},"nodeType":"YulExpressionStatement","src":"23941:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"23782:180:27"},{"body":{"nodeType":"YulBlock","src":"24011:162:27","statements":[{"nodeType":"YulAssignment","src":"24021:24:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24043:1:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"24026:16:27"},"nodeType":"YulFunctionCall","src":"24026:19:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"24021:1:27"}]},{"nodeType":"YulAssignment","src":"24054:24:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"24076:1:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"24059:16:27"},"nodeType":"YulFunctionCall","src":"24059:19:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"24054:1:27"}]},{"nodeType":"YulAssignment","src":"24087:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24098:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"24101:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24094:3:27"},"nodeType":"YulFunctionCall","src":"24094:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"24087:3:27"}]},{"body":{"nodeType":"YulBlock","src":"24144:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"24146:16:27"},"nodeType":"YulFunctionCall","src":"24146:18:27"},"nodeType":"YulExpressionStatement","src":"24146:18:27"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"24119:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"24124:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24116:2:27"},"nodeType":"YulFunctionCall","src":"24116:27:27"},"nodeType":"YulIf","src":"24113:53:27"}]},"name":"checked_add_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23998:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"24001:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"24007:3:27","type":""}],"src":"23968:205:27"},{"body":{"nodeType":"YulBlock","src":"24239:82:27","statements":[{"nodeType":"YulAssignment","src":"24249:66:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24307:5:27"}],"functionName":{"name":"cleanup_t_uint120","nodeType":"YulIdentifier","src":"24289:17:27"},"nodeType":"YulFunctionCall","src":"24289:24:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"24280:8:27"},"nodeType":"YulFunctionCall","src":"24280:34:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24262:17:27"},"nodeType":"YulFunctionCall","src":"24262:53:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"24249:9:27"}]}]},"name":"convert_t_uint120_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24219:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"24229:9:27","type":""}],"src":"24179:142:27"},{"body":{"nodeType":"YulBlock","src":"24392:66:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24409:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24445:5:27"}],"functionName":{"name":"convert_t_uint120_to_t_uint256","nodeType":"YulIdentifier","src":"24414:30:27"},"nodeType":"YulFunctionCall","src":"24414:37:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24402:6:27"},"nodeType":"YulFunctionCall","src":"24402:50:27"},"nodeType":"YulExpressionStatement","src":"24402:50:27"}]},"name":"abi_encode_t_uint120_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24380:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24387:3:27","type":""}],"src":"24327:131:27"},{"body":{"nodeType":"YulBlock","src":"24523:81:27","statements":[{"nodeType":"YulAssignment","src":"24533:65:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24590:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"24573:16:27"},"nodeType":"YulFunctionCall","src":"24573:23:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"24564:8:27"},"nodeType":"YulFunctionCall","src":"24564:33:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24546:17:27"},"nodeType":"YulFunctionCall","src":"24546:52:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"24533:9:27"}]}]},"name":"convert_t_uint64_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24503:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"24513:9:27","type":""}],"src":"24464:140:27"},{"body":{"nodeType":"YulBlock","src":"24674:65:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24691:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24726:5:27"}],"functionName":{"name":"convert_t_uint64_to_t_uint256","nodeType":"YulIdentifier","src":"24696:29:27"},"nodeType":"YulFunctionCall","src":"24696:36:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24684:6:27"},"nodeType":"YulFunctionCall","src":"24684:49:27"},"nodeType":"YulExpressionStatement","src":"24684:49:27"}]},"name":"abi_encode_t_uint64_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24662:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24669:3:27","type":""}],"src":"24610:129:27"},{"body":{"nodeType":"YulBlock","src":"24870:205:27","statements":[{"nodeType":"YulAssignment","src":"24880:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24892:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"24903:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24888:3:27"},"nodeType":"YulFunctionCall","src":"24888:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24880:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24960:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24973:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"24984:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24969:3:27"},"nodeType":"YulFunctionCall","src":"24969:17:27"}],"functionName":{"name":"abi_encode_t_uint120_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24916:43:27"},"nodeType":"YulFunctionCall","src":"24916:71:27"},"nodeType":"YulExpressionStatement","src":"24916:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25040:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25053:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"25064:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25049:3:27"},"nodeType":"YulFunctionCall","src":"25049:18:27"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24997:42:27"},"nodeType":"YulFunctionCall","src":"24997:71:27"},"nodeType":"YulExpressionStatement","src":"24997:71:27"}]},"name":"abi_encode_tuple_t_uint120_t_uint64__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24834:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24846:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24854:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24865:4:27","type":""}],"src":"24745:330:27"},{"body":{"nodeType":"YulBlock","src":"25123:141:27","statements":[{"nodeType":"YulAssignment","src":"25133:32:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25159:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"25142:16:27"},"nodeType":"YulFunctionCall","src":"25142:23:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25133:5:27"}]},{"body":{"nodeType":"YulBlock","src":"25207:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25209:16:27"},"nodeType":"YulFunctionCall","src":"25209:18:27"},"nodeType":"YulExpressionStatement","src":"25209:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25180:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"25187:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25177:2:27"},"nodeType":"YulFunctionCall","src":"25177:29:27"},"nodeType":"YulIf","src":"25174:55:27"},{"nodeType":"YulAssignment","src":"25238:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25249:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"25256:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25245:3:27"},"nodeType":"YulFunctionCall","src":"25245:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25238:3:27"}]}]},"name":"increment_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25109:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25119:3:27","type":""}],"src":"25081:183:27"},{"body":{"nodeType":"YulBlock","src":"25424:288:27","statements":[{"nodeType":"YulAssignment","src":"25434:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25446:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"25457:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25442:3:27"},"nodeType":"YulFunctionCall","src":"25442:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25434:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"25514:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25527:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"25538:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25523:3:27"},"nodeType":"YulFunctionCall","src":"25523:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25470:43:27"},"nodeType":"YulFunctionCall","src":"25470:71:27"},"nodeType":"YulExpressionStatement","src":"25470:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"25595:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25608:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"25619:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25604:3:27"},"nodeType":"YulFunctionCall","src":"25604:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"25551:43:27"},"nodeType":"YulFunctionCall","src":"25551:72:27"},"nodeType":"YulExpressionStatement","src":"25551:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"25677:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25690:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"25701:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25686:3:27"},"nodeType":"YulFunctionCall","src":"25686:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"25633:43:27"},"nodeType":"YulFunctionCall","src":"25633:72:27"},"nodeType":"YulExpressionStatement","src":"25633:72:27"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25380:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"25392:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25400:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25408:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25419:4:27","type":""}],"src":"25270:442:27"},{"body":{"nodeType":"YulBlock","src":"25776:40:27","statements":[{"nodeType":"YulAssignment","src":"25787:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25803:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"25797:5:27"},"nodeType":"YulFunctionCall","src":"25797:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25787:6:27"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25759:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"25769:6:27","type":""}],"src":"25718:98:27"},{"body":{"nodeType":"YulBlock","src":"25917:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25934:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"25939:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25927:6:27"},"nodeType":"YulFunctionCall","src":"25927:19:27"},"nodeType":"YulExpressionStatement","src":"25927:19:27"},{"nodeType":"YulAssignment","src":"25955:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25974:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"25979:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25970:3:27"},"nodeType":"YulFunctionCall","src":"25970:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"25955:11:27"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25889:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"25894:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"25905:11:27","type":""}],"src":"25822:168:27"},{"body":{"nodeType":"YulBlock","src":"26086:283:27","statements":[{"nodeType":"YulVariableDeclaration","src":"26096:52:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26142:5:27"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"26110:31:27"},"nodeType":"YulFunctionCall","src":"26110:38:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26100:6:27","type":""}]},{"nodeType":"YulAssignment","src":"26157:77:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26222:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"26227:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26164:57:27"},"nodeType":"YulFunctionCall","src":"26164:70:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26157:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26282:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"26289:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26278:3:27"},"nodeType":"YulFunctionCall","src":"26278:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"26296:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"26301:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"26243:34:27"},"nodeType":"YulFunctionCall","src":"26243:65:27"},"nodeType":"YulExpressionStatement","src":"26243:65:27"},{"nodeType":"YulAssignment","src":"26317:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26328:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"26355:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"26333:21:27"},"nodeType":"YulFunctionCall","src":"26333:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26324:3:27"},"nodeType":"YulFunctionCall","src":"26324:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26317:3:27"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26067:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26074:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26082:3:27","type":""}],"src":"25996:373:27"},{"body":{"nodeType":"YulBlock","src":"26575:440:27","statements":[{"nodeType":"YulAssignment","src":"26585:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26597:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26608:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26593:3:27"},"nodeType":"YulFunctionCall","src":"26593:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26585:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26666:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26679:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26690:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26675:3:27"},"nodeType":"YulFunctionCall","src":"26675:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26622:43:27"},"nodeType":"YulFunctionCall","src":"26622:71:27"},"nodeType":"YulExpressionStatement","src":"26622:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26747:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26760:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26771:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26756:3:27"},"nodeType":"YulFunctionCall","src":"26756:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26703:43:27"},"nodeType":"YulFunctionCall","src":"26703:72:27"},"nodeType":"YulExpressionStatement","src":"26703:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26829:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26842:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26853:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26838:3:27"},"nodeType":"YulFunctionCall","src":"26838:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26785:43:27"},"nodeType":"YulFunctionCall","src":"26785:72:27"},"nodeType":"YulExpressionStatement","src":"26785:72:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26878:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26889:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26874:3:27"},"nodeType":"YulFunctionCall","src":"26874:18:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26898:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"26904:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26894:3:27"},"nodeType":"YulFunctionCall","src":"26894:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26867:6:27"},"nodeType":"YulFunctionCall","src":"26867:48:27"},"nodeType":"YulExpressionStatement","src":"26867:48:27"},{"nodeType":"YulAssignment","src":"26924:84:27","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"26994:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"27003:4:27"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26932:61:27"},"nodeType":"YulFunctionCall","src":"26932:76:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26924:4:27"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26523:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26535:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26543:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26551:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26559:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26570:4:27","type":""}],"src":"26375:640:27"},{"body":{"nodeType":"YulBlock","src":"27083:79:27","statements":[{"nodeType":"YulAssignment","src":"27093:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27108:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27102:5:27"},"nodeType":"YulFunctionCall","src":"27102:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27093:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27150:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"27124:25:27"},"nodeType":"YulFunctionCall","src":"27124:32:27"},"nodeType":"YulExpressionStatement","src":"27124:32:27"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"27061:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"27069:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27077:5:27","type":""}],"src":"27021:141:27"},{"body":{"nodeType":"YulBlock","src":"27244:273:27","statements":[{"body":{"nodeType":"YulBlock","src":"27290:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"27292:77:27"},"nodeType":"YulFunctionCall","src":"27292:79:27"},"nodeType":"YulExpressionStatement","src":"27292:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"27265:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"27274:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27261:3:27"},"nodeType":"YulFunctionCall","src":"27261:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"27286:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27257:3:27"},"nodeType":"YulFunctionCall","src":"27257:32:27"},"nodeType":"YulIf","src":"27254:119:27"},{"nodeType":"YulBlock","src":"27383:127:27","statements":[{"nodeType":"YulVariableDeclaration","src":"27398:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"27412:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27402:6:27","type":""}]},{"nodeType":"YulAssignment","src":"27427:73:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27472:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"27483:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27468:3:27"},"nodeType":"YulFunctionCall","src":"27468:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"27492:7:27"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"27437:30:27"},"nodeType":"YulFunctionCall","src":"27437:63:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27427:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27214:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"27225:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"27237:6:27","type":""}],"src":"27168:349:27"},{"body":{"nodeType":"YulBlock","src":"27551:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27568:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27571:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27561:6:27"},"nodeType":"YulFunctionCall","src":"27561:88:27"},"nodeType":"YulExpressionStatement","src":"27561:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27665:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"27668:4:27","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27658:6:27"},"nodeType":"YulFunctionCall","src":"27658:15:27"},"nodeType":"YulExpressionStatement","src":"27658:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27689:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27692:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"27682:6:27"},"nodeType":"YulFunctionCall","src":"27682:15:27"},"nodeType":"YulExpressionStatement","src":"27682:15:27"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"27523:180:27"},{"body":{"nodeType":"YulBlock","src":"27833:204:27","statements":[{"nodeType":"YulAssignment","src":"27843:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27855:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27866:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27851:3:27"},"nodeType":"YulFunctionCall","src":"27851:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27843:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27923:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27936:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27947:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27932:3:27"},"nodeType":"YulFunctionCall","src":"27932:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27879:43:27"},"nodeType":"YulFunctionCall","src":"27879:71:27"},"nodeType":"YulExpressionStatement","src":"27879:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28002:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28015:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28026:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28011:3:27"},"nodeType":"YulFunctionCall","src":"28011:18:27"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"27960:41:27"},"nodeType":"YulFunctionCall","src":"27960:70:27"},"nodeType":"YulExpressionStatement","src":"27960:70:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint64__to_t_uint256_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27797:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27809:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27817:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27828:4:27","type":""}],"src":"27709:328:27"},{"body":{"nodeType":"YulBlock","src":"28169:206:27","statements":[{"nodeType":"YulAssignment","src":"28179:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28191:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28202:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28187:3:27"},"nodeType":"YulFunctionCall","src":"28187:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28179:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28259:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28272:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28283:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28268:3:27"},"nodeType":"YulFunctionCall","src":"28268:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28215:43:27"},"nodeType":"YulFunctionCall","src":"28215:71:27"},"nodeType":"YulExpressionStatement","src":"28215:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28340:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28353:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28364:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28349:3:27"},"nodeType":"YulFunctionCall","src":"28349:18:27"}],"functionName":{"name":"abi_encode_t_uint120_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28296:43:27"},"nodeType":"YulFunctionCall","src":"28296:72:27"},"nodeType":"YulExpressionStatement","src":"28296:72:27"}]},"name":"abi_encode_tuple_t_address_t_uint120__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28133:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28145:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28153:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28164:4:27","type":""}],"src":"28043:332:27"},{"body":{"nodeType":"YulBlock","src":"28507:206:27","statements":[{"nodeType":"YulAssignment","src":"28517:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28529:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28540:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28525:3:27"},"nodeType":"YulFunctionCall","src":"28525:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28517:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28597:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28610:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28621:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28606:3:27"},"nodeType":"YulFunctionCall","src":"28606:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28553:43:27"},"nodeType":"YulFunctionCall","src":"28553:71:27"},"nodeType":"YulExpressionStatement","src":"28553:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28678:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28691:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28702:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28687:3:27"},"nodeType":"YulFunctionCall","src":"28687:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28634:43:27"},"nodeType":"YulFunctionCall","src":"28634:72:27"},"nodeType":"YulExpressionStatement","src":"28634:72:27"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28471:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28483:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28491:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28502:4:27","type":""}],"src":"28381:332:27"},{"body":{"nodeType":"YulBlock","src":"28773:87:27","statements":[{"nodeType":"YulAssignment","src":"28783:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"28791:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"28783:4:27"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28811:1:27","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"28814:3:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28804:6:27"},"nodeType":"YulFunctionCall","src":"28804:14:27"},"nodeType":"YulExpressionStatement","src":"28804:14:27"},{"nodeType":"YulAssignment","src":"28827:26:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28845:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28848:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"28835:9:27"},"nodeType":"YulFunctionCall","src":"28835:18:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"28827:4:27"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"28760:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"28768:4:27","type":""}],"src":"28719:141:27"},{"body":{"nodeType":"YulBlock","src":"28910:49:27","statements":[{"nodeType":"YulAssignment","src":"28920:33:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28938:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"28945:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28934:3:27"},"nodeType":"YulFunctionCall","src":"28934:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"28950:2:27","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"28930:3:27"},"nodeType":"YulFunctionCall","src":"28930:23:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"28920:6:27"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28893:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"28903:6:27","type":""}],"src":"28866:93:27"},{"body":{"nodeType":"YulBlock","src":"29018:54:27","statements":[{"nodeType":"YulAssignment","src":"29028:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"29053:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"29059:5:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"29049:3:27"},"nodeType":"YulFunctionCall","src":"29049:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"29028:8:27"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"28993:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"28999:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"29009:8:27","type":""}],"src":"28965:107:27"},{"body":{"nodeType":"YulBlock","src":"29154:317:27","statements":[{"nodeType":"YulVariableDeclaration","src":"29164:35:27","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"29185:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"29197:1:27","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"29181:3:27"},"nodeType":"YulFunctionCall","src":"29181:18:27"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"29168:9:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"29208:109:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"29239:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29250:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"29220:18:27"},"nodeType":"YulFunctionCall","src":"29220:97:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"29212:4:27","type":""}]},{"nodeType":"YulAssignment","src":"29326:51:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"29357:9:27"},{"name":"toInsert","nodeType":"YulIdentifier","src":"29368:8:27"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"29338:18:27"},"nodeType":"YulFunctionCall","src":"29338:39:27"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"29326:8:27"}]},{"nodeType":"YulAssignment","src":"29386:30:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29399:5:27"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"29410:4:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"29406:3:27"},"nodeType":"YulFunctionCall","src":"29406:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29395:3:27"},"nodeType":"YulFunctionCall","src":"29395:21:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"29386:5:27"}]},{"nodeType":"YulAssignment","src":"29425:40:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29438:5:27"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"29449:8:27"},{"name":"mask","nodeType":"YulIdentifier","src":"29459:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29445:3:27"},"nodeType":"YulFunctionCall","src":"29445:19:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"29435:2:27"},"nodeType":"YulFunctionCall","src":"29435:30:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"29425:6:27"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29115:5:27","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"29122:10:27","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"29134:8:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"29147:6:27","type":""}],"src":"29078:393:27"},{"body":{"nodeType":"YulBlock","src":"29537:82:27","statements":[{"nodeType":"YulAssignment","src":"29547:66:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29605:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29587:17:27"},"nodeType":"YulFunctionCall","src":"29587:24:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"29578:8:27"},"nodeType":"YulFunctionCall","src":"29578:34:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29560:17:27"},"nodeType":"YulFunctionCall","src":"29560:53:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"29547:9:27"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29517:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"29527:9:27","type":""}],"src":"29477:142:27"},{"body":{"nodeType":"YulBlock","src":"29672:28:27","statements":[{"nodeType":"YulAssignment","src":"29682:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"29689:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"29682:3:27"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29658:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"29668:3:27","type":""}],"src":"29625:75:27"},{"body":{"nodeType":"YulBlock","src":"29782:193:27","statements":[{"nodeType":"YulVariableDeclaration","src":"29792:63:27","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"29847:7:27"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"29816:30:27"},"nodeType":"YulFunctionCall","src":"29816:39:27"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"29796:16:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"29871:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"29911:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"29905:5:27"},"nodeType":"YulFunctionCall","src":"29905:11:27"},{"name":"offset","nodeType":"YulIdentifier","src":"29918:6:27"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"29950:16:27"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"29926:23:27"},"nodeType":"YulFunctionCall","src":"29926:41:27"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"29877:27:27"},"nodeType":"YulFunctionCall","src":"29877:91:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"29864:6:27"},"nodeType":"YulFunctionCall","src":"29864:105:27"},"nodeType":"YulExpressionStatement","src":"29864:105:27"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"29759:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"29765:6:27","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"29773:7:27","type":""}],"src":"29706:269:27"},{"body":{"nodeType":"YulBlock","src":"30030:24:27","statements":[{"nodeType":"YulAssignment","src":"30040:8:27","value":{"kind":"number","nodeType":"YulLiteral","src":"30047:1:27","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"30040:3:27"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"30026:3:27","type":""}],"src":"29981:73:27"},{"body":{"nodeType":"YulBlock","src":"30113:136:27","statements":[{"nodeType":"YulVariableDeclaration","src":"30123:46:27","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"30137:30:27"},"nodeType":"YulFunctionCall","src":"30137:32:27"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"30127:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"30222:4:27"},{"name":"offset","nodeType":"YulIdentifier","src":"30228:6:27"},{"name":"zero_0","nodeType":"YulIdentifier","src":"30236:6:27"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"30178:43:27"},"nodeType":"YulFunctionCall","src":"30178:65:27"},"nodeType":"YulExpressionStatement","src":"30178:65:27"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"30099:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"30105:6:27","type":""}],"src":"30060:189:27"},{"body":{"nodeType":"YulBlock","src":"30305:136:27","statements":[{"body":{"nodeType":"YulBlock","src":"30372:63:27","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"30416:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"30423:1:27","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"30386:29:27"},"nodeType":"YulFunctionCall","src":"30386:39:27"},"nodeType":"YulExpressionStatement","src":"30386:39:27"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"30325:5:27"},{"name":"end","nodeType":"YulIdentifier","src":"30332:3:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"30322:2:27"},"nodeType":"YulFunctionCall","src":"30322:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"30337:26:27","statements":[{"nodeType":"YulAssignment","src":"30339:22:27","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"30352:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"30359:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30348:3:27"},"nodeType":"YulFunctionCall","src":"30348:13:27"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"30339:5:27"}]}]},"pre":{"nodeType":"YulBlock","src":"30319:2:27","statements":[]},"src":"30315:120:27"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"30293:5:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"30300:3:27","type":""}],"src":"30255:186:27"},{"body":{"nodeType":"YulBlock","src":"30526:464:27","statements":[{"body":{"nodeType":"YulBlock","src":"30552:431:27","statements":[{"nodeType":"YulVariableDeclaration","src":"30566:54:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"30614:5:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"30582:31:27"},"nodeType":"YulFunctionCall","src":"30582:38:27"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"30570:8:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"30633:63:27","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"30656:8:27"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"30684:10:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"30666:17:27"},"nodeType":"YulFunctionCall","src":"30666:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30652:3:27"},"nodeType":"YulFunctionCall","src":"30652:44:27"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"30637:11:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"30853:27:27","statements":[{"nodeType":"YulAssignment","src":"30855:23:27","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"30870:8:27"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"30855:11:27"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"30837:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"30849:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"30834:2:27"},"nodeType":"YulFunctionCall","src":"30834:18:27"},"nodeType":"YulIf","src":"30831:49:27"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"30922:11:27"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"30939:8:27"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"30967:3:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"30949:17:27"},"nodeType":"YulFunctionCall","src":"30949:22:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30935:3:27"},"nodeType":"YulFunctionCall","src":"30935:37:27"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"30893:28:27"},"nodeType":"YulFunctionCall","src":"30893:80:27"},"nodeType":"YulExpressionStatement","src":"30893:80:27"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"30543:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30548:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"30540:2:27"},"nodeType":"YulFunctionCall","src":"30540:11:27"},"nodeType":"YulIf","src":"30537:446:27"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"30502:5:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"30509:3:27","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"30514:10:27","type":""}],"src":"30447:543:27"},{"body":{"nodeType":"YulBlock","src":"31059:54:27","statements":[{"nodeType":"YulAssignment","src":"31069:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"31094:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"31100:5:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"31090:3:27"},"nodeType":"YulFunctionCall","src":"31090:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"31069:8:27"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"31034:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"31040:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"31050:8:27","type":""}],"src":"30996:117:27"},{"body":{"nodeType":"YulBlock","src":"31170:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"31180:68:27","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31229:1:27","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"31232:5:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"31225:3:27"},"nodeType":"YulFunctionCall","src":"31225:13:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31244:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31240:3:27"},"nodeType":"YulFunctionCall","src":"31240:6:27"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"31196:28:27"},"nodeType":"YulFunctionCall","src":"31196:51:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31192:3:27"},"nodeType":"YulFunctionCall","src":"31192:56:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"31184:4:27","type":""}]},{"nodeType":"YulAssignment","src":"31257:25:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31271:4:27"},{"name":"mask","nodeType":"YulIdentifier","src":"31277:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31267:3:27"},"nodeType":"YulFunctionCall","src":"31267:15:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"31257:6:27"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"31147:4:27","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"31153:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"31163:6:27","type":""}],"src":"31119:169:27"},{"body":{"nodeType":"YulBlock","src":"31374:214:27","statements":[{"nodeType":"YulAssignment","src":"31507:37:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31534:4:27"},{"name":"len","nodeType":"YulIdentifier","src":"31540:3:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"31515:18:27"},"nodeType":"YulFunctionCall","src":"31515:29:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"31507:4:27"}]},{"nodeType":"YulAssignment","src":"31553:29:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31564:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31574:1:27","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"31577:3:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"31570:3:27"},"nodeType":"YulFunctionCall","src":"31570:11:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"31561:2:27"},"nodeType":"YulFunctionCall","src":"31561:21:27"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"31553:4:27"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"31355:4:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"31361:3:27","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"31369:4:27","type":""}],"src":"31293:295:27"},{"body":{"nodeType":"YulBlock","src":"31685:1303:27","statements":[{"nodeType":"YulVariableDeclaration","src":"31696:51:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"31743:3:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"31710:32:27"},"nodeType":"YulFunctionCall","src":"31710:37:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"31700:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"31832:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"31834:16:27"},"nodeType":"YulFunctionCall","src":"31834:18:27"},"nodeType":"YulExpressionStatement","src":"31834:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"31804:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"31812:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31801:2:27"},"nodeType":"YulFunctionCall","src":"31801:30:27"},"nodeType":"YulIf","src":"31798:56:27"},{"nodeType":"YulVariableDeclaration","src":"31864:52:27","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"31910:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"31904:5:27"},"nodeType":"YulFunctionCall","src":"31904:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"31878:25:27"},"nodeType":"YulFunctionCall","src":"31878:38:27"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"31868:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32009:4:27"},{"name":"oldLen","nodeType":"YulIdentifier","src":"32015:6:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"32023:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"31963:45:27"},"nodeType":"YulFunctionCall","src":"31963:67:27"},"nodeType":"YulExpressionStatement","src":"31963:67:27"},{"nodeType":"YulVariableDeclaration","src":"32040:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"32057:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"32044:9:27","type":""}]},{"nodeType":"YulAssignment","src":"32068:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"32081:4:27","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"32068:9:27"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"32132:611:27","statements":[{"nodeType":"YulVariableDeclaration","src":"32146:37:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"32165:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32177:4:27","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"32173:3:27"},"nodeType":"YulFunctionCall","src":"32173:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32161:3:27"},"nodeType":"YulFunctionCall","src":"32161:22:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"32150:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"32197:51:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32243:4:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"32211:31:27"},"nodeType":"YulFunctionCall","src":"32211:37:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"32201:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"32261:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"32270:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"32265:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"32329:163:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"32354:6:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"32372:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"32377:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32368:3:27"},"nodeType":"YulFunctionCall","src":"32368:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"32362:5:27"},"nodeType":"YulFunctionCall","src":"32362:26:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32347:6:27"},"nodeType":"YulFunctionCall","src":"32347:42:27"},"nodeType":"YulExpressionStatement","src":"32347:42:27"},{"nodeType":"YulAssignment","src":"32406:24:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"32420:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"32428:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32416:3:27"},"nodeType":"YulFunctionCall","src":"32416:14:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"32406:6:27"}]},{"nodeType":"YulAssignment","src":"32447:31:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"32464:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"32475:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32460:3:27"},"nodeType":"YulFunctionCall","src":"32460:18:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"32447:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"32295:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"32298:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32292:2:27"},"nodeType":"YulFunctionCall","src":"32292:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"32307:21:27","statements":[{"nodeType":"YulAssignment","src":"32309:17:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"32318:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"32321:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32314:3:27"},"nodeType":"YulFunctionCall","src":"32314:12:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"32309:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"32288:3:27","statements":[]},"src":"32284:208:27"},{"body":{"nodeType":"YulBlock","src":"32528:156:27","statements":[{"nodeType":"YulVariableDeclaration","src":"32546:43:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"32573:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"32578:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32569:3:27"},"nodeType":"YulFunctionCall","src":"32569:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"32563:5:27"},"nodeType":"YulFunctionCall","src":"32563:26:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"32550:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"32613:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"32640:9:27"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"32655:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"32663:4:27","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32651:3:27"},"nodeType":"YulFunctionCall","src":"32651:17:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"32621:18:27"},"nodeType":"YulFunctionCall","src":"32621:48:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32606:6:27"},"nodeType":"YulFunctionCall","src":"32606:64:27"},"nodeType":"YulExpressionStatement","src":"32606:64:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"32511:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"32520:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32508:2:27"},"nodeType":"YulFunctionCall","src":"32508:19:27"},"nodeType":"YulIf","src":"32505:179:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32704:4:27"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"32718:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"32726:1:27","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"32714:3:27"},"nodeType":"YulFunctionCall","src":"32714:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"32730:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32710:3:27"},"nodeType":"YulFunctionCall","src":"32710:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32697:6:27"},"nodeType":"YulFunctionCall","src":"32697:36:27"},"nodeType":"YulExpressionStatement","src":"32697:36:27"}]},"nodeType":"YulCase","src":"32125:618:27","value":{"kind":"number","nodeType":"YulLiteral","src":"32130:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"32760:222:27","statements":[{"nodeType":"YulVariableDeclaration","src":"32774:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"32787:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"32778:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"32811:67:27","statements":[{"nodeType":"YulAssignment","src":"32829:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"32848:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"32853:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32844:3:27"},"nodeType":"YulFunctionCall","src":"32844:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"32838:5:27"},"nodeType":"YulFunctionCall","src":"32838:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"32829:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"32804:6:27"},"nodeType":"YulIf","src":"32801:77:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32898:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32957:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"32964:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"32904:52:27"},"nodeType":"YulFunctionCall","src":"32904:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32891:6:27"},"nodeType":"YulFunctionCall","src":"32891:81:27"},"nodeType":"YulExpressionStatement","src":"32891:81:27"}]},"nodeType":"YulCase","src":"32752:230:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"32105:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"32113:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"32102:2:27"},"nodeType":"YulFunctionCall","src":"32102:14:27"},"nodeType":"YulSwitch","src":"32095:887:27"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"31674:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"31680:3:27","type":""}],"src":"31593:1395:27"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032(memPtr) {\n\n        mstore(add(memPtr, 0), \"Base: not support Metis transfer\")\n\n    }\n\n    function abi_encode_t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b80129ba1a934e5dfc9fb3c8eae1dbd8264cf9c223039383cf2893c1d8d2f032_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function abi_encode_t_uint128_to_t_uint128_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint128(value))\n    }\n\n    function abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint128_to_t_uint128_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint128_to_t_uint128_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function cleanup_t_uint120(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffff)\n    }\n\n    function abi_encode_t_uint120_to_t_uint120_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint120(value))\n    }\n\n    function abi_encode_tuple_t_bool_t_uint64_t_uint120__to_t_bool_t_uint64_t_uint120__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint120_to_t_uint120_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_uint120(value) {\n        if iszero(eq(value, cleanup_t_uint120(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint120(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint120(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint120(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint120(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IConfig_$7382_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IConfig_$7382_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IConfig_$7382_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IConfig_$7382__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IConfig_$7382_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function convert_t_contract$_IERC20_$1853_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IERC20_$1853_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$1853_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$1853__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20_$1853_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_uint64_to_t_uint64(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_t_uint120_to_t_uint120(value, pos) {\n        mstore(pos, cleanup_t_uint120(value))\n    }\n\n    // struct RedemptionQueue.RedemptionQueueItem -> struct RedemptionQueue.RedemptionQueueItem\n    function abi_encode_t_struct$_RedemptionQueueItem_$6902_memory_ptr_to_t_struct$_RedemptionQueueItem_$6902_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x60)\n\n        {\n            // hasBeenRedeemed\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // maturity\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint64_to_t_uint64(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint120_to_t_uint120(memberValue0, add(pos, 0x40))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_RedemptionQueueItem_$6902_memory_ptr__to_t_struct$_RedemptionQueueItem_$6902_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_struct$_RedemptionQueueItem_$6902_memory_ptr_to_t_struct$_RedemptionQueueItem_$6902_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6(memPtr) {\n\n        mstore(add(memPtr, 0), \"RedemptionQueue: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_607b9af12202264baf112baeb4925e7b47e5af5f942201918cb1996a880c38a6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833(memPtr) {\n\n        mstore(add(memPtr, 0), \"RedemptionQueue: amount is zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0fc4f7a96be5f6963e7d2f88ec096824f0134793237851fd8f071da2b245e833_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint64(value) -> converted {\n        converted := cleanup_t_uint64(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_uint120__to_t_uint120__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint120_to_t_uint120_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint64(x, y) -> sum {\n        x := cleanup_t_uint64(x)\n        y := cleanup_t_uint64(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function convert_t_uint120_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint120(value)))\n    }\n\n    function abi_encode_t_uint120_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint120_to_t_uint256(value))\n    }\n\n    function convert_t_uint64_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint64(value)))\n    }\n\n    function abi_encode_t_uint64_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint64_to_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint120_t_uint64__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint120_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function increment_t_uint64(value) -> ret {\n        value := cleanup_t_uint64(value)\n        if eq(value, 0xffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint64__to_t_uint256_t_uint64__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint120__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint120_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106101d15760003560e01c806392c2becc116100f7578063c87b56dd11610095578063e985e9c511610064578063e985e9c5146106e7578063f0dadf2e14610724578063f288a2e21461074f578063fe663b811461077a57610211565b8063c87b56dd1461062b578063cc928d5214610668578063e52083c614610691578063e63a391f146106bc57610211565b8063a217fddf116100d1578063a217fddf14610585578063a22cb465146105b0578063b88d4fde146105d9578063c4d66de81461060257610211565b806392c2becc146105045780639336ce801461052f57806395d89b411461055a57610211565b80632e6dd4721161016f578063644c45e01161013e578063644c45e01461044657806370a082311461047157806375b238fc146104ae57806379502c55146104d957610211565b80632e6dd4721461037857806342842e0e146103a35780634f4798ae146103cc5780636352211e1461040957610211565b8063095ea7b3116101ab578063095ea7b3146102bb578063103cf9e3146102e457806316b796391461031057806323b872dd1461034f57610211565b806301ffc9a71461021657806306fdde0314610253578063081812fc1461027e57610211565b36610211576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020890612e79565b60405180910390fd5b600080fd5b34801561022257600080fd5b5061023d60048036038101906102389190612f05565b6107b7565b60405161024a9190612f4d565b60405180910390f35b34801561025f57600080fd5b50610268610899565b6040516102759190612fe7565b60405180910390f35b34801561028a57600080fd5b506102a560048036038101906102a0919061303f565b61093a565b6040516102b291906130ad565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd91906130f4565b610956565b005b3480156102f057600080fd5b506102f961096c565b60405161030792919061315f565b60405180910390f35b34801561031c57600080fd5b506103376004803603810190610332919061303f565b6109b6565b604051610346939291906131d5565b60405180910390f35b34801561035b57600080fd5b506103766004803603810190610371919061320c565b610a1c565b005b34801561038457600080fd5b5061038d610b1e565b60405161039a91906130ad565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c5919061320c565b610b48565b005b3480156103d857600080fd5b506103f360048036038101906103ee919061328b565b610b68565b60405161040091906132da565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b919061303f565b610caf565b60405161043d91906130ad565b60405180910390f35b34801561045257600080fd5b5061045b610cc1565b60405161046891906132f5565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190613310565b610cdf565b6040516104a591906132da565b60405180910390f35b3480156104ba57600080fd5b506104c3610da8565b6040516104d09190613356565b60405180910390f35b3480156104e557600080fd5b506104ee610dcc565b6040516104fb91906133d0565b60405180910390f35b34801561051057600080fd5b50610519610df0565b6040516105269190613356565b60405180910390f35b34801561053b57600080fd5b50610544610e14565b604051610551919061340c565b60405180910390f35b34801561056657600080fd5b5061056f610e3a565b60405161057c9190612fe7565b60405180910390f35b34801561059157600080fd5b5061059a610edb565b6040516105a79190613356565b60405180910390f35b3480156105bc57600080fd5b506105d760048036038101906105d29190613453565b610ee2565b005b3480156105e557600080fd5b5061060060048036038101906105fb91906135c8565b610ef8565b005b34801561060e57600080fd5b5061062960048036038101906106249190613310565b610f1d565b005b34801561063757600080fd5b50610652600480360381019061064d919061303f565b6112be565b60405161065f9190612fe7565b60405180910390f35b34801561067457600080fd5b5061068f600480360381019061068a919061364b565b611327565b005b34801561069d57600080fd5b506106a6611484565b6040516106b391906132da565b60405180910390f35b3480156106c857600080fd5b506106d1611490565b6040516106de91906132f5565b60405180910390f35b3480156106f357600080fd5b5061070e6004803603810190610709919061368b565b611497565b60405161071b9190612f4d565b60405180910390f35b34801561073057600080fd5b50610739611539565b604051610746919061340c565b60405180910390f35b34801561075b57600080fd5b5061076461155f565b6040516107719190613356565b60405180910390f35b34801561078657600080fd5b506107a1600480360381019061079c919061303f565b611583565b6040516107ae919061373a565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061088257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610892575061089182611644565b5b9050919050565b606060006108a56116ae565b90508060000180546108b690613784565b80601f01602080910402602001604051908101604052809291908181526020018280546108e290613784565b801561092f5780601f106109045761010080835404028352916020019161092f565b820191906000526020600020905b81548152906001019060200180831161091257829003601f168201915b505050505091505090565b6000610945826116d6565b5061094f8261175e565b9050919050565b61096882826109636117a9565b6117b1565b5050565b60218060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60226020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900467ffffffffffffffff16908060000160099054906101000a90046effffffffffffffffffffffffffffff16905083565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a8e5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610a8591906130ad565b60405180910390fd5b6000610aa28383610a9d6117a9565b6117c3565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b18578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610b0f939291906137b5565b60405180910390fd5b50505050565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b6383838360405180602001604052806000815250610ef8565b505050565b6000610b726119f0565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610be1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd890613838565b60405180910390fd5b6000826effffffffffffffffffffffffffffff1611610c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2c906138a4565b60405180910390fd5b610c3f8383611a47565b9050610ca13330846effffffffffffffffffffffffffffff16602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611ce5909392919063ffffffff16565b610ca9611d67565b92915050565b6000610cba826116d6565b9050919050565b6000602060009054906101000a900467ffffffffffffffff16905090565b600080610cea6116ae565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d5e5760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610d5591906130ad565b60405180910390fd5b8060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f25cf2b509f2a7f322675b2a5322b182f44ad2c03ac941a0af17c9b178f5d5d5f81565b602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000610e466116ae565b9050806001018054610e5790613784565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8390613784565b8015610ed05780601f10610ea557610100808354040283529160200191610ed0565b820191906000526020600020905b815481529060010190602001808311610eb357829003601f168201915b505050505091505090565b6000801b81565b610ef4610eed6117a9565b8383611d80565b5050565b610f03848484610a1c565b610f17610f0e6117a9565b85858585611efe565b50505050565b6000610f276120af565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610f755750825b9050600060018367ffffffffffffffff16148015610faa575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610fb8575080155b15610fef576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561103f5760018560000160086101000a81548160ff0219169083151502179055505b611048866120d7565b6110bc6040518060400160405280601781526020017f76654d65746973526564656d7074696f6e5469636b65740000000000000000008152506040518060400160405280601981526020017f76654d6574697320526564656d7074696f6e205469636b657400000000000000815250612132565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e59745546040518163ffffffff1660e01b8152600401602060405180830381865afa158015611127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114b91906138d9565b602460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639336ce806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121a91906138d9565b602360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156112b65760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516112ad9190613941565b60405180910390a15b505050505050565b60606112c9826116d6565b5060006112d4612148565b905060008151116112f4576040518060200160405280600081525061131f565b806112fe8461215f565b60405160200161130f929190613998565b6040516020818303038152906040525b915050919050565b61132f6119f0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361139e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139590613838565b60405180910390fd5b60006113a98361222d565b905061140d8282604001516effffffffffffffffffffffffffffff16602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125039092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16847f2bb34f95ef23b2c81d8c149136c7ebb303c6525e5795d78e15be628068b2e5d2846040015160405161146f91906139bc565b60405180910390a450611480611d67565b5050565b670de0b6b3a764000081565b620f424081565b6000806114a26116ae565b90508060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b61158b612dde565b602260008381526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160099054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff16815250509050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60007f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300905090565b6000806116e283612582565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361175557826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161174c91906132da565b60405180910390fd5b80915050919050565b6000806117696116ae565b905080600401600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600033905090565b6117be83838360016125cd565b505050565b6000806117ce6116ae565b905060006117db85612582565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461181d5761181c8185876127a1565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118b05761185f6000866000806125cd565b60018260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146119355760018260030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8582600201600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480925050509392505050565b60006119fa612865565b90506002816000015403611a3a576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d76710b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad99190613a03565b42611ae49190613a5f565b905060405180606001604052806000151581526020018267ffffffffffffffff168152602001846effffffffffffffffffffffffffffff1681525060226000602060009054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160096101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff160217905550905050611c0b84602060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1661288d565b602060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1691508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16837fc0d0e4dc9b213313c7ee4b0ef42d8c64029a48a77f2e72cf58595683a90ec5fb8685604051611c8e929190613afd565b60405180910390a46020600081819054906101000a900467ffffffffffffffff16611cb890613b26565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505092915050565b611d61848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401611d1a93929190613b56565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128ab565b50505050565b6000611d71612865565b90506001816000018190555050565b6000611d8a6116ae565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dfd57826040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401611df491906130ad565b60405180910390fd5b818160050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051611ef09190612f4d565b60405180910390a350505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156120a8578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401611f5d9493929190613be2565b6020604051808303816000875af1925050508015611f9957506040513d601f19601f82011682018060405250810190611f969190613c43565b60015b61201d573d8060008114611fc9576040519150601f19603f3d011682016040523d82523d6000602084013e611fce565b606091505b50600081510361201557836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161200c91906130ad565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146120a657836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161209d91906130ad565b60405180910390fd5b505b5050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6120df61294d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061212761298d565b61212f61299f565b50565b61213a61294d565b61214482826129a9565b5050565b606060405180602001604052806000815250905090565b60606000600161216e846129e6565b01905060008167ffffffffffffffff81111561218d5761218c61349d565b5b6040519080825280601f01601f1916602001820160405280156121bf5781602001600182028036833780820191505090505b509050600082602001820190505b600115612222578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161221657612215613c70565b5b049450600085036121cd575b819350505050919050565b612235612dde565b61224861224183610caf565b3384612b39565b61227e576040517fe816274400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602260008381526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160099054906101000a90046effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff166effffffffffffffffffffffffffffff1681525050905080600001511561236e576040517f1b4e0c3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015167ffffffffffffffff164210156123c7574281602001516040517f375394cb0000000000000000000000000000000000000000000000000000000081526004016123be929190613c9f565b60405180910390fd5b6123d082612bfa565b60016022600084815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639336ce806040518163ffffffff1660e01b8152600401602060405180830381865afa15801561246a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248e91906138d9565b73ffffffffffffffffffffffffffffffffffffffff16639dc29fac3083604001516040518363ffffffff1660e01b81526004016124cc929190613cc8565b600060405180830381600087803b1580156124e657600080fd5b505af11580156124fa573d6000803e3d6000fd5b50505050919050565b61257d838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612536929190613cf1565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506128ab565b505050565b60008061258d6116ae565b905080600201600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60006125d76116ae565b905081806126125750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15612746576000612622856116d6565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561268d57508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156126a0575061269e8185611497565b155b156126e257836040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016126d991906130ad565b60405180910390fd5b821561274457848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8481600401600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6127ac838383612b39565b61286057600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361282157806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161281891906132da565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612857929190613cf1565b60405180910390fd5b505050565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b6128a7828260405180602001604052806000815250612c80565b5050565b600080602060008451602086016000885af1806128ce576040513d6000823e3d81fd5b3d9250600051915050600082146128e9576001811415612905565b60008473ffffffffffffffffffffffffffffffffffffffff163b145b1561294757836040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161293e91906130ad565b60405180910390fd5b50505050565b612955612ca4565b61298b576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61299561294d565b61299d612cc4565b565b6129a761294d565b565b6129b161294d565b60006129bb6116ae565b9050828160000190816129ce9190613ebc565b50818160010190816129e09190613ebc565b50505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612a44577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612a3a57612a39613c70565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612a81576d04ee2d6d415b85acef81000000008381612a7757612a76613c70565b5b0492506020810190505b662386f26fc100008310612ab057662386f26fc100008381612aa657612aa5613c70565b5b0492506010810190505b6305f5e1008310612ad9576305f5e1008381612acf57612ace613c70565b5b0492506008810190505b6127108310612afe576127108381612af457612af3613c70565b5b0492506004810190505b60648310612b215760648381612b1757612b16613c70565b5b0492506002810190505b600a8310612b30576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612bf157508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612bb25750612bb18484611497565b5b80612bf057508273ffffffffffffffffffffffffffffffffffffffff16612bd88361175e565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000612c0960008360006117c3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612c7c57816040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612c7391906132da565b60405180910390fd5b5050565b612c8a8383612ce5565b612c9f612c956117a9565b6000858585611efe565b505050565b6000612cae6120af565b60000160089054906101000a900460ff16905090565b612ccc61294d565b6000612cd6612865565b90506001816000018190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612d575760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612d4e91906130ad565b60405180910390fd5b6000612d65838360006117c3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612dd95760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401612dd091906130ad565b60405180910390fd5b505050565b6040518060600160405280600015158152602001600067ffffffffffffffff16815260200160006effffffffffffffffffffffffffffff1681525090565b600082825260208201905092915050565b7f426173653a206e6f7420737570706f7274204d65746973207472616e73666572600082015250565b6000612e63602083612e1c565b9150612e6e82612e2d565b602082019050919050565b60006020820190508181036000830152612e9281612e56565b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ee281612ead565b8114612eed57600080fd5b50565b600081359050612eff81612ed9565b92915050565b600060208284031215612f1b57612f1a612ea3565b5b6000612f2984828501612ef0565b91505092915050565b60008115159050919050565b612f4781612f32565b82525050565b6000602082019050612f626000830184612f3e565b92915050565b600081519050919050565b60005b83811015612f91578082015181840152602081019050612f76565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fb982612f68565b612fc38185612e1c565b9350612fd3818560208601612f73565b612fdc81612f9d565b840191505092915050565b600060208201905081810360008301526130018184612fae565b905092915050565b6000819050919050565b61301c81613009565b811461302757600080fd5b50565b60008135905061303981613013565b92915050565b60006020828403121561305557613054612ea3565b5b60006130638482850161302a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006130978261306c565b9050919050565b6130a78161308c565b82525050565b60006020820190506130c2600083018461309e565b92915050565b6130d18161308c565b81146130dc57600080fd5b50565b6000813590506130ee816130c8565b92915050565b6000806040838503121561310b5761310a612ea3565b5b6000613119858286016130df565b925050602061312a8582860161302a565b9150509250929050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61315981613134565b82525050565b60006040820190506131746000830185613150565b6131816020830184613150565b9392505050565b600067ffffffffffffffff82169050919050565b6131a581613188565b82525050565b60006effffffffffffffffffffffffffffff82169050919050565b6131cf816131ab565b82525050565b60006060820190506131ea6000830186612f3e565b6131f7602083018561319c565b61320460408301846131c6565b949350505050565b60008060006060848603121561322557613224612ea3565b5b6000613233868287016130df565b9350506020613244868287016130df565b92505060406132558682870161302a565b9150509250925092565b613268816131ab565b811461327357600080fd5b50565b6000813590506132858161325f565b92915050565b600080604083850312156132a2576132a1612ea3565b5b60006132b0858286016130df565b92505060206132c185828601613276565b9150509250929050565b6132d481613009565b82525050565b60006020820190506132ef60008301846132cb565b92915050565b600060208201905061330a600083018461319c565b92915050565b60006020828403121561332657613325612ea3565b5b6000613334848285016130df565b91505092915050565b6000819050919050565b6133508161333d565b82525050565b600060208201905061336b6000830184613347565b92915050565b6000819050919050565b600061339661339161338c8461306c565b613371565b61306c565b9050919050565b60006133a88261337b565b9050919050565b60006133ba8261339d565b9050919050565b6133ca816133af565b82525050565b60006020820190506133e560008301846133c1565b92915050565b60006133f68261339d565b9050919050565b613406816133eb565b82525050565b600060208201905061342160008301846133fd565b92915050565b61343081612f32565b811461343b57600080fd5b50565b60008135905061344d81613427565b92915050565b6000806040838503121561346a57613469612ea3565b5b6000613478858286016130df565b92505060206134898582860161343e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134d582612f9d565b810181811067ffffffffffffffff821117156134f4576134f361349d565b5b80604052505050565b6000613507612e99565b905061351382826134cc565b919050565b600067ffffffffffffffff8211156135335761353261349d565b5b61353c82612f9d565b9050602081019050919050565b82818337600083830152505050565b600061356b61356684613518565b6134fd565b90508281526020810184848401111561358757613586613498565b5b613592848285613549565b509392505050565b600082601f8301126135af576135ae613493565b5b81356135bf848260208601613558565b91505092915050565b600080600080608085870312156135e2576135e1612ea3565b5b60006135f0878288016130df565b9450506020613601878288016130df565b93505060406136128782880161302a565b925050606085013567ffffffffffffffff81111561363357613632612ea8565b5b61363f8782880161359a565b91505092959194509250565b6000806040838503121561366257613661612ea3565b5b60006136708582860161302a565b9250506020613681858286016130df565b9150509250929050565b600080604083850312156136a2576136a1612ea3565b5b60006136b0858286016130df565b92505060206136c1858286016130df565b9150509250929050565b6136d481612f32565b82525050565b6136e381613188565b82525050565b6136f2816131ab565b82525050565b60608201600082015161370e60008501826136cb565b50602082015161372160208501826136da565b50604082015161373460408501826136e9565b50505050565b600060608201905061374f60008301846136f8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061379c57607f821691505b6020821081036137af576137ae613755565b5b50919050565b60006060820190506137ca600083018661309e565b6137d760208301856132cb565b6137e4604083018461309e565b949350505050565b7f526564656d7074696f6e51756575653a207a65726f2061646472657373000000600082015250565b6000613822601d83612e1c565b915061382d826137ec565b602082019050919050565b6000602082019050818103600083015261385181613815565b9050919050565b7f526564656d7074696f6e51756575653a20616d6f756e74206973207a65726f00600082015250565b600061388e601f83612e1c565b915061389982613858565b602082019050919050565b600060208201905081810360008301526138bd81613881565b9050919050565b6000815190506138d3816130c8565b92915050565b6000602082840312156138ef576138ee612ea3565b5b60006138fd848285016138c4565b91505092915050565b6000819050919050565b600061392b61392661392184613906565b613371565b613188565b9050919050565b61393b81613910565b82525050565b60006020820190506139566000830184613932565b92915050565b600081905092915050565b600061397282612f68565b61397c818561395c565b935061398c818560208601612f73565b80840191505092915050565b60006139a48285613967565b91506139b08284613967565b91508190509392505050565b60006020820190506139d160008301846131c6565b92915050565b6139e081613188565b81146139eb57600080fd5b50565b6000815190506139fd816139d7565b92915050565b600060208284031215613a1957613a18612ea3565b5b6000613a27848285016139ee565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a6a82613188565b9150613a7583613188565b9250828201905067ffffffffffffffff811115613a9557613a94613a30565b5b92915050565b6000613ab6613ab1613aac846131ab565b613371565b613009565b9050919050565b613ac681613a9b565b82525050565b6000613ae7613ae2613add84613188565b613371565b613009565b9050919050565b613af781613acc565b82525050565b6000604082019050613b126000830185613abd565b613b1f6020830184613aee565b9392505050565b6000613b3182613188565b915067ffffffffffffffff8203613b4b57613b4a613a30565b5b600182019050919050565b6000606082019050613b6b600083018661309e565b613b78602083018561309e565b613b8560408301846132cb565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000613bb482613b8d565b613bbe8185613b98565b9350613bce818560208601612f73565b613bd781612f9d565b840191505092915050565b6000608082019050613bf7600083018761309e565b613c04602083018661309e565b613c1160408301856132cb565b8181036060830152613c238184613ba9565b905095945050505050565b600081519050613c3d81612ed9565b92915050565b600060208284031215613c5957613c58612ea3565b5b6000613c6784828501613c2e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000604082019050613cb460008301856132cb565b613cc1602083018461319c565b9392505050565b6000604082019050613cdd600083018561309e565b613cea6020830184613abd565b9392505050565b6000604082019050613d06600083018561309e565b613d1360208301846132cb565b9392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613d7c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d3f565b613d868683613d3f565b95508019841693508086168417925050509392505050565b6000613db9613db4613daf84613009565b613371565b613009565b9050919050565b6000819050919050565b613dd383613d9e565b613de7613ddf82613dc0565b848454613d4c565b825550505050565b600090565b613dfc613def565b613e07818484613dca565b505050565b5b81811015613e2b57613e20600082613df4565b600181019050613e0d565b5050565b601f821115613e7057613e4181613d1a565b613e4a84613d2f565b81016020851015613e59578190505b613e6d613e6585613d2f565b830182613e0c565b50505b505050565b600082821c905092915050565b6000613e9360001984600802613e75565b1980831691505092915050565b6000613eac8383613e82565b9150826002028217905092915050565b613ec582612f68565b67ffffffffffffffff811115613ede57613edd61349d565b5b613ee88254613784565b613ef3828285613e2f565b600060209050601f831160018114613f265760008415613f14578287015190505b613f1e8582613ea0565b865550613f86565b601f198416613f3486613d1a565b60005b82811015613f5c57848901518255600182019150602085019450602081019050613f37565b86831015613f795784890151613f75601f891682613e82565b8355505b6001600288020188555050505b50505050505056fea26469706673582212206ba3d86278027461d8019626c5059a2deb58fd68423dff1c00dc08169aaa4a3864736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x92C2BECC GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x6E7 JUMPI DUP1 PUSH4 0xF0DADF2E EQ PUSH2 0x724 JUMPI DUP1 PUSH4 0xF288A2E2 EQ PUSH2 0x74F JUMPI DUP1 PUSH4 0xFE663B81 EQ PUSH2 0x77A JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0xCC928D52 EQ PUSH2 0x668 JUMPI DUP1 PUSH4 0xE52083C6 EQ PUSH2 0x691 JUMPI DUP1 PUSH4 0xE63A391F EQ PUSH2 0x6BC JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0xA217FDDF GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x585 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5B0 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x5D9 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x602 JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x92C2BECC EQ PUSH2 0x504 JUMPI DUP1 PUSH4 0x9336CE80 EQ PUSH2 0x52F JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x55A JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x2E6DD472 GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x644C45E0 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x644C45E0 EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x471 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0x79502C55 EQ PUSH2 0x4D9 JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x2E6DD472 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3A3 JUMPI DUP1 PUSH4 0x4F4798AE EQ PUSH2 0x3CC JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x409 JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x103CF9E3 EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x16B79639 EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x34F JUMPI PUSH2 0x211 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x27E JUMPI PUSH2 0x211 JUMP JUMPDEST CALLDATASIZE PUSH2 0x211 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x208 SWAP1 PUSH2 0x2E79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x238 SWAP2 SWAP1 PUSH2 0x2F05 JUMP JUMPDEST PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24A SWAP2 SWAP1 PUSH2 0x2F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0x899 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x275 SWAP2 SWAP1 PUSH2 0x2FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A0 SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x93A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B2 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DD SWAP2 SWAP1 PUSH2 0x30F4 JUMP JUMPDEST PUSH2 0x956 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F9 PUSH2 0x96C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x307 SWAP3 SWAP2 SWAP1 PUSH2 0x315F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x337 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x9B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x346 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x376 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x371 SWAP2 SWAP1 PUSH2 0x320C JUMP JUMPDEST PUSH2 0xA1C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH2 0xB1E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39A SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C5 SWAP2 SWAP1 PUSH2 0x320C JUMP JUMPDEST PUSH2 0xB48 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EE SWAP2 SWAP1 PUSH2 0x328B JUMP JUMPDEST PUSH2 0xB68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x400 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x415 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x430 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x42B SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0xCAF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x43D SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45B PUSH2 0xCC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x468 SWAP2 SWAP1 PUSH2 0x32F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x498 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x493 SWAP2 SWAP1 PUSH2 0x3310 JUMP JUMPDEST PUSH2 0xCDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4A5 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C3 PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D0 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EE PUSH2 0xDCC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4FB SWAP2 SWAP1 PUSH2 0x33D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x519 PUSH2 0xDF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x526 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x544 PUSH2 0xE14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x340C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x56F PUSH2 0xE3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57C SWAP2 SWAP1 PUSH2 0x2FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x591 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59A PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5A7 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5D2 SWAP2 SWAP1 PUSH2 0x3453 JUMP JUMPDEST PUSH2 0xEE2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x600 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5FB SWAP2 SWAP1 PUSH2 0x35C8 JUMP JUMPDEST PUSH2 0xEF8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x629 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x624 SWAP2 SWAP1 PUSH2 0x3310 JUMP JUMPDEST PUSH2 0xF1D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x652 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x64D SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x12BE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65F SWAP2 SWAP1 PUSH2 0x2FE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x674 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x68F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x68A SWAP2 SWAP1 PUSH2 0x364B JUMP JUMPDEST PUSH2 0x1327 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A6 PUSH2 0x1484 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6B3 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D1 PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6DE SWAP2 SWAP1 PUSH2 0x32F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x709 SWAP2 SWAP1 PUSH2 0x368B JUMP JUMPDEST PUSH2 0x1497 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x71B SWAP2 SWAP1 PUSH2 0x2F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x739 PUSH2 0x1539 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x746 SWAP2 SWAP1 PUSH2 0x340C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x764 PUSH2 0x155F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x771 SWAP2 SWAP1 PUSH2 0x3356 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x786 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x79C SWAP2 SWAP1 PUSH2 0x303F JUMP JUMPDEST PUSH2 0x1583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7AE SWAP2 SWAP1 PUSH2 0x373A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x882 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x892 JUMPI POP PUSH2 0x891 DUP3 PUSH2 0x1644 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x8A5 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x8B6 SWAP1 PUSH2 0x3784 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8E2 SWAP1 PUSH2 0x3784 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x92F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x904 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x92F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x912 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH2 0x94F DUP3 PUSH2 0x175E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x968 DUP3 DUP3 PUSH2 0x963 PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x17B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x21 DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x22 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA8E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA85 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAA2 DUP4 DUP4 PUSH2 0xA9D PUSH2 0x17A9 JUMP JUMPDEST PUSH2 0x17C3 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB18 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB0F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x37B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x24 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB63 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xEF8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB72 PUSH2 0x19F0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD8 SWAP1 PUSH2 0x3838 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0xC35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC2C SWAP1 PUSH2 0x38A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC3F DUP4 DUP4 PUSH2 0x1A47 JUMP JUMPDEST SWAP1 POP PUSH2 0xCA1 CALLER ADDRESS DUP5 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x23 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1CE5 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xCA9 PUSH2 0x1D67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCBA DUP3 PUSH2 0x16D6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCEA PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD5E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD55 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH32 0x25CF2B509F2A7F322675B2A5322B182F44AD2C03AC941A0AF17C9B178F5D5D5F DUP2 JUMP JUMPDEST PUSH1 0x23 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xE46 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xE57 SWAP1 PUSH2 0x3784 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE83 SWAP1 PUSH2 0x3784 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xED0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xEA5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xED0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xEB3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SHL DUP2 JUMP JUMPDEST PUSH2 0xEF4 PUSH2 0xEED PUSH2 0x17A9 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1D80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xF03 DUP5 DUP5 DUP5 PUSH2 0xA1C JUMP JUMPDEST PUSH2 0xF17 PUSH2 0xF0E PUSH2 0x17A9 JUMP JUMPDEST DUP6 DUP6 DUP6 DUP6 PUSH2 0x1EFE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF27 PUSH2 0x20AF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xF75 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xFAA JUMPI POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xFB8 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0xFEF JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x103F JUMPI PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1048 DUP7 PUSH2 0x20D7 JUMP JUMPDEST PUSH2 0x10BC PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x17 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x76654D65746973526564656D7074696F6E5469636B6574000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x76654D6574697320526564656D7074696F6E205469636B657400000000000000 DUP2 MSTORE POP PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE5974554 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1127 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x114B SWAP2 SWAP1 PUSH2 0x38D9 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9336CE80 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x38D9 JUMP JUMPDEST PUSH1 0x23 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x12B6 JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x12AD SWAP2 SWAP1 PUSH2 0x3941 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x12C9 DUP3 PUSH2 0x16D6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x12D4 PUSH2 0x2148 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x12F4 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x131F JUMP JUMPDEST DUP1 PUSH2 0x12FE DUP5 PUSH2 0x215F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x130F SWAP3 SWAP2 SWAP1 PUSH2 0x3998 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x132F PUSH2 0x19F0 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x139E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1395 SWAP1 PUSH2 0x3838 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13A9 DUP4 PUSH2 0x222D JUMP JUMPDEST SWAP1 POP PUSH2 0x140D DUP3 DUP3 PUSH1 0x40 ADD MLOAD PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x24 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2503 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x2BB34F95EF23B2C81D8C149136C7EBB303C6525E5795D78E15BE628068B2E5D2 DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x146F SWAP2 SWAP1 PUSH2 0x39BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH2 0x1480 PUSH2 0x1D67 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14A2 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x5 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH32 0xF66846415D2BF9EABDA9E84793FF9C0EA96D87F50FC41E66AA16469C6A442F05 DUP2 JUMP JUMPDEST PUSH2 0x158B PUSH2 0x2DDE JUMP JUMPDEST PUSH1 0x22 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x16E2 DUP4 PUSH2 0x2582 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1755 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x174C SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1769 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x17BE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x25CD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x17CE PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x17DB DUP6 PUSH2 0x2582 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x181D JUMPI PUSH2 0x181C DUP2 DUP6 DUP8 PUSH2 0x27A1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18B0 JUMPI PUSH2 0x185F PUSH1 0x0 DUP7 PUSH1 0x0 DUP1 PUSH2 0x25CD JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1935 JUMPI PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP6 DUP3 PUSH1 0x2 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FA PUSH2 0x2865 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1A3A JUMPI PUSH1 0x40 MLOAD PUSH32 0x3EE5AEB500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x2D76710B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AD9 SWAP2 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST TIMESTAMP PUSH2 0x1AE4 SWAP2 SWAP1 PUSH2 0x3A5F JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x22 PUSH1 0x0 PUSH1 0x20 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x9 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH2 0x1C0B DUP5 PUSH1 0x20 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x288D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP2 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0xC0D0E4DC9B213313C7EE4B0EF42D8C64029A48A77F2E72CF58595683A90EC5FB DUP7 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1C8E SWAP3 SWAP2 SWAP1 PUSH2 0x3AFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x20 PUSH1 0x0 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x1CB8 SWAP1 PUSH2 0x3B26 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D61 DUP5 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D1A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x28AB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D71 PUSH2 0x2865 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D8A PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DFD JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DF4 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x5 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1EF0 SWAP2 SWAP1 PUSH2 0x2F4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x20A8 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 DUP7 DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F5D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3BE2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F99 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F96 SWAP2 SWAP1 PUSH2 0x3C43 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x201D JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1FC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FCE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2015 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x200C SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x20A6 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x209D SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x20DF PUSH2 0x294D JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x2127 PUSH2 0x298D JUMP JUMPDEST PUSH2 0x212F PUSH2 0x299F JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x213A PUSH2 0x294D JUMP JUMPDEST PUSH2 0x2144 DUP3 DUP3 PUSH2 0x29A9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x216E DUP5 PUSH2 0x29E6 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x218D JUMPI PUSH2 0x218C PUSH2 0x349D JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x21BF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2222 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2216 JUMPI PUSH2 0x2215 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x21CD JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2235 PUSH2 0x2DDE JUMP JUMPDEST PUSH2 0x2248 PUSH2 0x2241 DUP4 PUSH2 0xCAF JUMP JUMPDEST CALLER DUP5 PUSH2 0x2B39 JUMP JUMPDEST PUSH2 0x227E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE816274400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x22 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x9 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x0 ADD MLOAD ISZERO PUSH2 0x236E JUMPI PUSH1 0x40 MLOAD PUSH32 0x1B4E0C3C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND TIMESTAMP LT ISZERO PUSH2 0x23C7 JUMPI TIMESTAMP DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x375394CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23BE SWAP3 SWAP2 SWAP1 PUSH2 0x3C9F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23D0 DUP3 PUSH2 0x2BFA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x22 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9336CE80 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x246A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x248E SWAP2 SWAP1 PUSH2 0x38D9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9DC29FAC ADDRESS DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24CC SWAP3 SWAP2 SWAP1 PUSH2 0x3CC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x24FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x257D DUP4 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2536 SWAP3 SWAP2 SWAP1 PUSH2 0x3CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x28AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x258D PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25D7 PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP2 DUP1 PUSH2 0x2612 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2746 JUMPI PUSH1 0x0 PUSH2 0x2622 DUP6 PUSH2 0x16D6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x268D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x26A0 JUMPI POP PUSH2 0x269E DUP2 DUP6 PUSH2 0x1497 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x26E2 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26D9 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 ISZERO PUSH2 0x2744 JUMPI DUP5 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP5 DUP2 PUSH1 0x4 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x27AC DUP4 DUP4 DUP4 PUSH2 0x2B39 JUMP JUMPDEST PUSH2 0x2860 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2821 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2818 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2857 SWAP3 SWAP2 SWAP1 PUSH2 0x3CF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x28A7 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2C80 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0x28CE JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST RETURNDATASIZE SWAP3 POP PUSH1 0x0 MLOAD SWAP2 POP POP PUSH1 0x0 DUP3 EQ PUSH2 0x28E9 JUMPI PUSH1 0x1 DUP2 EQ ISZERO PUSH2 0x2905 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x2947 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x293E SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2955 PUSH2 0x2CA4 JUMP JUMPDEST PUSH2 0x298B JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x2995 PUSH2 0x294D JUMP JUMPDEST PUSH2 0x299D PUSH2 0x2CC4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x29A7 PUSH2 0x294D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x29B1 PUSH2 0x294D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BB PUSH2 0x16AE JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x0 ADD SWAP1 DUP2 PUSH2 0x29CE SWAP2 SWAP1 PUSH2 0x3EBC JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x1 ADD SWAP1 DUP2 PUSH2 0x29E0 SWAP2 SWAP1 PUSH2 0x3EBC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2A44 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2A3A JUMPI PUSH2 0x2A39 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2A81 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2A77 JUMPI PUSH2 0x2A76 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2AB0 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2AA6 JUMPI PUSH2 0x2AA5 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2AD9 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2ACF JUMPI PUSH2 0x2ACE PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2AFE JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2AF4 JUMPI PUSH2 0x2AF3 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2B21 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2B17 JUMPI PUSH2 0x2B16 PUSH2 0x3C70 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2B30 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2BF1 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x2BB2 JUMPI POP PUSH2 0x2BB1 DUP5 DUP5 PUSH2 0x1497 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2BF0 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2BD8 DUP4 PUSH2 0x175E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C09 PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x17C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2C7C JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C73 SWAP2 SWAP1 PUSH2 0x32DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2C8A DUP4 DUP4 PUSH2 0x2CE5 JUMP JUMPDEST PUSH2 0x2C9F PUSH2 0x2C95 PUSH2 0x17A9 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 PUSH2 0x1EFE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CAE PUSH2 0x20AF JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2CCC PUSH2 0x294D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CD6 PUSH2 0x2865 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2D57 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D4E SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D65 DUP4 DUP4 PUSH1 0x0 PUSH2 0x17C3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2DD9 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DD0 SWAP2 SWAP1 PUSH2 0x30AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x426173653A206E6F7420737570706F7274204D65746973207472616E73666572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E63 PUSH1 0x20 DUP4 PUSH2 0x2E1C JUMP JUMPDEST SWAP2 POP PUSH2 0x2E6E DUP3 PUSH2 0x2E2D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E92 DUP2 PUSH2 0x2E56 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2EE2 DUP2 PUSH2 0x2EAD JUMP JUMPDEST DUP2 EQ PUSH2 0x2EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2EFF DUP2 PUSH2 0x2ED9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F1B JUMPI PUSH2 0x2F1A PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F29 DUP5 DUP3 DUP6 ADD PUSH2 0x2EF0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F47 DUP2 PUSH2 0x2F32 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2F62 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F3E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2F91 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2F76 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FB9 DUP3 PUSH2 0x2F68 JUMP JUMPDEST PUSH2 0x2FC3 DUP2 DUP6 PUSH2 0x2E1C JUMP JUMPDEST SWAP4 POP PUSH2 0x2FD3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F73 JUMP JUMPDEST PUSH2 0x2FDC DUP2 PUSH2 0x2F9D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3001 DUP2 DUP5 PUSH2 0x2FAE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x301C DUP2 PUSH2 0x3009 JUMP JUMPDEST DUP2 EQ PUSH2 0x3027 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3039 DUP2 PUSH2 0x3013 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3055 JUMPI PUSH2 0x3054 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3063 DUP5 DUP3 DUP6 ADD PUSH2 0x302A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3097 DUP3 PUSH2 0x306C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x30A7 DUP2 PUSH2 0x308C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x30C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x309E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x30D1 DUP2 PUSH2 0x308C JUMP JUMPDEST DUP2 EQ PUSH2 0x30DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x30EE DUP2 PUSH2 0x30C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x310B JUMPI PUSH2 0x310A PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3119 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x312A DUP6 DUP3 DUP7 ADD PUSH2 0x302A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3159 DUP2 PUSH2 0x3134 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3174 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3150 JUMP JUMPDEST PUSH2 0x3181 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3150 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31A5 DUP2 PUSH2 0x3188 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31CF DUP2 PUSH2 0x31AB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31EA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2F3E JUMP JUMPDEST PUSH2 0x31F7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x319C JUMP JUMPDEST PUSH2 0x3204 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x31C6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3225 JUMPI PUSH2 0x3224 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3233 DUP7 DUP3 DUP8 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3244 DUP7 DUP3 DUP8 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3255 DUP7 DUP3 DUP8 ADD PUSH2 0x302A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x3268 DUP2 PUSH2 0x31AB JUMP JUMPDEST DUP2 EQ PUSH2 0x3273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3285 DUP2 PUSH2 0x325F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32A2 JUMPI PUSH2 0x32A1 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x32B0 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x32C1 DUP6 DUP3 DUP7 ADD PUSH2 0x3276 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x32D4 DUP2 PUSH2 0x3009 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32EF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x32CB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x330A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x319C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3326 JUMPI PUSH2 0x3325 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3334 DUP5 DUP3 DUP6 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3350 DUP2 PUSH2 0x333D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x336B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3347 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3396 PUSH2 0x3391 PUSH2 0x338C DUP5 PUSH2 0x306C JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x306C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A8 DUP3 PUSH2 0x337B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33BA DUP3 PUSH2 0x339D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33CA DUP2 PUSH2 0x33AF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x33E5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x33C1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33F6 DUP3 PUSH2 0x339D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3406 DUP2 PUSH2 0x33EB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3421 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x33FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3430 DUP2 PUSH2 0x2F32 JUMP JUMPDEST DUP2 EQ PUSH2 0x343B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x344D DUP2 PUSH2 0x3427 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x346A JUMPI PUSH2 0x3469 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3478 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3489 DUP6 DUP3 DUP7 ADD PUSH2 0x343E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x34D5 DUP3 PUSH2 0x2F9D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x34F4 JUMPI PUSH2 0x34F3 PUSH2 0x349D JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3507 PUSH2 0x2E99 JUMP JUMPDEST SWAP1 POP PUSH2 0x3513 DUP3 DUP3 PUSH2 0x34CC JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3533 JUMPI PUSH2 0x3532 PUSH2 0x349D JUMP JUMPDEST JUMPDEST PUSH2 0x353C DUP3 PUSH2 0x2F9D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x356B PUSH2 0x3566 DUP5 PUSH2 0x3518 JUMP JUMPDEST PUSH2 0x34FD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3587 JUMPI PUSH2 0x3586 PUSH2 0x3498 JUMP JUMPDEST JUMPDEST PUSH2 0x3592 DUP5 DUP3 DUP6 PUSH2 0x3549 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x35AF JUMPI PUSH2 0x35AE PUSH2 0x3493 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x35BF DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3558 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x35E2 JUMPI PUSH2 0x35E1 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x35F0 DUP8 DUP3 DUP9 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x3601 DUP8 DUP3 DUP9 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x3612 DUP8 DUP3 DUP9 ADD PUSH2 0x302A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3633 JUMPI PUSH2 0x3632 PUSH2 0x2EA8 JUMP JUMPDEST JUMPDEST PUSH2 0x363F DUP8 DUP3 DUP9 ADD PUSH2 0x359A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3662 JUMPI PUSH2 0x3661 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3670 DUP6 DUP3 DUP7 ADD PUSH2 0x302A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3681 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x36A2 JUMPI PUSH2 0x36A1 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x36B0 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x36C1 DUP6 DUP3 DUP7 ADD PUSH2 0x30DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x36D4 DUP2 PUSH2 0x2F32 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x36E3 DUP2 PUSH2 0x3188 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x36F2 DUP2 PUSH2 0x31AB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x370E PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x36CB JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x3721 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x36DA JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x3734 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x36E9 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x374F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x36F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x379C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x37AF JUMPI PUSH2 0x37AE PUSH2 0x3755 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x37CA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x37D7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x37E4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x309E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x526564656D7074696F6E51756575653A207A65726F2061646472657373000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3822 PUSH1 0x1D DUP4 PUSH2 0x2E1C JUMP JUMPDEST SWAP2 POP PUSH2 0x382D DUP3 PUSH2 0x37EC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3851 DUP2 PUSH2 0x3815 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526564656D7074696F6E51756575653A20616D6F756E74206973207A65726F00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x388E PUSH1 0x1F DUP4 PUSH2 0x2E1C JUMP JUMPDEST SWAP2 POP PUSH2 0x3899 DUP3 PUSH2 0x3858 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x38BD DUP2 PUSH2 0x3881 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x38D3 DUP2 PUSH2 0x30C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38EF JUMPI PUSH2 0x38EE PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38FD DUP5 DUP3 DUP6 ADD PUSH2 0x38C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x392B PUSH2 0x3926 PUSH2 0x3921 DUP5 PUSH2 0x3906 JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x3188 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x393B DUP2 PUSH2 0x3910 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3956 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3932 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3972 DUP3 PUSH2 0x2F68 JUMP JUMPDEST PUSH2 0x397C DUP2 DUP6 PUSH2 0x395C JUMP JUMPDEST SWAP4 POP PUSH2 0x398C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F73 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39A4 DUP3 DUP6 PUSH2 0x3967 JUMP JUMPDEST SWAP2 POP PUSH2 0x39B0 DUP3 DUP5 PUSH2 0x3967 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x39D1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x31C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x39E0 DUP2 PUSH2 0x3188 JUMP JUMPDEST DUP2 EQ PUSH2 0x39EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x39FD DUP2 PUSH2 0x39D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A19 JUMPI PUSH2 0x3A18 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A27 DUP5 DUP3 DUP6 ADD PUSH2 0x39EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3A6A DUP3 PUSH2 0x3188 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A75 DUP4 PUSH2 0x3188 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A95 JUMPI PUSH2 0x3A94 PUSH2 0x3A30 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB6 PUSH2 0x3AB1 PUSH2 0x3AAC DUP5 PUSH2 0x31AB JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x3009 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3AC6 DUP2 PUSH2 0x3A9B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AE7 PUSH2 0x3AE2 PUSH2 0x3ADD DUP5 PUSH2 0x3188 JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x3009 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3AF7 DUP2 PUSH2 0x3ACC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3B12 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3ABD JUMP JUMPDEST PUSH2 0x3B1F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3AEE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B31 DUP3 PUSH2 0x3188 JUMP JUMPDEST SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3B4B JUMPI PUSH2 0x3B4A PUSH2 0x3A30 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3B6B PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3B78 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3B85 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x32CB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BB4 DUP3 PUSH2 0x3B8D JUMP JUMPDEST PUSH2 0x3BBE DUP2 DUP6 PUSH2 0x3B98 JUMP JUMPDEST SWAP4 POP PUSH2 0x3BCE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2F73 JUMP JUMPDEST PUSH2 0x3BD7 DUP2 PUSH2 0x2F9D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3BF7 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3C04 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3C11 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x32CB JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3C23 DUP2 DUP5 PUSH2 0x3BA9 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3C3D DUP2 PUSH2 0x2ED9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C59 JUMPI PUSH2 0x3C58 PUSH2 0x2EA3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3C67 DUP5 DUP3 DUP6 ADD PUSH2 0x3C2E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3CB4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x32CB JUMP JUMPDEST PUSH2 0x3CC1 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x319C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3CDD PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3CEA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3ABD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3D06 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x309E JUMP JUMPDEST PUSH2 0x3D13 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x32CB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x3D7C PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x3D3F JUMP JUMPDEST PUSH2 0x3D86 DUP7 DUP4 PUSH2 0x3D3F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DB9 PUSH2 0x3DB4 PUSH2 0x3DAF DUP5 PUSH2 0x3009 JUMP JUMPDEST PUSH2 0x3371 JUMP JUMPDEST PUSH2 0x3009 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3DD3 DUP4 PUSH2 0x3D9E JUMP JUMPDEST PUSH2 0x3DE7 PUSH2 0x3DDF DUP3 PUSH2 0x3DC0 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x3D4C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3DFC PUSH2 0x3DEF JUMP JUMPDEST PUSH2 0x3E07 DUP2 DUP5 DUP5 PUSH2 0x3DCA JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3E2B JUMPI PUSH2 0x3E20 PUSH1 0x0 DUP3 PUSH2 0x3DF4 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3E0D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3E70 JUMPI PUSH2 0x3E41 DUP2 PUSH2 0x3D1A JUMP JUMPDEST PUSH2 0x3E4A DUP5 PUSH2 0x3D2F JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x3E59 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x3E6D PUSH2 0x3E65 DUP6 PUSH2 0x3D2F JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x3E0C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E93 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3E75 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3EAC DUP4 DUP4 PUSH2 0x3E82 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3EC5 DUP3 PUSH2 0x2F68 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3EDE JUMPI PUSH2 0x3EDD PUSH2 0x349D JUMP JUMPDEST JUMPDEST PUSH2 0x3EE8 DUP3 SLOAD PUSH2 0x3784 JUMP JUMPDEST PUSH2 0x3EF3 DUP3 DUP3 DUP6 PUSH2 0x3E2F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3F26 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3F14 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x3F1E DUP6 DUP3 PUSH2 0x3EA0 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3F86 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x3F34 DUP7 PUSH2 0x3D1A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3F5C JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3F37 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x3F79 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3F75 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3E82 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xA3D86278027461D8019626C5 SDIV SWAP11 0x2D 0xEB PC REVERT PUSH9 0x423DFF1C00DC08169A 0xAA 0x4A CODESIZE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"587:8845:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2934:42:23;;;;;;;;;;:::i;:::-;;;;;;;;587:8845:24;;;;2673:311:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3545:146;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4791:154;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4617:113;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1510:58:24;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1640:67;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;5494:578:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9337:93:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6138:132:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5465:572:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3365:118:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8239:84:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3043:265:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;722:60:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1075:21;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;830:64;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1714:21:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3755:150:1;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;509:49:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5012:144:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6336:233;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2667:256:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3971:255:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7552:681:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;955:56:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;421:42;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5222:210:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1741:19:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;606:66:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8329:140:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2673:311:1;2786:4;2836:25;2821:40;;;:11;:40;;;;:104;;;;2892:33;2877:48;;;:11;:48;;;;2821:104;:156;;;;2941:36;2965:11;2941:23;:36::i;:::-;2821:156;2802:175;;2673:311;;;:::o;3545:146::-;3590:13;3615:23;3641:19;:17;:19::i;:::-;3615:45;;3677:1;:7;;3670:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3545:146;:::o;4791:154::-;4858:7;4877:22;4891:7;4877:13;:22::i;:::-;;4917:21;4930:7;4917:12;:21::i;:::-;4910:28;;4791:154;;;:::o;4617:113::-;4688:35;4697:2;4701:7;4710:12;:10;:12::i;:::-;4688:8;:35::i;:::-;4617:113;;:::o;1510:58:24:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1640:67::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5494:578:1:-;5602:1;5588:16;;:2;:16;;;5584:87;;5657:1;5627:33;;;;;;;;;;;:::i;:::-;;;;;;;;5584:87;5889:21;5913:34;5921:2;5925:7;5934:12;:10;:12::i;:::-;5913:7;:34::i;:::-;5889:58;;5978:4;5961:21;;:13;:21;;;5957:109;;6026:4;6032:7;6041:13;6005:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;5957:109;5574:498;5494:578;;;:::o;9337:93:24:-;9384:7;9417:5;;;;;;;;;;;9402:21;;9337:93;:::o;6138:132:1:-;6224:39;6241:4;6247:2;6251:7;6224:39;;;;;;;;;;;;:16;:39::i;:::-;6138:132;;;:::o;5465:572:24:-;5569:14;3395:21:3;:19;:21::i;:::-;5625:1:24::1;5603:24;;:10;:24;;::::0;5595:66:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;5697:1;5679:15;:19;;;5671:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;5815:54;5841:10;5853:15;5815:25;:54::i;:::-;5806:63;;5941:89;5974:10;5998:4;6012:15;5941:89;;:7;;;;;;;;;;;:24;;;;:89;;;;;;:::i;:::-;3437:20:3::0;:18;:20::i;:::-;5465:572:24;;;;:::o;3365:118:1:-;3428:7;3454:22;3468:7;3454:13;:22::i;:::-;3447:29;;3365:118;;;:::o;8239:84:24:-;8282:6;8307:9;;;;;;;;;;;8300:16;;8239:84;:::o;3043:265:1:-;3106:7;3125:23;3151:19;:17;:19::i;:::-;3125:45;;3201:1;3184:19;;:5;:19;;;3180:87;;3253:1;3226:30;;;;;;;;;;;:::i;:::-;;;;;;;;3180:87;3283:1;:11;;:18;3295:5;3283:18;;;;;;;;;;;;;;;;3276:25;;;3043:265;;;:::o;722:60:23:-;759:23;722:60;:::o;1075:21::-;;;;;;;;;;;;:::o;830:64::-;869:25;830:64;:::o;1714:21:24:-;;;;;;;;;;;;;:::o;3755:150:1:-;3802:13;3827:23;3853:19;:17;:19::i;:::-;3827:45;;3889:1;:9;;3882:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3755:150;:::o;509:49:23:-;554:4;509:49;;;:::o;5012:144:1:-;5097:52;5116:12;:10;:12::i;:::-;5130:8;5140;5097:18;:52::i;:::-;5012:144;;:::o;6336:233::-;6449:31;6462:4;6468:2;6472:7;6449:12;:31::i;:::-;6490:72;6524:12;:10;:12::i;:::-;6538:4;6544:2;6548:7;6557:4;6490:33;:72::i;:::-;6336:233;;;;:::o;2667:256:24:-;4158:30:0;4191:26;:24;:26::i;:::-;4158:59;;4279:19;4302:1;:15;;;;;;;;;;;;4301:16;4279:38;;4327:18;4348:1;:14;;;;;;;;;;;;4327:35;;4706:17;4741:1;4726:11;:16;;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4805:1;4790:11;:16;;;:50;;;;;4839:1;4818:4;4810:25;;;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;;;;;;;;;;;;;4851:91;4968:1;4951;:14;;;:18;;;;;;;;;;;;;;;;;;4983:14;4979:67;;;5031:4;5013:1;:15;;;:22;;;;;;;;;;;;;;;;;;4979:67;2733:20:24::1;2745:7;2733:11;:20::i;:::-;2763:69;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;::::0;:13:::1;:69::i;:::-;2857:6;::::0;::::1;;;;;;;;:12;;;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2842:5;;:30;;;;;;;;;;;;;;;;;;2899:6;::::0;::::1;;;;;;;;:14;;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2882:7;;:34;;;;;;;;;;;;;;;;;;5070:14:0::0;5066:101;;;5118:5;5100:1;:15;;;:23;;;;;;;;;;;;;;;;;;5142:14;5154:1;5142:14;;;;;;:::i;:::-;;;;;;;;5066:101;4092:1081;;;;;2667:256:24;:::o;3971:255:1:-;4035:13;4060:22;4074:7;4060:13;:22::i;:::-;;4093:21;4117:10;:8;:10::i;:::-;4093:34;;4168:1;4150:7;4144:21;:25;:75;;;;;;;;;;;;;;;;;4186:7;4195:18;:7;:16;:18::i;:::-;4172:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4144:75;4137:82;;;3971:255;;;:::o;7552:681:24:-;3395:21:3;:19;:21::i;:::-;7693:1:24::1;7671:24;;:10;:24;;::::0;7663:66:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;7817:47;7867:37;7897:6;7867:29;:37::i;:::-;7817:87;;7968:59;7987:10;7999:20;:27;;;7968:59;;:5;;;;;;;;;;;:18;;;;:59;;;;;:::i;:::-;8153:10;8043:183;;8118:10;8043:183;;8090:6;8043:183;8188:20;:27;;;8043:183;;;;;;:::i;:::-;;;;;;;;7653:580;3437:20:3::0;:18;:20::i;:::-;7552:681:24;;:::o;955:56:23:-;1004:7;955:56;:::o;421:42::-;460:3;421:42;:::o;5222:210:1:-;5310:4;5326:23;5352:19;:17;:19::i;:::-;5326:45;;5388:1;:20;;:27;5409:5;5388:27;;;;;;;;;;;;;;;:37;5416:8;5388:37;;;;;;;;;;;;;;;;;;;;;;;;;5381:44;;;5222:210;;;;:::o;1741:19:24:-;;;;;;;;;;;;;:::o;606:66:23:-;646:26;606:66;:::o;8329:140:24:-;8395:26;;:::i;:::-;8440:14;:22;8455:6;8440:22;;;;;;;;;;;8433:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8329:140;;;:::o;1035:146:4:-;1111:4;1149:25;1134:40;;;:11;:40;;;;1127:47;;1035:146;;;:::o;1957:156:1:-;2008:23;2076:21;2066:31;;1957:156;:::o;17910:241::-;17973:7;17992:13;18008:17;18017:7;18008:8;:17::i;:::-;17992:33;;18056:1;18039:19;;:5;:19;;;18035:88;;18104:7;18081:31;;;;;;;;;;;:::i;:::-;;;;;;;;18035:88;18139:5;18132:12;;;17910:241;;;:::o;7372:184::-;7442:7;7461:23;7487:19;:17;:19::i;:::-;7461:45;;7523:1;:17;;:26;7541:7;7523:26;;;;;;;;;;;;;;;;;;;;;7516:33;;;7372:184;;;:::o;887:96:2:-;940:7;966:10;959:17;;887:96;:::o;16076:120:1:-;16156:33;16165:2;16169:7;16178:4;16184;16156:8;:33::i;:::-;16076:120;;;:::o;10384:856::-;10470:7;10489:23;10515:19;:17;:19::i;:::-;10489:45;;10544:12;10559:17;10568:7;10559:8;:17::i;:::-;10544:32;;10652:1;10636:18;;:4;:18;;;10632:86;;10670:37;10687:4;10693;10699:7;10670:16;:37::i;:::-;10632:86;10778:1;10762:18;;:4;:18;;;10758:258;;10878:48;10895:1;10899:7;10916:1;10920:5;10878:8;:48::i;:::-;10990:1;10969;:11;;:17;10981:4;10969:17;;;;;;;;;;;;;;;;:22;;;;;;;;;;;10758:258;11044:1;11030:16;;:2;:16;;;11026:109;;11109:1;11090;:11;;:15;11102:2;11090:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;11026:109;11166:2;11145:1;:9;;:18;11155:7;11145:18;;;;;;;;;;;;:23;;;;;;;;;;;;;;;;;;11203:7;11199:2;11184:27;;11193:4;11184:27;;;;;;;;;;;;11229:4;11222:11;;;;10384:856;;;;;:::o;3470:384:3:-;3519:32;3554:28;:26;:28::i;:::-;3519:63;;1991:1;3670;:9;;;:20;3666:88;;3713:30;;;;;;;;;;;;;;3666:88;1991:1;3828;:9;;:19;;;;3509:345;3470:384::o;3916:1054:24:-;4014:14;4084:25;4138:6;;;;;;;;;;:22;;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4119:15;4112:50;;;;:::i;:::-;4084:78;;4270:146;;;;;;;;4400:5;4270:146;;;;;;4351:18;4270:146;;;;;;4312:15;4270:146;;;;;4242:14;:25;4257:9;;;;;;;;;;;4242:25;;;;;;;;;;;;;:174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4520:49;4536:10;4557:9;;;;;;;;;;;4520:49;;:9;:49::i;:::-;4635:9;;;;;;;;;;;4626:18;;;;4764:10;4659:229;;4729:10;4659:229;;4701:6;4659:229;4811:15;4859:18;4659:229;;;;;;;:::i;:::-;;;;;;;;4954:9;;4952:11;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4030:940;3916:1054;;;;:::o;1670:188:10:-;1770:81;1790:5;1812;:18;;;1833:4;1839:2;1843:5;1797:53;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1770:19;:81::i;:::-;1670:188;;;;:::o;3860:283:3:-;3908:32;3943:28;:26;:28::i;:::-;3908:63;;1949:1;4113;:9;;:23;;;;3898:245;3860:283::o;17306:369:1:-;17409:23;17435:19;:17;:19::i;:::-;17409:45;;17488:1;17468:22;;:8;:22;;;17464:91;;17535:8;17513:31;;;;;;;;;;;:::i;:::-;;;;;;;;17464:91;17604:8;17564:1;:20;;:27;17585:5;17564:27;;;;;;;;;;;;;;;:37;17592:8;17564:37;;;;;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;17649:8;17627:41;;17642:5;17627:41;;;17659:8;17627:41;;;;;;:::i;:::-;;;;;;;;17399:276;17306:369;;;:::o;985:924:14:-;1182:1;1165:2;:14;;;:18;1161:742;;;1219:2;1203:36;;;1240:8;1250:4;1256:7;1265:4;1203:67;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1199:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1577:1;1560:6;:13;:18;1556:323;;1700:2;1664:39;;;;;;;;;;;:::i;:::-;;;;;;;;1556:323;1831:6;1825:13;1816:6;1812:2;1808:15;1801:38;1199:694;1327:41;;;1317:51;;;:6;:51;;;;1313:182;;1473:2;1437:39;;;;;;;;;;;:::i;:::-;;;;;;;;1313:182;1271:238;1161:742;985:924;;;;;:::o;8737:170:0:-;8795:30;8870:21;8860:31;;8737:170;:::o;1725:166:23:-;6931:20:0;:18;:20::i;:::-;1816:7:23::1;1799:6;::::0;:25:::1;;;;;;;;;;;;;;;;;;1834:24;:22;:24::i;:::-;1868:16;:14;:16::i;:::-;1725:166:::0;:::o;2232:149:1:-;6931:20:0;:18;:20::i;:::-;2335:39:1::1;2359:5;2366:7;2335:23;:39::i;:::-;2232:149:::0;;:::o;4468:92::-;4519:13;4544:9;;;;;;;;;;;;;;4468:92;:::o;637:632:18:-;693:13;742:14;779:1;759:17;770:5;759:10;:17::i;:::-;:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;794:41;;849:11;944:6;940:2;936:15;928:6;924:28;917:35;;979:247;986:4;979:247;;;1010:5;;;;;;;;1114:10;1109:2;1102:5;1098:14;1093:32;1088:3;1080:46;1170:2;1161:11;;;;;;:::i;:::-;;;;;1203:1;1194:5;:10;979:247;1190:21;979:247;1246:6;1239:13;;;;;637:632;;;:::o;6227:1109:24:-;6300:47;;:::i;:::-;6411:77;6432:15;6440:6;6432:7;:15::i;:::-;6458:10;6479:6;6411:13;:77::i;:::-;6406:123;;6497:32;;;;;;;;;;;;;;6406:123;6596:14;:22;6611:6;6596:22;;;;;;;;;;;6573:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6678:20;:36;;;6674:91;;;6737:17;;;;;;;;;;;;;;6674:91;6847:20;:29;;;6829:47;;:15;:47;6825:172;;;6927:15;6954:20;:29;;;6899:87;;;;;;;;;;;;:::i;:::-;;;;;;;;6825:172;7040:13;7046:6;7040:5;:13::i;:::-;7150:4;7109:14;:22;7124:6;7109:22;;;;;;;;;;;:38;;;:45;;;;;;;;;;;;;;;;;;7263:6;;;;;;;;;;:14;;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7254:31;;;7294:4;7301:20;:27;;;7254:75;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6227:1109;;;:::o;1271:160:10:-;1353:71;1373:5;1395;:14;;;1412:2;1416:5;1380:43;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1353:19;:71::i;:::-;1271:160;;;:::o;7084:172:1:-;7150:7;7169:23;7195:19;:17;:19::i;:::-;7169:45;;7231:1;:9;;:18;7241:7;7231:18;;;;;;;;;;;;;;;;;;;;;7224:25;;;7084:172;;;:::o;16378:719::-;16482:23;16508:19;:17;:19::i;:::-;16482:45;;16593:9;:31;;;;16622:1;16606:18;;:4;:18;;;;16593:31;16589:460;;;16640:13;16656:22;16670:7;16656:13;:22::i;:::-;16640:38;;16822:1;16806:18;;:4;:18;;;;:35;;;;;16837:4;16828:13;;:5;:13;;;;16806:35;:69;;;;;16846:29;16863:5;16870:4;16846:16;:29::i;:::-;16845:30;16806:69;16802:142;;;16924:4;16902:27;;;;;;;;;;;:::i;:::-;;;;;;;;16802:142;16962:9;16958:81;;;17016:7;17012:2;16996:28;;17005:5;16996:28;;;;;;;;;;;;16958:81;16626:423;16589:460;17088:2;17059:1;:17;;:26;17077:7;17059:26;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;16472:625;16378:719;;;;:::o;8571:368::-;8683:38;8697:5;8704:7;8713;8683:13;:38::i;:::-;8678:255;;8758:1;8741:19;;:5;:19;;;8737:186;;8810:7;8787:31;;;;;;;;;;;:::i;:::-;;;;;;;;8737:186;8891:7;8900;8864:44;;;;;;;;;;;;:::i;:::-;;;;;;;;8678:255;8571:368;;;:::o;2395:183:3:-;2455:32;2532:30;2522:40;;2395:183;:::o;12240:100:1:-;12307:26;12317:2;12321:7;12307:26;;;;;;;;;;;;:9;:26::i;:::-;12240:100;;:::o;7738:720:10:-;7818:18;7846:19;7984:4;7981:1;7974:4;7968:11;7961:4;7955;7951:15;7948:1;7941:5;7934;7929:60;8041:7;8031:176;;8085:4;8079:11;8130:16;8127:1;8122:3;8107:40;8176:16;8171:3;8164:29;8031:176;8234:16;8220:30;;8284:1;8278:8;8263:23;;7900:396;8324:1;8310:10;:15;:68;;8377:1;8362:11;:16;;8310:68;;;8358:1;8336:5;8328:26;;;:31;8310:68;8306:146;;;8434:5;8401:40;;;;;;;;;;;:::i;:::-;;;;;;;;8306:146;7808:650;;7738:720;;:::o;7084:141:0:-;7151:17;:15;:17::i;:::-;7146:73;;7191:17;;;;;;;;;;;;;;7146:73;7084:141::o;2684:111:3:-;6931:20:0;:18;:20::i;:::-;2754:34:3::1;:32;:34::i;:::-;2684:111::o:0;748:59:2:-;6931:20:0;:18;:20::i;:::-;748:59:2:o;2387:219:1:-;6931:20:0;:18;:20::i;:::-;2500:23:1::1;2526:19;:17;:19::i;:::-;2500:45;;2565:5;2555:1;:7;;:15;;;;;;:::i;:::-;;2592:7;2580:1;:9;;:19;;;;;;:::i;:::-;;2490:116;2387:219:::0;;:::o;25316:916:20:-;25369:7;25388:14;25405:1;25388:18;;25453:8;25444:5;:17;25440:103;;25490:8;25481:17;;;;;;:::i;:::-;;;;;25526:2;25516:12;;;;25440:103;25569:8;25560:5;:17;25556:103;;25606:8;25597:17;;;;;;:::i;:::-;;;;;25642:2;25632:12;;;;25556:103;25685:8;25676:5;:17;25672:103;;25722:8;25713:17;;;;;;:::i;:::-;;;;;25758:2;25748:12;;;;25672:103;25801:7;25792:5;:16;25788:100;;25837:7;25828:16;;;;;;:::i;:::-;;;;;25872:1;25862:11;;;;25788:100;25914:7;25905:5;:16;25901:100;;25950:7;25941:16;;;;;;:::i;:::-;;;;;25985:1;25975:11;;;;25901:100;26027:7;26018:5;:16;26014:100;;26063:7;26054:16;;;;;;:::i;:::-;;;;;26098:1;26088:11;;;;26014:100;26140:7;26131:5;:16;26127:66;;26177:1;26167:11;;;;26127:66;26219:6;26212:13;;;25316:916;;;:::o;7867:272:1:-;7970:4;8024:1;8005:21;;:7;:21;;;;:127;;;;;8052:7;8043:16;;:5;:16;;;:52;;;;8063:32;8080:5;8087:7;8063:16;:32::i;:::-;8043:52;:88;;;;8124:7;8099:32;;:21;8112:7;8099:12;:21::i;:::-;:32;;;8043:88;8005:127;7986:146;;7867:272;;;;;:::o;13094:227::-;13145:21;13169:40;13185:1;13189:7;13206:1;13169:7;:40::i;:::-;13145:64;;13248:1;13223:27;;:13;:27;;;13219:96;;13296:7;13273:31;;;;;;;;;;;:::i;:::-;;;;;;;;13219:96;13135:186;13094:227;:::o;12561:207::-;12655:18;12661:2;12665:7;12655:5;:18::i;:::-;12683:78;12717:12;:10;:12::i;:::-;12739:1;12743:2;12747:7;12756:4;12683:33;:78::i;:::-;12561:207;;;:::o;8487:120:0:-;8537:4;8560:26;:24;:26::i;:::-;:40;;;;;;;;;;;;8553:47;;8487:120;:::o;2801:183:3:-;6931:20:0;:18;:20::i;:::-;2881:32:3::1;2916:28;:26;:28::i;:::-;2881:63;;1949:1;2954;:9;;:23;;;;2871:113;2801:183::o:0;11562:327:1:-;11643:1;11629:16;;:2;:16;;;11625:87;;11698:1;11668:33;;;;;;;;;;;:::i;:::-;;;;;;;;11625:87;11721:21;11745:32;11753:2;11757:7;11774:1;11745:7;:32::i;:::-;11721:56;;11816:1;11791:27;;:13;:27;;;11787:96;;11869:1;11841:31;;;;;;;;;;;:::i;:::-;;;;;;;;11787:96;11615:274;11562:327;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:169:27:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:182::-;322:34;318:1;310:6;306:14;299:58;182:182;:::o;370:366::-;512:3;533:67;597:2;592:3;533:67;:::i;:::-;526:74;;609:93;698:3;609:93;:::i;:::-;727:2;722:3;718:12;711:19;;370:366;;;:::o;742:419::-;908:4;946:2;935:9;931:18;923:26;;995:9;989:4;985:20;981:1;970:9;966:17;959:47;1023:131;1149:4;1023:131;:::i;:::-;1015:139;;742:419;;;:::o;1167:75::-;1200:6;1233:2;1227:9;1217:19;;1167:75;:::o;1248:117::-;1357:1;1354;1347:12;1371:117;1480:1;1477;1470:12;1494:149;1530:7;1570:66;1563:5;1559:78;1548:89;;1494:149;;;:::o;1649:120::-;1721:23;1738:5;1721:23;:::i;:::-;1714:5;1711:34;1701:62;;1759:1;1756;1749:12;1701:62;1649:120;:::o;1775:137::-;1820:5;1858:6;1845:20;1836:29;;1874:32;1900:5;1874:32;:::i;:::-;1775:137;;;;:::o;1918:327::-;1976:6;2025:2;2013:9;2004:7;2000:23;1996:32;1993:119;;;2031:79;;:::i;:::-;1993:119;2151:1;2176:52;2220:7;2211:6;2200:9;2196:22;2176:52;:::i;:::-;2166:62;;2122:116;1918:327;;;;:::o;2251:90::-;2285:7;2328:5;2321:13;2314:21;2303:32;;2251:90;;;:::o;2347:109::-;2428:21;2443:5;2428:21;:::i;:::-;2423:3;2416:34;2347:109;;:::o;2462:210::-;2549:4;2587:2;2576:9;2572:18;2564:26;;2600:65;2662:1;2651:9;2647:17;2638:6;2600:65;:::i;:::-;2462:210;;;;:::o;2678:99::-;2730:6;2764:5;2758:12;2748:22;;2678:99;;;:::o;2783:246::-;2864:1;2874:113;2888:6;2885:1;2882:13;2874:113;;;2973:1;2968:3;2964:11;2958:18;2954:1;2949:3;2945:11;2938:39;2910:2;2907:1;2903:10;2898:15;;2874:113;;;3021:1;3012:6;3007:3;3003:16;2996:27;2845:184;2783:246;;;:::o;3035:102::-;3076:6;3127:2;3123:7;3118:2;3111:5;3107:14;3103:28;3093:38;;3035:102;;;:::o;3143:377::-;3231:3;3259:39;3292:5;3259:39;:::i;:::-;3314:71;3378:6;3373:3;3314:71;:::i;:::-;3307:78;;3394:65;3452:6;3447:3;3440:4;3433:5;3429:16;3394:65;:::i;:::-;3484:29;3506:6;3484:29;:::i;:::-;3479:3;3475:39;3468:46;;3235:285;3143:377;;;;:::o;3526:313::-;3639:4;3677:2;3666:9;3662:18;3654:26;;3726:9;3720:4;3716:20;3712:1;3701:9;3697:17;3690:47;3754:78;3827:4;3818:6;3754:78;:::i;:::-;3746:86;;3526:313;;;;:::o;3845:77::-;3882:7;3911:5;3900:16;;3845:77;;;:::o;3928:122::-;4001:24;4019:5;4001:24;:::i;:::-;3994:5;3991:35;3981:63;;4040:1;4037;4030:12;3981:63;3928:122;:::o;4056:139::-;4102:5;4140:6;4127:20;4118:29;;4156:33;4183:5;4156:33;:::i;:::-;4056:139;;;;:::o;4201:329::-;4260:6;4309:2;4297:9;4288:7;4284:23;4280:32;4277:119;;;4315:79;;:::i;:::-;4277:119;4435:1;4460:53;4505:7;4496:6;4485:9;4481:22;4460:53;:::i;:::-;4450:63;;4406:117;4201:329;;;;:::o;4536:126::-;4573:7;4613:42;4606:5;4602:54;4591:65;;4536:126;;;:::o;4668:96::-;4705:7;4734:24;4752:5;4734:24;:::i;:::-;4723:35;;4668:96;;;:::o;4770:118::-;4857:24;4875:5;4857:24;:::i;:::-;4852:3;4845:37;4770:118;;:::o;4894:222::-;4987:4;5025:2;5014:9;5010:18;5002:26;;5038:71;5106:1;5095:9;5091:17;5082:6;5038:71;:::i;:::-;4894:222;;;;:::o;5122:122::-;5195:24;5213:5;5195:24;:::i;:::-;5188:5;5185:35;5175:63;;5234:1;5231;5224:12;5175:63;5122:122;:::o;5250:139::-;5296:5;5334:6;5321:20;5312:29;;5350:33;5377:5;5350:33;:::i;:::-;5250:139;;;;:::o;5395:474::-;5463:6;5471;5520:2;5508:9;5499:7;5495:23;5491:32;5488:119;;;5526:79;;:::i;:::-;5488:119;5646:1;5671:53;5716:7;5707:6;5696:9;5692:22;5671:53;:::i;:::-;5661:63;;5617:117;5773:2;5799:53;5844:7;5835:6;5824:9;5820:22;5799:53;:::i;:::-;5789:63;;5744:118;5395:474;;;;;:::o;5875:118::-;5912:7;5952:34;5945:5;5941:46;5930:57;;5875:118;;;:::o;5999:::-;6086:24;6104:5;6086:24;:::i;:::-;6081:3;6074:37;5999:118;;:::o;6123:332::-;6244:4;6282:2;6271:9;6267:18;6259:26;;6295:71;6363:1;6352:9;6348:17;6339:6;6295:71;:::i;:::-;6376:72;6444:2;6433:9;6429:18;6420:6;6376:72;:::i;:::-;6123:332;;;;;:::o;6461:101::-;6497:7;6537:18;6530:5;6526:30;6515:41;;6461:101;;;:::o;6568:115::-;6653:23;6670:5;6653:23;:::i;:::-;6648:3;6641:36;6568:115;;:::o;6689:116::-;6726:7;6766:32;6759:5;6755:44;6744:55;;6689:116;;;:::o;6811:118::-;6898:24;6916:5;6898:24;:::i;:::-;6893:3;6886:37;6811:118;;:::o;6935:426::-;7076:4;7114:2;7103:9;7099:18;7091:26;;7127:65;7189:1;7178:9;7174:17;7165:6;7127:65;:::i;:::-;7202:70;7268:2;7257:9;7253:18;7244:6;7202:70;:::i;:::-;7282:72;7350:2;7339:9;7335:18;7326:6;7282:72;:::i;:::-;6935:426;;;;;;:::o;7367:619::-;7444:6;7452;7460;7509:2;7497:9;7488:7;7484:23;7480:32;7477:119;;;7515:79;;:::i;:::-;7477:119;7635:1;7660:53;7705:7;7696:6;7685:9;7681:22;7660:53;:::i;:::-;7650:63;;7606:117;7762:2;7788:53;7833:7;7824:6;7813:9;7809:22;7788:53;:::i;:::-;7778:63;;7733:118;7890:2;7916:53;7961:7;7952:6;7941:9;7937:22;7916:53;:::i;:::-;7906:63;;7861:118;7367:619;;;;;:::o;7992:122::-;8065:24;8083:5;8065:24;:::i;:::-;8058:5;8055:35;8045:63;;8104:1;8101;8094:12;8045:63;7992:122;:::o;8120:139::-;8166:5;8204:6;8191:20;8182:29;;8220:33;8247:5;8220:33;:::i;:::-;8120:139;;;;:::o;8265:474::-;8333:6;8341;8390:2;8378:9;8369:7;8365:23;8361:32;8358:119;;;8396:79;;:::i;:::-;8358:119;8516:1;8541:53;8586:7;8577:6;8566:9;8562:22;8541:53;:::i;:::-;8531:63;;8487:117;8643:2;8669:53;8714:7;8705:6;8694:9;8690:22;8669:53;:::i;:::-;8659:63;;8614:118;8265:474;;;;;:::o;8745:118::-;8832:24;8850:5;8832:24;:::i;:::-;8827:3;8820:37;8745:118;;:::o;8869:222::-;8962:4;9000:2;8989:9;8985:18;8977:26;;9013:71;9081:1;9070:9;9066:17;9057:6;9013:71;:::i;:::-;8869:222;;;;:::o;9097:218::-;9188:4;9226:2;9215:9;9211:18;9203:26;;9239:69;9305:1;9294:9;9290:17;9281:6;9239:69;:::i;:::-;9097:218;;;;:::o;9321:329::-;9380:6;9429:2;9417:9;9408:7;9404:23;9400:32;9397:119;;;9435:79;;:::i;:::-;9397:119;9555:1;9580:53;9625:7;9616:6;9605:9;9601:22;9580:53;:::i;:::-;9570:63;;9526:117;9321:329;;;;:::o;9656:77::-;9693:7;9722:5;9711:16;;9656:77;;;:::o;9739:118::-;9826:24;9844:5;9826:24;:::i;:::-;9821:3;9814:37;9739:118;;:::o;9863:222::-;9956:4;9994:2;9983:9;9979:18;9971:26;;10007:71;10075:1;10064:9;10060:17;10051:6;10007:71;:::i;:::-;9863:222;;;;:::o;10091:60::-;10119:3;10140:5;10133:12;;10091:60;;;:::o;10157:142::-;10207:9;10240:53;10258:34;10267:24;10285:5;10267:24;:::i;:::-;10258:34;:::i;:::-;10240:53;:::i;:::-;10227:66;;10157:142;;;:::o;10305:126::-;10355:9;10388:37;10419:5;10388:37;:::i;:::-;10375:50;;10305:126;;;:::o;10437:142::-;10503:9;10536:37;10567:5;10536:37;:::i;:::-;10523:50;;10437:142;;;:::o;10585:163::-;10688:53;10735:5;10688:53;:::i;:::-;10683:3;10676:66;10585:163;;:::o;10754:254::-;10863:4;10901:2;10890:9;10886:18;10878:26;;10914:87;10998:1;10987:9;10983:17;10974:6;10914:87;:::i;:::-;10754:254;;;;:::o;11014:141::-;11079:9;11112:37;11143:5;11112:37;:::i;:::-;11099:50;;11014:141;;;:::o;11161:161::-;11263:52;11309:5;11263:52;:::i;:::-;11258:3;11251:65;11161:161;;:::o;11328:252::-;11436:4;11474:2;11463:9;11459:18;11451:26;;11487:86;11570:1;11559:9;11555:17;11546:6;11487:86;:::i;:::-;11328:252;;;;:::o;11586:116::-;11656:21;11671:5;11656:21;:::i;:::-;11649:5;11646:32;11636:60;;11692:1;11689;11682:12;11636:60;11586:116;:::o;11708:133::-;11751:5;11789:6;11776:20;11767:29;;11805:30;11829:5;11805:30;:::i;:::-;11708:133;;;;:::o;11847:468::-;11912:6;11920;11969:2;11957:9;11948:7;11944:23;11940:32;11937:119;;;11975:79;;:::i;:::-;11937:119;12095:1;12120:53;12165:7;12156:6;12145:9;12141:22;12120:53;:::i;:::-;12110:63;;12066:117;12222:2;12248:50;12290:7;12281:6;12270:9;12266:22;12248:50;:::i;:::-;12238:60;;12193:115;11847:468;;;;;:::o;12321:117::-;12430:1;12427;12420:12;12444:117;12553:1;12550;12543:12;12567:180;12615:77;12612:1;12605:88;12712:4;12709:1;12702:15;12736:4;12733:1;12726:15;12753:281;12836:27;12858:4;12836:27;:::i;:::-;12828:6;12824:40;12966:6;12954:10;12951:22;12930:18;12918:10;12915:34;12912:62;12909:88;;;12977:18;;:::i;:::-;12909:88;13017:10;13013:2;13006:22;12796:238;12753:281;;:::o;13040:129::-;13074:6;13101:20;;:::i;:::-;13091:30;;13130:33;13158:4;13150:6;13130:33;:::i;:::-;13040:129;;;:::o;13175:307::-;13236:4;13326:18;13318:6;13315:30;13312:56;;;13348:18;;:::i;:::-;13312:56;13386:29;13408:6;13386:29;:::i;:::-;13378:37;;13470:4;13464;13460:15;13452:23;;13175:307;;;:::o;13488:146::-;13585:6;13580:3;13575;13562:30;13626:1;13617:6;13612:3;13608:16;13601:27;13488:146;;;:::o;13640:423::-;13717:5;13742:65;13758:48;13799:6;13758:48;:::i;:::-;13742:65;:::i;:::-;13733:74;;13830:6;13823:5;13816:21;13868:4;13861:5;13857:16;13906:3;13897:6;13892:3;13888:16;13885:25;13882:112;;;13913:79;;:::i;:::-;13882:112;14003:54;14050:6;14045:3;14040;14003:54;:::i;:::-;13723:340;13640:423;;;;;:::o;14082:338::-;14137:5;14186:3;14179:4;14171:6;14167:17;14163:27;14153:122;;14194:79;;:::i;:::-;14153:122;14311:6;14298:20;14336:78;14410:3;14402:6;14395:4;14387:6;14383:17;14336:78;:::i;:::-;14327:87;;14143:277;14082:338;;;;:::o;14426:943::-;14521:6;14529;14537;14545;14594:3;14582:9;14573:7;14569:23;14565:33;14562:120;;;14601:79;;:::i;:::-;14562:120;14721:1;14746:53;14791:7;14782:6;14771:9;14767:22;14746:53;:::i;:::-;14736:63;;14692:117;14848:2;14874:53;14919:7;14910:6;14899:9;14895:22;14874:53;:::i;:::-;14864:63;;14819:118;14976:2;15002:53;15047:7;15038:6;15027:9;15023:22;15002:53;:::i;:::-;14992:63;;14947:118;15132:2;15121:9;15117:18;15104:32;15163:18;15155:6;15152:30;15149:117;;;15185:79;;:::i;:::-;15149:117;15290:62;15344:7;15335:6;15324:9;15320:22;15290:62;:::i;:::-;15280:72;;15075:287;14426:943;;;;;;;:::o;15375:474::-;15443:6;15451;15500:2;15488:9;15479:7;15475:23;15471:32;15468:119;;;15506:79;;:::i;:::-;15468:119;15626:1;15651:53;15696:7;15687:6;15676:9;15672:22;15651:53;:::i;:::-;15641:63;;15597:117;15753:2;15779:53;15824:7;15815:6;15804:9;15800:22;15779:53;:::i;:::-;15769:63;;15724:118;15375:474;;;;;:::o;15855:::-;15923:6;15931;15980:2;15968:9;15959:7;15955:23;15951:32;15948:119;;;15986:79;;:::i;:::-;15948:119;16106:1;16131:53;16176:7;16167:6;16156:9;16152:22;16131:53;:::i;:::-;16121:63;;16077:117;16233:2;16259:53;16304:7;16295:6;16284:9;16280:22;16259:53;:::i;:::-;16249:63;;16204:118;15855:474;;;;;:::o;16335:99::-;16406:21;16421:5;16406:21;:::i;:::-;16401:3;16394:34;16335:99;;:::o;16440:105::-;16515:23;16532:5;16515:23;:::i;:::-;16510:3;16503:36;16440:105;;:::o;16551:108::-;16628:24;16646:5;16628:24;:::i;:::-;16623:3;16616:37;16551:108;;:::o;16761:714::-;16932:4;16927:3;16923:14;17030:4;17023:5;17019:16;17013:23;17049:57;17100:4;17095:3;17091:14;17077:12;17049:57;:::i;:::-;16947:169;17202:4;17195:5;17191:16;17185:23;17221:61;17276:4;17271:3;17267:14;17253:12;17221:61;:::i;:::-;17126:166;17376:4;17369:5;17365:16;17359:23;17395:63;17452:4;17447:3;17443:14;17429:12;17395:63;:::i;:::-;17302:166;16901:574;16761:714;;:::o;17481:370::-;17648:4;17686:2;17675:9;17671:18;17663:26;;17699:145;17841:1;17830:9;17826:17;17817:6;17699:145;:::i;:::-;17481:370;;;;:::o;17857:180::-;17905:77;17902:1;17895:88;18002:4;17999:1;17992:15;18026:4;18023:1;18016:15;18043:320;18087:6;18124:1;18118:4;18114:12;18104:22;;18171:1;18165:4;18161:12;18192:18;18182:81;;18248:4;18240:6;18236:17;18226:27;;18182:81;18310:2;18302:6;18299:14;18279:18;18276:38;18273:84;;18329:18;;:::i;:::-;18273:84;18094:269;18043:320;;;:::o;18369:442::-;18518:4;18556:2;18545:9;18541:18;18533:26;;18569:71;18637:1;18626:9;18622:17;18613:6;18569:71;:::i;:::-;18650:72;18718:2;18707:9;18703:18;18694:6;18650:72;:::i;:::-;18732;18800:2;18789:9;18785:18;18776:6;18732:72;:::i;:::-;18369:442;;;;;;:::o;18817:179::-;18957:31;18953:1;18945:6;18941:14;18934:55;18817:179;:::o;19002:366::-;19144:3;19165:67;19229:2;19224:3;19165:67;:::i;:::-;19158:74;;19241:93;19330:3;19241:93;:::i;:::-;19359:2;19354:3;19350:12;19343:19;;19002:366;;;:::o;19374:419::-;19540:4;19578:2;19567:9;19563:18;19555:26;;19627:9;19621:4;19617:20;19613:1;19602:9;19598:17;19591:47;19655:131;19781:4;19655:131;:::i;:::-;19647:139;;19374:419;;;:::o;19799:181::-;19939:33;19935:1;19927:6;19923:14;19916:57;19799:181;:::o;19986:366::-;20128:3;20149:67;20213:2;20208:3;20149:67;:::i;:::-;20142:74;;20225:93;20314:3;20225:93;:::i;:::-;20343:2;20338:3;20334:12;20327:19;;19986:366;;;:::o;20358:419::-;20524:4;20562:2;20551:9;20547:18;20539:26;;20611:9;20605:4;20601:20;20597:1;20586:9;20582:17;20575:47;20639:131;20765:4;20639:131;:::i;:::-;20631:139;;20358:419;;;:::o;20783:143::-;20840:5;20871:6;20865:13;20856:22;;20887:33;20914:5;20887:33;:::i;:::-;20783:143;;;;:::o;20932:351::-;21002:6;21051:2;21039:9;21030:7;21026:23;21022:32;21019:119;;;21057:79;;:::i;:::-;21019:119;21177:1;21202:64;21258:7;21249:6;21238:9;21234:22;21202:64;:::i;:::-;21192:74;;21148:128;20932:351;;;;:::o;21289:85::-;21334:7;21363:5;21352:16;;21289:85;;;:::o;21380:156::-;21437:9;21470:60;21487:42;21496:32;21522:5;21496:32;:::i;:::-;21487:42;:::i;:::-;21470:60;:::i;:::-;21457:73;;21380:156;;;:::o;21542:145::-;21636:44;21674:5;21636:44;:::i;:::-;21631:3;21624:57;21542:145;;:::o;21693:236::-;21793:4;21831:2;21820:9;21816:18;21808:26;;21844:78;21919:1;21908:9;21904:17;21895:6;21844:78;:::i;:::-;21693:236;;;;:::o;21935:148::-;22037:11;22074:3;22059:18;;21935:148;;;;:::o;22089:390::-;22195:3;22223:39;22256:5;22223:39;:::i;:::-;22278:89;22360:6;22355:3;22278:89;:::i;:::-;22271:96;;22376:65;22434:6;22429:3;22422:4;22415:5;22411:16;22376:65;:::i;:::-;22466:6;22461:3;22457:16;22450:23;;22199:280;22089:390;;;;:::o;22485:435::-;22665:3;22687:95;22778:3;22769:6;22687:95;:::i;:::-;22680:102;;22799:95;22890:3;22881:6;22799:95;:::i;:::-;22792:102;;22911:3;22904:10;;22485:435;;;;;:::o;22926:222::-;23019:4;23057:2;23046:9;23042:18;23034:26;;23070:71;23138:1;23127:9;23123:17;23114:6;23070:71;:::i;:::-;22926:222;;;;:::o;23154:120::-;23226:23;23243:5;23226:23;:::i;:::-;23219:5;23216:34;23206:62;;23264:1;23261;23254:12;23206:62;23154:120;:::o;23280:141::-;23336:5;23367:6;23361:13;23352:22;;23383:32;23409:5;23383:32;:::i;:::-;23280:141;;;;:::o;23427:349::-;23496:6;23545:2;23533:9;23524:7;23520:23;23516:32;23513:119;;;23551:79;;:::i;:::-;23513:119;23671:1;23696:63;23751:7;23742:6;23731:9;23727:22;23696:63;:::i;:::-;23686:73;;23642:127;23427:349;;;;:::o;23782:180::-;23830:77;23827:1;23820:88;23927:4;23924:1;23917:15;23951:4;23948:1;23941:15;23968:205;24007:3;24026:19;24043:1;24026:19;:::i;:::-;24021:24;;24059:19;24076:1;24059:19;:::i;:::-;24054:24;;24101:1;24098;24094:9;24087:16;;24124:18;24119:3;24116:27;24113:53;;;24146:18;;:::i;:::-;24113:53;23968:205;;;;:::o;24179:142::-;24229:9;24262:53;24280:34;24289:24;24307:5;24289:24;:::i;:::-;24280:34;:::i;:::-;24262:53;:::i;:::-;24249:66;;24179:142;;;:::o;24327:131::-;24414:37;24445:5;24414:37;:::i;:::-;24409:3;24402:50;24327:131;;:::o;24464:140::-;24513:9;24546:52;24564:33;24573:23;24590:5;24573:23;:::i;:::-;24564:33;:::i;:::-;24546:52;:::i;:::-;24533:65;;24464:140;;;:::o;24610:129::-;24696:36;24726:5;24696:36;:::i;:::-;24691:3;24684:49;24610:129;;:::o;24745:330::-;24865:4;24903:2;24892:9;24888:18;24880:26;;24916:71;24984:1;24973:9;24969:17;24960:6;24916:71;:::i;:::-;24997;25064:2;25053:9;25049:18;25040:6;24997:71;:::i;:::-;24745:330;;;;;:::o;25081:183::-;25119:3;25142:23;25159:5;25142:23;:::i;:::-;25133:32;;25187:18;25180:5;25177:29;25174:55;;25209:18;;:::i;:::-;25174:55;25256:1;25249:5;25245:13;25238:20;;25081:183;;;:::o;25270:442::-;25419:4;25457:2;25446:9;25442:18;25434:26;;25470:71;25538:1;25527:9;25523:17;25514:6;25470:71;:::i;:::-;25551:72;25619:2;25608:9;25604:18;25595:6;25551:72;:::i;:::-;25633;25701:2;25690:9;25686:18;25677:6;25633:72;:::i;:::-;25270:442;;;;;;:::o;25718:98::-;25769:6;25803:5;25797:12;25787:22;;25718:98;;;:::o;25822:168::-;25905:11;25939:6;25934:3;25927:19;25979:4;25974:3;25970:14;25955:29;;25822:168;;;;:::o;25996:373::-;26082:3;26110:38;26142:5;26110:38;:::i;:::-;26164:70;26227:6;26222:3;26164:70;:::i;:::-;26157:77;;26243:65;26301:6;26296:3;26289:4;26282:5;26278:16;26243:65;:::i;:::-;26333:29;26355:6;26333:29;:::i;:::-;26328:3;26324:39;26317:46;;26086:283;25996:373;;;;:::o;26375:640::-;26570:4;26608:3;26597:9;26593:19;26585:27;;26622:71;26690:1;26679:9;26675:17;26666:6;26622:71;:::i;:::-;26703:72;26771:2;26760:9;26756:18;26747:6;26703:72;:::i;:::-;26785;26853:2;26842:9;26838:18;26829:6;26785:72;:::i;:::-;26904:9;26898:4;26894:20;26889:2;26878:9;26874:18;26867:48;26932:76;27003:4;26994:6;26932:76;:::i;:::-;26924:84;;26375:640;;;;;;;:::o;27021:141::-;27077:5;27108:6;27102:13;27093:22;;27124:32;27150:5;27124:32;:::i;:::-;27021:141;;;;:::o;27168:349::-;27237:6;27286:2;27274:9;27265:7;27261:23;27257:32;27254:119;;;27292:79;;:::i;:::-;27254:119;27412:1;27437:63;27492:7;27483:6;27472:9;27468:22;27437:63;:::i;:::-;27427:73;;27383:127;27168:349;;;;:::o;27523:180::-;27571:77;27568:1;27561:88;27668:4;27665:1;27658:15;27692:4;27689:1;27682:15;27709:328;27828:4;27866:2;27855:9;27851:18;27843:26;;27879:71;27947:1;27936:9;27932:17;27923:6;27879:71;:::i;:::-;27960:70;28026:2;28015:9;28011:18;28002:6;27960:70;:::i;:::-;27709:328;;;;;:::o;28043:332::-;28164:4;28202:2;28191:9;28187:18;28179:26;;28215:71;28283:1;28272:9;28268:17;28259:6;28215:71;:::i;:::-;28296:72;28364:2;28353:9;28349:18;28340:6;28296:72;:::i;:::-;28043:332;;;;;:::o;28381:::-;28502:4;28540:2;28529:9;28525:18;28517:26;;28553:71;28621:1;28610:9;28606:17;28597:6;28553:71;:::i;:::-;28634:72;28702:2;28691:9;28687:18;28678:6;28634:72;:::i;:::-;28381:332;;;;;:::o;28719:141::-;28768:4;28791:3;28783:11;;28814:3;28811:1;28804:14;28848:4;28845:1;28835:18;28827:26;;28719:141;;;:::o;28866:93::-;28903:6;28950:2;28945;28938:5;28934:14;28930:23;28920:33;;28866:93;;;:::o;28965:107::-;29009:8;29059:5;29053:4;29049:16;29028:37;;28965:107;;;;:::o;29078:393::-;29147:6;29197:1;29185:10;29181:18;29220:97;29250:66;29239:9;29220:97;:::i;:::-;29338:39;29368:8;29357:9;29338:39;:::i;:::-;29326:51;;29410:4;29406:9;29399:5;29395:21;29386:30;;29459:4;29449:8;29445:19;29438:5;29435:30;29425:40;;29154:317;;29078:393;;;;;:::o;29477:142::-;29527:9;29560:53;29578:34;29587:24;29605:5;29587:24;:::i;:::-;29578:34;:::i;:::-;29560:53;:::i;:::-;29547:66;;29477:142;;;:::o;29625:75::-;29668:3;29689:5;29682:12;;29625:75;;;:::o;29706:269::-;29816:39;29847:7;29816:39;:::i;:::-;29877:91;29926:41;29950:16;29926:41;:::i;:::-;29918:6;29911:4;29905:11;29877:91;:::i;:::-;29871:4;29864:105;29782:193;29706:269;;;:::o;29981:73::-;30026:3;29981:73;:::o;30060:189::-;30137:32;;:::i;:::-;30178:65;30236:6;30228;30222:4;30178:65;:::i;:::-;30113:136;30060:189;;:::o;30255:186::-;30315:120;30332:3;30325:5;30322:14;30315:120;;;30386:39;30423:1;30416:5;30386:39;:::i;:::-;30359:1;30352:5;30348:13;30339:22;;30315:120;;;30255:186;;:::o;30447:543::-;30548:2;30543:3;30540:11;30537:446;;;30582:38;30614:5;30582:38;:::i;:::-;30666:29;30684:10;30666:29;:::i;:::-;30656:8;30652:44;30849:2;30837:10;30834:18;30831:49;;;30870:8;30855:23;;30831:49;30893:80;30949:22;30967:3;30949:22;:::i;:::-;30939:8;30935:37;30922:11;30893:80;:::i;:::-;30552:431;;30537:446;30447:543;;;:::o;30996:117::-;31050:8;31100:5;31094:4;31090:16;31069:37;;30996:117;;;;:::o;31119:169::-;31163:6;31196:51;31244:1;31240:6;31232:5;31229:1;31225:13;31196:51;:::i;:::-;31192:56;31277:4;31271;31267:15;31257:25;;31170:118;31119:169;;;;:::o;31293:295::-;31369:4;31515:29;31540:3;31534:4;31515:29;:::i;:::-;31507:37;;31577:3;31574:1;31570:11;31564:4;31561:21;31553:29;;31293:295;;;;:::o;31593:1395::-;31710:37;31743:3;31710:37;:::i;:::-;31812:18;31804:6;31801:30;31798:56;;;31834:18;;:::i;:::-;31798:56;31878:38;31910:4;31904:11;31878:38;:::i;:::-;31963:67;32023:6;32015;32009:4;31963:67;:::i;:::-;32057:1;32081:4;32068:17;;32113:2;32105:6;32102:14;32130:1;32125:618;;;;32787:1;32804:6;32801:77;;;32853:9;32848:3;32844:19;32838:26;32829:35;;32801:77;32904:67;32964:6;32957:5;32904:67;:::i;:::-;32898:4;32891:81;32760:222;32095:887;;32125:618;32177:4;32173:9;32165:6;32161:22;32211:37;32243:4;32211:37;:::i;:::-;32270:1;32284:208;32298:7;32295:1;32292:14;32284:208;;;32377:9;32372:3;32368:19;32362:26;32354:6;32347:42;32428:1;32420:6;32416:14;32406:24;;32475:2;32464:9;32460:18;32447:31;;32321:4;32318:1;32314:12;32309:17;;32284:208;;;32520:6;32511:7;32508:19;32505:179;;;32578:9;32573:3;32569:19;32563:26;32621:48;32663:4;32655:6;32651:17;32640:9;32621:48;:::i;:::-;32613:6;32606:64;32528:156;32505:179;32730:1;32726;32718:6;32714:14;32710:22;32704:4;32697:36;32132:611;;;32095:887;;31685:1303;;;31593:1395;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3264800","executionCost":"3627","totalCost":"3268427"},"external":{"ADMIN_ROLE()":"418","BACKEND_ROLE()":"375","DEFAULT_ADMIN_ROLE()":"380","FEE_PRECISION()":"446","INITIAL_DEPOSIT_AMOUNT()":"418","METIS()":"infinite","TIMELOCK_ROLE()":"417","approve(address,uint256)":"infinite","balanceOf(address)":"infinite","config()":"infinite","enterRedemptionQueue(address,uint120)":"infinite","getApproved(uint256)":"infinite","getMetisAddress()":"2568","getNftId()":"2524","getNftInformation(uint256)":"7848","initialize(address)":"infinite","isApprovedForAll(address,address)":"infinite","name()":"infinite","nftInformation(uint256)":"7519","ownerOf(uint256)":"infinite","redeemRedemptionTicketNft(uint256,address)":"infinite","redemptionQueueAccounting()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"820","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","veMetis()":"infinite"},"internal":{"_enterRedemptionQueueCore(address,uint120)":"infinite","_redeemRedemptionTicketNftPre(uint256)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","BACKEND_ROLE()":"92c2becc","DEFAULT_ADMIN_ROLE()":"a217fddf","FEE_PRECISION()":"e63a391f","INITIAL_DEPOSIT_AMOUNT()":"e52083c6","METIS()":"f0dadf2e","TIMELOCK_ROLE()":"f288a2e2","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","config()":"79502c55","enterRedemptionQueue(address,uint120)":"4f4798ae","getApproved(uint256)":"081812fc","getMetisAddress()":"2e6dd472","getNftId()":"644c45e0","getNftInformation(uint256)":"fe663b81","initialize(address)":"c4d66de8","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","nftInformation(uint256)":"16b79639","ownerOf(uint256)":"6352211e","redeemRedemptionTicketNft(uint256,address)":"cc928d52","redemptionQueueAccounting()":"103cf9e3","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","veMetis()":"9336ce80"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyRedeemed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyReducedMaturity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Erc721CallerNotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"collectAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"accruedAmount\",\"type\":\"uint128\"}],\"name\":\"ExceedsCollectedFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maturity\",\"type\":\"uint64\"}],\"name\":\"NotMatureYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountVeMetisRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTimestamp\",\"type\":\"uint256\"}],\"name\":\"EnterRedemptionQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint120\",\"name\":\"amountOut\",\"type\":\"uint120\"}],\"name\":\"RedeemRedemptionTicketNft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BACKEND_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METIS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint120\",\"name\":\"_amountToRedeem\",\"type\":\"uint120\"}],\"name\":\"enterRedemptionQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"getNftInformation\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasBeenRedeemed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"maturity\",\"type\":\"uint64\"},{\"internalType\":\"uint120\",\"name\":\"amount\",\"type\":\"uint120\"}],\"internalType\":\"struct RedemptionQueue.RedemptionQueueItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"nftInformation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBeenRedeemed\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"maturity\",\"type\":\"uint64\"},{\"internalType\":\"uint120\",\"name\":\"amount\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"redeemRedemptionTicketNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionQueueAccounting\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"etherLiabilities\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unclaimedFees\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veMetis\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"ExceedsCollectedFees(uint128,uint128)\":[{\"params\":{\"accruedAmount\":\"How much fees are actually collectable\",\"collectAmount\":\"How much fee the ounsender is trying to collect\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"NotMatureYet(uint256,uint64)\":[{\"params\":{\"currentTime\":\"Current time.\",\"maturity\":\"Time of maturity\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"EnterRedemptionQueue(uint256,address,address,uint256,uint256)\":{\"params\":{\"amountVeMetisRedeemed\":\"The amount of veMetis redeemed\",\"nftId\":\"The ID of the NFT\",\"recipient\":\"The recipient of the NFT\",\"sender\":\"The address of the msg.sender, who is redeeming veMetis\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RedeemRedemptionTicketNft(uint256,address,address,uint120)\":{\"params\":{\"amountOut\":\"the amount of ether sent to the recipient\",\"nftId\":\"the if of the nft redeemed\",\"recipient\":\"the recipient of the ether\",\"sender\":\"the msg.sender\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"enterRedemptionQueue(address,uint120)\":{\"details\":\"Must call approve/permit on veMetis contract prior to this call\",\"params\":{\"_amountToRedeem\":\"Amount of veMetis to redeem\",\"_nftId\":\"The ID of the veMetisRedemptionTicket NFT\",\"_recipient\":\"Recipient of the NFT. Must be ERC721 compatible if a contract\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"redeemRedemptionTicketNft(uint256,address)\":{\"params\":{\"_nftId\":\"The ID of the NFT\",\"_recipient\":\"The recipient of the redeemed Metis\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"RedemptionQueue\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyRedeemed()\":[{\"notice\":\"already redeemed\"}],\"AlreadyReducedMaturity()\":[{\"notice\":\"Already reduced maturity\"}],\"Erc721CallerNotOwnerOrApproved()\":[{\"notice\":\"ERC721: caller is not token owner or approved\"}],\"ExceedsCollectedFees(uint128,uint128)\":[{\"notice\":\"When timelock/operator tries collecting more fees than they are due\"}],\"NotMatureYet(uint256,uint64)\":[{\"notice\":\"NFT is not mature enough to redeem yet\"}]},\"events\":{\"EnterRedemptionQueue(uint256,address,address,uint256,uint256)\":{\"notice\":\"When someone enters the redemption queue\"},\"RedeemRedemptionTicketNft(uint256,address,address,uint120)\":{\"notice\":\"When someone redeems their NFT for Metis\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"The role for the admin\"},\"BACKEND_ROLE()\":{\"notice\":\"The role for the backend\"},\"DEFAULT_ADMIN_ROLE()\":{\"notice\":\"The default admin role\"},\"FEE_PRECISION()\":{\"notice\":\"The precision of the fee\"},\"INITIAL_DEPOSIT_AMOUNT()\":{\"notice\":\"sveMetis vault initial deposit amount\"},\"TIMELOCK_ROLE()\":{\"notice\":\"The role for the tmelock\"},\"config()\":{\"notice\":\"holds the address of the config contract\"},\"enterRedemptionQueue(address,uint120)\":{\"notice\":\"Enter the queue for redeeming veMetis 1-to-1. Must approve or permit first.Will generate a veMetisRedemptionTicket NFT that can be redeemed for the actual Metis later.\"},\"nftInformation(uint256)\":{\"notice\":\"Information about a user's redemption ticket NFT\"},\"redeemRedemptionTicketNft(uint256,address)\":{\"notice\":\"Redeems a veMetisRedemptionTicket NFT for Metis. Must have reached the maturity date first.\"},\"redemptionQueueAccounting()\":{\"notice\":\"Accounting redemption queue\"}},\"notice\":\"RedemptionQueue is the contract that manages the redemption queue for veMetis\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RedemptionQueue.sol\":\"RedemptionQueue\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0xfd473ea8f70e13eaa6475c7e348885b8a32925252e3bc237e07c0e3fde0f10f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interface/IConfig.sol\\\";\\n\\nabstract contract Base is ContextUpgradeable, ReentrancyGuardUpgradeable {\\n    /// @notice The precision of the fee\\n    uint64 public constant FEE_PRECISION = 1e6;\\n\\n    /// @notice The default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice The role for the tmelock\\n    bytes32 public constant TIMELOCK_ROLE = keccak256(\\\"TIMELOCK_ROLE\\\");\\n    \\n    /// @notice The role for the admin\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    /// @notice The role for the backend\\n    bytes32 public constant BACKEND_ROLE = keccak256(\\\"BACKEND_ROLE\\\");\\n\\n    /// @notice sveMetis vault initial deposit amount\\n    uint256 public constant INITIAL_DEPOSIT_AMOUNT = 1 ether;\\n\\n    /// @notice holds the address of the config contract\\n    IConfig public config;\\n\\n    address private internalCalling;\\n\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!config.hasRole(role, _msgSender())) {\\n          _checkRole(role);\\n        }  \\n        _;\\n    }\\n    \\n    modifier onlyBackend() {\\n        _checkRole(BACKEND_ROLE);\\n        _;\\n    }\\n\\n    modifier internalOnly(address internalAddress) {\\n        require(_msgSender() == internalAddress, \\\"internal only\\\");\\n        internalCalling = internalAddress;\\n        _;\\n        internalCalling = address(0);\\n    }\\n\\n    /// @notice Initializes the contract with the config contract address\\n    /// @param _config The address of the config contract\\n    function __Base_init(address _config) internal onlyInitializing {\\n        config = IConfig(_config);\\n        __ReentrancyGuard_init();\\n        __Context_init();\\n    }\\n\\n  /// @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!config.hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * reject Metis transfer\\n     */\\n    receive() external payable {\\n        revert(\\\"Base: not support Metis transfer\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[30] private __gap;\\n}\\n\",\"keccak256\":\"0x89f2371e422679be9eae4fdbc69c4d41d752167fa421f4cacca857e617751431\",\"license\":\"MIT\"},\"contracts/RedemptionQueue.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"./Base.sol\\\";\\nimport \\\"./interface/IVeMetis.sol\\\";\\n\\n/// @title RedemptionQueue\\n/// @notice RedemptionQueue is the contract that manages the redemption queue for veMetis\\ncontract RedemptionQueue is Initializable, ERC721Upgradeable, Base {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for *;\\n\\n    /// @notice The ```RedemptionQueueItem``` struct provides metadata information about each Nft\\n    /// @param hasBeenRedeemed boolean for whether the NFT has been redeemed\\n    /// @param amount How much Metis is claimable\\n    /// @param maturity Unix timestamp when they can claim their Metis\\n    struct RedemptionQueueItem {\\n        bool hasBeenRedeemed;\\n        uint64 maturity;\\n        uint120 amount;\\n    }\\n\\n    /// @param etherLiabilities How much Metis would need to be paid out if every NFT holder could claim immediately\\n    /// @param unclaimedFees Earned fees that the protocol has not collected yet\\n    struct RedemptionQueueAccounting {\\n        uint128 etherLiabilities;\\n        uint128 unclaimedFees;\\n    }\\n\\n    uint64 nextNftId;\\n\\n    /// @notice Accounting redemption queue\\n    RedemptionQueueAccounting public redemptionQueueAccounting;\\n\\n    /// @notice Information about a user's redemption ticket NFT\\n    mapping(uint256 nftId => RedemptionQueueItem) public nftInformation;\\n\\n    IERC20 public veMetis;\\n    IERC20 public METIS;\\n    \\n    /// @notice When someone redeems their NFT for Metis\\n    /// @param nftId the if of the nft redeemed\\n    /// @param sender the msg.sender\\n    /// @param recipient the recipient of the ether\\n    /// @param amountOut the amount of ether sent to the recipient\\n    event RedeemRedemptionTicketNft(uint256 indexed nftId, address indexed sender, address indexed recipient,  uint120 amountOut);\\n\\n    /// @notice When someone enters the redemption queue\\n    /// @param nftId The ID of the NFT\\n    /// @param sender The address of the msg.sender, who is redeeming veMetis\\n    /// @param recipient The recipient of the NFT\\n    /// @param amountVeMetisRedeemed The amount of veMetis redeemed\\n    event EnterRedemptionQueue(\\n        uint256 indexed nftId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amountVeMetisRedeemed,\\n        uint256 maturityTimestamp\\n    );\\n\\n    function initialize(address _config) initializer public {\\n        __Base_init(_config);\\n        __ERC721_init(\\\"veMetisRedemptionTicket\\\", \\\"veMetis Redemption Ticket\\\");\\n        METIS = IERC20(config.metis());\\n        veMetis = IERC20(config.veMetis());\\n    }\\n\\n    // =============================================================================================\\n    // Configurations / Privileged functions\\n    // =============================================================================================\\n\\n    // =============================================================================================\\n    // Queue Functions\\n    // =============================================================================================\\n\\n    /// @notice Enter the queue for redeeming veMetis 1-to-1. Must approve first. Internal only so payor can be set\\n    /// @notice Will generate a veMetisRedemptionTicket NFT that can be redeemed for the actual Metis later.\\n    /// @param _recipient Recipient of the NFT. Must be ERC721 compatible if a contract\\n    /// @param _amountToRedeem Amount of veMetis to redeem\\n    /// @param _nftId The ID of the veMetisRedemptionTicket NFT\\n    /// @dev Must call approve/permit on veMetis contract prior to this call\\n    function _enterRedemptionQueueCore(address _recipient, uint120 _amountToRedeem) internal returns (uint256 _nftId) {\\n        // Calculations: maturity timestamp\\n        uint64 _maturityTimestamp = uint64(block.timestamp) + config.queueLengthSecs();\\n\\n        // Effects: Initialize the redemption ticket NFT information\\n        nftInformation[nextNftId] = RedemptionQueueItem({\\n            amount: _amountToRedeem,\\n            maturity: _maturityTimestamp,\\n            hasBeenRedeemed: false\\n        });\\n\\n        // Effects: Mint the redemption ticket NFT. Make sure the recipient supports ERC721.\\n        _safeMint({ to: _recipient, tokenId: nextNftId });\\n\\n        // Emit here, before the state change\\n        _nftId = nextNftId;\\n        emit EnterRedemptionQueue({\\n            nftId: _nftId,\\n            sender: msg.sender,\\n            recipient: _recipient,\\n            amountVeMetisRedeemed: _amountToRedeem,\\n            maturityTimestamp: _maturityTimestamp\\n        });\\n\\n        // Calculations: Increment the autoincrement\\n        ++nextNftId;\\n    }\\n\\n    /// @notice Enter the queue for redeeming veMetis 1-to-1. Must approve or permit first.\\n    /// @notice Will generate a veMetisRedemptionTicket NFT that can be redeemed for the actual Metis later.\\n    /// @param _recipient Recipient of the NFT. Must be ERC721 compatible if a contract\\n    /// @param _amountToRedeem Amount of veMetis to redeem\\n    /// @param _nftId The ID of the veMetisRedemptionTicket NFT\\n    /// @dev Must call approve/permit on veMetis contract prior to this call\\n    function enterRedemptionQueue(address _recipient, uint120 _amountToRedeem) public nonReentrant returns (uint256 _nftId) {\\n        require(_recipient != address(0), \\\"RedemptionQueue: zero address\\\");\\n        require(_amountToRedeem > 0, \\\"RedemptionQueue: amount is zero\\\");\\n\\n        // Do all of the NFT-generating and accounting logic\\n        _nftId = _enterRedemptionQueueCore(_recipient, _amountToRedeem);\\n\\n        // Interactions: Transfer veMetis in from the sender\\n        veMetis.safeTransferFrom({ from: msg.sender, to: address(this), value: _amountToRedeem });\\n    }\\n\\n\\n    /// @notice Redeems a veMetisRedemptionTicket NFT for Metis. (Pre-Metis send)\\n    /// @param _nftId The ID of the NFT\\n    /// @return _redemptionQueueItem The RedemptionQueueItem\\n    function _redeemRedemptionTicketNftPre(uint256 _nftId) internal returns (RedemptionQueueItem memory _redemptionQueueItem) {\\n        // Checks: ensure proper nft ownership\\n        if (!_isAuthorized({owner:ownerOf(_nftId), spender: msg.sender, tokenId: _nftId })) revert Erc721CallerNotOwnerOrApproved();\\n\\n        // Get queue information\\n        _redemptionQueueItem = nftInformation[_nftId];\\n\\n        // Checks: has been redeemed already\\n        if (_redemptionQueueItem.hasBeenRedeemed) {\\n            revert AlreadyRedeemed();\\n        }\\n\\n        // Checks: Make sure maturity was reached\\n        if (block.timestamp < _redemptionQueueItem.maturity) {\\n            revert NotMatureYet({ currentTime: block.timestamp, maturity: _redemptionQueueItem.maturity });\\n        }\\n\\n        // Effects: burn the Nft\\n        _burn(_nftId);\\n    \\n        // Effects: Mark nft as redeemed\\n        nftInformation[_nftId].hasBeenRedeemed = true;\\n\\n        // Effects: Burn veMetis to match the amount of ether sent to user 1:1          \\n        IVeMetis(config.veMetis()).burn(address(this), _redemptionQueueItem.amount);\\n    }\\n\\n    /// @notice Redeems a veMetisRedemptionTicket NFT for Metis. Must have reached the maturity date first.\\n    /// @param _nftId The ID of the NFT\\n    /// @param _recipient The recipient of the redeemed Metis\\n    function redeemRedemptionTicketNft(uint256 _nftId, address _recipient) external virtual nonReentrant {\\n        require(_recipient != address(0), \\\"RedemptionQueue: zero address\\\");\\n\\n        // Do everything except sending out the Metis back to the _recipient\\n        RedemptionQueueItem memory _redemptionQueueItem = _redeemRedemptionTicketNftPre(_nftId);\\n\\n        // Interactions: Transfer Metis to recipient\\n        METIS.safeTransfer(_recipient, _redemptionQueueItem.amount);\\n\\n        emit RedeemRedemptionTicketNft({\\n            nftId: _nftId,\\n            sender: msg.sender,\\n            recipient: _recipient,\\n            amountOut: _redemptionQueueItem.amount\\n        });\\n    }\\n\\n    function getNftId() external view returns (uint64) {\\n        return nextNftId;\\n    }\\n\\n    function getNftInformation(uint256 _nftId) external view returns (RedemptionQueueItem memory) {\\n        return nftInformation[_nftId];\\n    }\\n    // ====================================\\n    // Errors\\n    // ====================================\\n\\n    /// @notice ERC721: caller is not token owner or approved\\n    error Erc721CallerNotOwnerOrApproved();\\n\\n    /// @notice When timelock/operator tries collecting more fees than they are due\\n    /// @param collectAmount How much fee the ounsender is trying to collect\\n    /// @param accruedAmount How much fees are actually collectable\\n    error ExceedsCollectedFees(uint128 collectAmount, uint128 accruedAmount);\\n\\n    /// @notice NFT is not mature enough to redeem yet\\n    /// @param currentTime Current time.\\n    /// @param maturity Time of maturity\\n    error NotMatureYet(uint256 currentTime, uint64 maturity);\\n\\n    /// @notice Already reduced maturity\\n    error AlreadyReducedMaturity();\\n    \\n    /// @notice already redeemed\\n    error AlreadyRedeemed();\\n\\n    function getMetisAddress()public view returns (address){\\n        return address(METIS);\\n    }\\n}\",\"keccak256\":\"0x3d94c625382e1adadff0927c25495a712cd7f6284d361b93c742159397864f25\",\"license\":\"MIT\"},\"contracts/interface/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IConfig {\\n    function initialize() external;\\n\\n    function veMetis() external view returns (address);\\n\\n    function veMetisMinter() external view returns (address);\\n\\n    function sveMetis() external view returns (address);\\n\\n    function rewardDispatcher() external view returns (address);\\n\\n    function metis() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function l1Dealer() external view returns (address);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTreasuryRatio() external view returns (uint32);\\n\\n    function redemptionQueue() external view returns (address);\\n\\n    function queueLengthSecs() external view returns (uint64);\\n\\n    function setProtocolTreasury(address _protocolTreasury) external;\\n    \\n\\n    function setProtocolTreasuryRatio(uint32 _protocolTreasuryRatio) external;\\n    function setQueueLengthSecs(uint64 _queueLengthSecs) external;\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x8212190496343b78997b10f14d5c3b0bec521ca50925082442a5eaea825b1a38\",\"license\":\"MIT\"},\"contracts/interface/IVeMetis.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IVeMetis is IERC20 {\\n    function mint(address user, uint256 amount) external;\\n    function burn(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x800c4e101487983dbbba1ab08baba5076100ad2aa124de2104fbeb8f8e6e3959\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6728,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"config","offset":0,"slot":"0","type":"t_contract(IConfig)7382"},{"astId":6730,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"internalCalling","offset":0,"slot":"1","type":"t_address"},{"astId":6870,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)30_storage"},{"astId":6910,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"nextNftId","offset":0,"slot":"32","type":"t_uint64"},{"astId":6914,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"redemptionQueueAccounting","offset":0,"slot":"33","type":"t_struct(RedemptionQueueAccounting)6908_storage"},{"astId":6920,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"nftInformation","offset":0,"slot":"34","type":"t_mapping(t_uint256,t_struct(RedemptionQueueItem)6902_storage)"},{"astId":6923,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"veMetis","offset":0,"slot":"35","type":"t_contract(IERC20)1853"},{"astId":6926,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"METIS","offset":0,"slot":"36","type":"t_contract(IERC20)1853"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)30_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[30]","numberOfBytes":"960"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IConfig)7382":{"encoding":"inplace","label":"contract IConfig","numberOfBytes":"20"},"t_contract(IERC20)1853":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_mapping(t_uint256,t_struct(RedemptionQueueItem)6902_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct RedemptionQueue.RedemptionQueueItem)","numberOfBytes":"32","value":"t_struct(RedemptionQueueItem)6902_storage"},"t_struct(RedemptionQueueAccounting)6908_storage":{"encoding":"inplace","label":"struct RedemptionQueue.RedemptionQueueAccounting","members":[{"astId":6905,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"etherLiabilities","offset":0,"slot":"0","type":"t_uint128"},{"astId":6907,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"unclaimedFees","offset":16,"slot":"0","type":"t_uint128"}],"numberOfBytes":"32"},"t_struct(RedemptionQueueItem)6902_storage":{"encoding":"inplace","label":"struct RedemptionQueue.RedemptionQueueItem","members":[{"astId":6897,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"hasBeenRedeemed","offset":0,"slot":"0","type":"t_bool"},{"astId":6899,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"maturity","offset":1,"slot":"0","type":"t_uint64"},{"astId":6901,"contract":"contracts/RedemptionQueue.sol:RedemptionQueue","label":"amount","offset":9,"slot":"0","type":"t_uint120"}],"numberOfBytes":"32"},"t_uint120":{"encoding":"inplace","label":"uint120","numberOfBytes":"15"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"errors":{"AlreadyRedeemed()":[{"notice":"already redeemed"}],"AlreadyReducedMaturity()":[{"notice":"Already reduced maturity"}],"Erc721CallerNotOwnerOrApproved()":[{"notice":"ERC721: caller is not token owner or approved"}],"ExceedsCollectedFees(uint128,uint128)":[{"notice":"When timelock/operator tries collecting more fees than they are due"}],"NotMatureYet(uint256,uint64)":[{"notice":"NFT is not mature enough to redeem yet"}]},"events":{"EnterRedemptionQueue(uint256,address,address,uint256,uint256)":{"notice":"When someone enters the redemption queue"},"RedeemRedemptionTicketNft(uint256,address,address,uint120)":{"notice":"When someone redeems their NFT for Metis"}},"kind":"user","methods":{"ADMIN_ROLE()":{"notice":"The role for the admin"},"BACKEND_ROLE()":{"notice":"The role for the backend"},"DEFAULT_ADMIN_ROLE()":{"notice":"The default admin role"},"FEE_PRECISION()":{"notice":"The precision of the fee"},"INITIAL_DEPOSIT_AMOUNT()":{"notice":"sveMetis vault initial deposit amount"},"TIMELOCK_ROLE()":{"notice":"The role for the tmelock"},"config()":{"notice":"holds the address of the config contract"},"enterRedemptionQueue(address,uint120)":{"notice":"Enter the queue for redeeming veMetis 1-to-1. Must approve or permit first.Will generate a veMetisRedemptionTicket NFT that can be redeemed for the actual Metis later."},"nftInformation(uint256)":{"notice":"Information about a user's redemption ticket NFT"},"redeemRedemptionTicketNft(uint256,address)":{"notice":"Redeems a veMetisRedemptionTicket NFT for Metis. Must have reached the maturity date first."},"redemptionQueueAccounting()":{"notice":"Accounting redemption queue"}},"notice":"RedemptionQueue is the contract that manages the redemption queue for veMetis","version":1}}},"contracts/interface/IConfig.sol":{"IConfig":{"abi":[{"inputs":[],"name":"bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"l1Dealer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metis","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolTreasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolTreasuryRatio","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"queueLengthSecs","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"redemptionQueue","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardDispatcher","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_protocolTreasury","type":"address"}],"name":"setProtocolTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_protocolTreasuryRatio","type":"uint32"}],"name":"setProtocolTreasuryRatio","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_queueLengthSecs","type":"uint64"}],"name":"setQueueLengthSecs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"bytes32","name":"adminRole","type":"bytes32"}],"name":"setRoleAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sveMetis","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"veMetis","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"veMetisMinter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"bridge()":"e78cea92","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize()":"8129fc1c","l1Dealer()":"a2be57ad","metis()":"e5974554","protocolTreasury()":"803db96d","protocolTreasuryRatio()":"8b587b9c","queueLengthSecs()":"2d76710b","redemptionQueue()":"97ec19be","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","rewardDispatcher()":"21951955","setProtocolTreasury(address)":"0c5a61f8","setProtocolTreasuryRatio(uint32)":"d27bc94a","setQueueLengthSecs(uint64)":"093c4e21","setRoleAdmin(bytes32,bytes32)":"1e4e0091","sveMetis()":"a2191470","veMetis()":"9336ce80","veMetisMinter()":"bf27726c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Dealer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTreasuryRatio\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueLengthSecs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolTreasury\",\"type\":\"address\"}],\"name\":\"setProtocolTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_protocolTreasuryRatio\",\"type\":\"uint32\"}],\"name\":\"setProtocolTreasuryRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_queueLengthSecs\",\"type\":\"uint64\"}],\"name\":\"setQueueLengthSecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sveMetis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veMetis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veMetisMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IConfig.sol\":\"IConfig\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interface/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IConfig {\\n    function initialize() external;\\n\\n    function veMetis() external view returns (address);\\n\\n    function veMetisMinter() external view returns (address);\\n\\n    function sveMetis() external view returns (address);\\n\\n    function rewardDispatcher() external view returns (address);\\n\\n    function metis() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function l1Dealer() external view returns (address);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTreasuryRatio() external view returns (uint32);\\n\\n    function redemptionQueue() external view returns (address);\\n\\n    function queueLengthSecs() external view returns (uint64);\\n\\n    function setProtocolTreasury(address _protocolTreasury) external;\\n    \\n\\n    function setProtocolTreasuryRatio(uint32 _protocolTreasuryRatio) external;\\n    function setQueueLengthSecs(uint64 _queueLengthSecs) external;\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x8212190496343b78997b10f14d5c3b0bec521ca50925082442a5eaea825b1a38\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interface/IVeMetis.sol":{"IVeMetis":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(address,uint256)":"9dc29fac","mint(address,uint256)":"40c10f19","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IVeMetis.sol\":\"IVeMetis\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/interface/IVeMetis.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IVeMetis is IERC20 {\\n    function mint(address user, uint256 amount) external;\\n    function burn(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x800c4e101487983dbbba1ab08baba5076100ad2aa124de2104fbeb8f8e6e3959\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}