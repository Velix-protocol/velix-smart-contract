{
  "address": "0x03d37f90d50b4B09B191f75BB2840ACb9b111a42",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldValue",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "CancelRedemptionFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldValue",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "MinQueueLengthSecs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldValue",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "PausedSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldValue",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "QueueLengthSecsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldValue",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "ReduceMaturityStakeSecsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "senderFini",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_BRIDGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_L1_DEALER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_METIS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROTOCOL_TREASURY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_REDEMPTION_QUEUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_REWARD_DISPATCHER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADDRESS_VELIXVAULT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BACKEND_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_PRECISION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INITIAL_DEPOSIT_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIMELOCK_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UINT32_PROTOCOL_TREASURY_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UINT64_CANCEL_REDEMPTION_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UINT64_MIN_QUEUE_LENGTH_SECS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UINT64_QUEUE_LENGTH_SECS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UINT64_REDEMPTION_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UINT64_REDUCE_MATURITY_STAKE_SECS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "_roles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "allowAll",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "configMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Dealer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metis",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolTreasuryRatio",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queueLengthSecs",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolTreasury",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_protocolTreasuryRatio",
          "type": "uint32"
        }
      ],
      "name": "setIntialValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Dealer",
          "type": "address"
        }
      ],
      "name": "setL1Dealer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolTreasury",
          "type": "address"
        }
      ],
      "name": "setProtocolTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_protocolTreasuryRatio",
          "type": "uint32"
        }
      ],
      "name": "setProtocolTreasuryRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_queueLengthSecs",
          "type": "uint64"
        }
      ],
      "name": "setQueueLengthSecs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_redemptionQueueAddress",
          "type": "address"
        }
      ],
      "name": "setRedemptionQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardDispatcher",
          "type": "address"
        }
      ],
      "name": "setRewardDispatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "adminRole",
          "type": "bytes32"
        }
      ],
      "name": "setRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_velixVault",
          "type": "address"
        }
      ],
      "name": "setVelixVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "velixVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcbb2f8fc822a78d97b0f5afe44b9c9fe15c9e9dd6981520552b868ab330b04e0",
  "receipt": {
    "to": null,
    "from": "0x60031b5df905D92786dea1781E731B88b959c8A6",
    "contractAddress": "0x03d37f90d50b4B09B191f75BB2840ACb9b111a42",
    "transactionIndex": 1,
    "gasUsed": "2851348",
    "logsBloom": "0x
    "blockHash": "0x6f2f1fa81a93efbfb0182a32de8331dd893491af98e47a21d5ab2a2c686f1f6c",
    "transactionHash": "0xcbb2f8fc822a78d97b0f5afe44b9c9fe15c9e9dd6981520552b868ab330b04e0",
    "logs": [],
    "blockNumber": 1389221,
    "cumulativeGasUsed": "2872348",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b59eaf9e0f83b14ba89a041d9a590ad6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"CancelRedemptionFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"MinQueueLengthSecs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"PausedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"QueueLengthSecsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"ReduceMaturityStakeSecsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFini\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_BRIDGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_L1_DEALER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_METIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_PROTOCOL_TREASURY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_REDEMPTION_QUEUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_REWARD_DISPATCHER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADDRESS_VELIXVAULT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BACKEND_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT32_PROTOCOL_TREASURY_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT64_CANCEL_REDEMPTION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT64_MIN_QUEUE_LENGTH_SECS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT64_QUEUE_LENGTH_SECS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT64_REDEMPTION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UINT64_REDUCE_MATURITY_STAKE_SECS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_roles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"configMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Dealer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTreasuryRatio\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueLengthSecs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolTreasury\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_protocolTreasuryRatio\",\"type\":\"uint32\"}],\"name\":\"setIntialValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Dealer\",\"type\":\"address\"}],\"name\":\"setL1Dealer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolTreasury\",\"type\":\"address\"}],\"name\":\"setProtocolTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_protocolTreasuryRatio\",\"type\":\"uint32\"}],\"name\":\"setProtocolTreasuryRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_queueLengthSecs\",\"type\":\"uint64\"}],\"name\":\"setQueueLengthSecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_redemptionQueueAddress\",\"type\":\"address\"}],\"name\":\"setRedemptionQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDispatcher\",\"type\":\"address\"}],\"name\":\"setRewardDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_velixVault\",\"type\":\"address\"}],\"name\":\"setVelixVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"velixVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Manages configuration settings and roles for the protocol.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"events\":{\"CancelRedemptionFeeSet(uint64,uint64)\":{\"params\":{\"newValue\":\"new value of `cancelRedemptionFee`\",\"oldValue\":\"old value of `cancelRedemptionFee`\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MinQueueLengthSecs(uint64,uint64)\":{\"params\":{\"newValue\":\"new value of `minQueueLengthSecs`\",\"oldValue\":\"old value of `minQueueLengthSecs`\"}},\"PausedSet(bool,bool)\":{\"params\":{\"newValue\":\"new value of `isPaused`\",\"oldValue\":\"old value of `isPaused`\"}},\"QueueLengthSecsSet(uint64,uint64)\":{\"params\":{\"newValue\":\"new value of `queueLengthSecs`\",\"oldValue\":\"old value of `queueLengthSecs`\"}},\"ReduceMaturityStakeSecsSet(uint64,uint64)\":{\"params\":{\"newValue\":\"new value of `reduceMaturityStakeSecs`\",\"oldValue\":\"old value of `reduceMaturityStakeSecs`\"}}},\"kind\":\"dev\",\"methods\":{\"bridge()\":{\"details\":\"Returns the bridge address.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`.\",\"params\":{\"role\":\"Role identifier.\"},\"returns\":{\"_0\":\"Admin role identifier.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`.\"},\"hasRole(bytes32,address)\":{\"details\":\"Checks if an account has a specific role.\",\"params\":{\"account\":\"Address to check.\",\"role\":\"Role identifier.\"},\"returns\":{\"_0\":\"True if the account has the role, false otherwise.\"}},\"initialize()\":{\"details\":\"Initializes the contract by setting the default admin role to the deployer.\"},\"l1Dealer()\":{\"details\":\"Returns the L1 dealer address.\"},\"metis()\":{\"details\":\"Returns the Metis address.\"},\"protocolTreasury()\":{\"details\":\"Returns the protocol treasury address.\"},\"protocolTreasuryRatio()\":{\"details\":\"Returns the protocol treasury ratio.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account.\",\"params\":{\"account\":\"Address to renounce role for.\",\"role\":\"Role identifier.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.\",\"params\":{\"account\":\"Address to revoke role from.\",\"role\":\"Role identifier.\"}},\"rewardDispatcher()\":{\"details\":\"Returns the reward dispatcher address.\"},\"setIntialValues(address,address,address,uint32)\":{\"details\":\"Sets initial values for the configuration.\",\"params\":{\"_bridge\":\"Address of the bridge contract.\",\"_metis\":\"Address of the Metis token.\",\"_protocolTreasury\":\"Address of the protocol treasury.\",\"_protocolTreasuryRatio\":\"Ratio for the protocol treasury.\"}},\"setL1Dealer(address)\":{\"details\":\"Sets the L1 dealer address.\",\"params\":{\"_l1Dealer\":\"Address of the L1 dealer.\"}},\"setProtocolTreasury(address)\":{\"details\":\"Sets the protocol treasury address.\",\"params\":{\"_protocolTreasury\":\"Address of the protocol treasury.\"}},\"setProtocolTreasuryRatio(uint32)\":{\"details\":\"Sets the protocol treasury ratio.\",\"params\":{\"_protocolTreasuryRatio\":\"Ratio for the protocol treasury.\"}},\"setQueueLengthSecs(uint64)\":{\"params\":{\"_queueLengthSecs\":\"queue length in seconds\"}},\"setRewardDispatcher(address)\":{\"details\":\"Sets the reward dispatcher address.\",\"params\":{\"_rewardDispatcher\":\"Address of the reward dispatcher contract.\"}},\"setRoleAdmin(bytes32,bytes32)\":{\"details\":\"Sets `adminRole` as `role`'s admin role.\"},\"setVelixVault(address)\":{\"details\":\"Sets the velixVault address.\",\"params\":{\"_velixVault\":\"Address of the VelixVault contract.\"}},\"velixVault()\":{\"details\":\"Returns the velixVault address.\"}},\"title\":\"Config\",\"version\":1},\"userdoc\":{\"events\":{\"CancelRedemptionFeeSet(uint64,uint64)\":{\"notice\":\"Emits when `cancelRedemptionFee` is set to `newValue`\"},\"MinQueueLengthSecs(uint64,uint64)\":{\"notice\":\"Emits when `minQueueLengthSecs` is set to `newValue`\"},\"PausedSet(bool,bool)\":{\"notice\":\"Emits when `isPaused` is set to `newValue`\"},\"QueueLengthSecsSet(uint64,uint64)\":{\"notice\":\"Emits when `queueLengthSecs` is set to `newValue`\"},\"ReduceMaturityStakeSecsSet(uint64,uint64)\":{\"notice\":\"Emits when `reduceMaturityStakeSecs` is set to `newValue`\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"The role for the admin\"},\"BACKEND_ROLE()\":{\"notice\":\"The role for the backend\"},\"DEFAULT_ADMIN_ROLE()\":{\"notice\":\"The default admin role\"},\"FEE_PRECISION()\":{\"notice\":\"The precision of the fee\"},\"INITIAL_DEPOSIT_AMOUNT()\":{\"notice\":\"sveMetis vault initial deposit amount\"},\"TIMELOCK_ROLE()\":{\"notice\":\"The role for the tmelock\"},\"config()\":{\"notice\":\"holds the address of the config contract\"},\"queueLengthSecs()\":{\"notice\":\"get queue length in seconds \"},\"redemptionQueue()\":{\"notice\":\"get redemptionQueue address\"},\"setQueueLengthSecs(uint64)\":{\"notice\":\"set queue length in seconds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Config.sol\":\"Config\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interface/IConfig.sol\\\";\\n\\nabstract contract Base is ContextUpgradeable, ReentrancyGuardUpgradeable {\\n    /// @notice The precision of the fee\\n    uint64 public constant FEE_PRECISION = 1e6;\\n\\n    /// @notice The default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice The role for the tmelock\\n    bytes32 public constant TIMELOCK_ROLE = keccak256(\\\"TIMELOCK_ROLE\\\");\\n    \\n    /// @notice The role for the admin\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    /// @notice The role for the backend\\n    bytes32 public constant BACKEND_ROLE = keccak256(\\\"BACKEND_ROLE\\\");\\n\\n    /// @notice sveMetis vault initial deposit amount\\n    uint256 public constant INITIAL_DEPOSIT_AMOUNT = 1 ether;\\n\\n    /// @notice holds the address of the config contract\\n    IConfig public config;\\n\\n    address private internalCalling;\\n\\n    uint256 public _totalAssets;\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!config.hasRole(role, _msgSender())) {\\n          _checkRole(role);\\n        }  \\n        _;\\n    }\\n    \\n    modifier onlyBackend() {\\n        _checkRole(BACKEND_ROLE);\\n        _;\\n    }\\n\\n    modifier internalOnly(address internalAddress) {\\n        require(_msgSender() == internalAddress, \\\"internal only\\\");\\n        internalCalling = internalAddress;\\n        _;\\n        internalCalling = address(0);\\n    }\\n\\n    /// @notice Initializes the contract with the config contract address\\n    /// @param _config The address of the config contract\\n    function __Base_init(address _config) internal onlyInitializing {\\n        config = IConfig(_config);\\n        __ReentrancyGuard_init();\\n        __Context_init();\\n    }\\n\\n  /// @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!config.hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * reject Metis transfer\\n     */\\n    receive() external payable {\\n        revert(\\\"Base: not support Metis transfer\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[30] private __gap;\\n}\\n\",\"keccak256\":\"0x87f3d172a08a3d7258d6eb631ae189a9fa939d4ed8c7fcca5ee100a86a34ab03\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./interface/IConfig.sol\\\";\\nimport \\\"./Base.sol\\\";\\n\\n/**\\n * @title Config\\n * @dev Manages configuration settings and roles for the protocol.\\n*/\\ncontract Config is Initializable, IConfig, Base {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed senderFini\\n    );\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /// @notice Emits when `queueLengthSecs` is set to `newValue`\\n    /// @param oldValue old value of `queueLengthSecs`\\n    /// @param newValue new value of `queueLengthSecs`\\n    event QueueLengthSecsSet(uint64 oldValue, uint64 newValue);\\n\\n    /// @notice Emits when `cancelRedemptionFee` is set to `newValue`\\n    /// @param oldValue old value of `cancelRedemptionFee`\\n    /// @param newValue new value of `cancelRedemptionFee`\\n    event CancelRedemptionFeeSet(uint64 oldValue, uint64 newValue);\\n\\n    /// @notice Emits when `minQueueLengthSecs` is set to `newValue`\\n    /// @param oldValue old value of `minQueueLengthSecs`\\n    /// @param newValue new value of `minQueueLengthSecs`\\n    event MinQueueLengthSecs(uint64 oldValue, uint64 newValue);\\n\\n    /// @notice Emits when `reduceMaturityStakeSecs` is set to `newValue`\\n    /// @param oldValue old value of `reduceMaturityStakeSecs`\\n    /// @param newValue new value of `reduceMaturityStakeSecs`\\n    event ReduceMaturityStakeSecsSet(uint64 oldValue, uint64 newValue);\\n\\n    /// @notice Emits when `isPaused` is set to `newValue`\\n    /// @param oldValue old value of `isPaused`\\n    /// @param newValue new value of `isPaused`\\n    event PausedSet(bool oldValue, bool newValue);\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n        bool allowAll;\\n    }\\n\\n    uint256 public constant ADDRESS_VELIXVAULT =\\n        uint256(keccak256(\\\"ADDRESS_VELIXVAULT\\\"));\\n    uint256 public constant ADDRESS_REWARD_DISPATCHER =\\n        uint256(keccak256(\\\"ADDRESS_REWARD_DISPATCHER\\\"));\\n    uint256 public constant ADDRESS_METIS = uint256(keccak256(\\\"ADDRESS_METIS\\\"));\\n    uint256 public constant ADDRESS_BRIDGE =\\n        uint256(keccak256(\\\"ADDRESS_BRIDGE\\\"));\\n    uint256 public constant ADDRESS_L1_DEALER =\\n        uint256(keccak256(\\\"ADDRESS_L1_DEALER\\\"));\\n    uint256 public constant ADDRESS_PROTOCOL_TREASURY =\\n        uint256(keccak256(\\\"ADDRESS_PROTOCOL_TREASURY\\\"));\\n    uint256 public constant UINT32_PROTOCOL_TREASURY_RATIO =\\n        uint256(keccak256(\\\"UINT32_PROTOCOL_TREASURY_RATIO\\\"));\\n    uint256 public constant ADDRESS_REDEMPTION_QUEUE = \\n        uint256(keccak256(\\\"ADDRESS_REDEMPTION_QUEUE\\\"));\\n    uint256 public constant UINT64_REDEMPTION_FEE = \\n        uint256(keccak256(\\\"UINT64_REDEMPTION_FEE\\\"));\\n    uint256 public constant UINT64_QUEUE_LENGTH_SECS =\\n         uint256(keccak256(\\\"UINT64_QUEUE_LENGTH_SECS\\\"));\\n    uint256 public constant UINT64_CANCEL_REDEMPTION_FEE =\\n         uint256(keccak256(\\\"UINT64_CANCEL_REDEMPTION_FEE\\\"));\\n    uint256 public constant UINT64_MIN_QUEUE_LENGTH_SECS = \\n        uint256(keccak256(\\\"UINT64_MIN_QUEUE_LENGTH_SECS\\\"));\\n    uint256 public constant UINT64_REDUCE_MATURITY_STAKE_SECS = \\n        uint256(keccak256(\\\"UINT64_REDUCE_MATURITY_STAKE_SECS\\\"));\\n\\n    mapping(uint256 => uint256) public configMap;\\n    mapping(bytes32 => RoleData) public _roles;\\n    \\n    /**\\n     * @dev Initializes the contract by setting the default admin role to the deployer.\\n    */\\n    function initialize() external initializer {\\n        __Base_init(address(this));\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Sets initial values for the configuration.\\n     * @param _metis Address of the Metis token.\\n     * @param _bridge Address of the bridge contract.\\n     * @param _protocolTreasury Address of the protocol treasury.\\n     * @param _protocolTreasuryRatio Ratio for the protocol treasury.\\n    */\\n    function setIntialValues(\\n        address _metis,\\n        address _bridge,\\n        address _protocolTreasury,\\n        uint32 _protocolTreasuryRatio\\n    ) public onlyRole(ADMIN_ROLE) {\\n        configMap[ADDRESS_METIS] = uint256(uint160(_metis));\\n        configMap[ADDRESS_BRIDGE] = uint256(uint160(_bridge));\\n        configMap[ADDRESS_PROTOCOL_TREASURY] = uint256(\\n            uint160(_protocolTreasury)\\n        );\\n        setProtocolTreasuryRatio(_protocolTreasuryRatio);\\n    }\\n\\n    /**\\n     * @dev Sets the L1 dealer address.\\n     * @param _l1Dealer Address of the L1 dealer.\\n     */\\n    function setL1Dealer(\\n        address _l1Dealer\\n    ) public onlyRole(ADMIN_ROLE) {\\n        configMap[ADDRESS_L1_DEALER] = uint256(uint160(_l1Dealer));\\n    }\\n\\n\\n    /**\\n     * @dev Sets the velixVault address.\\n     * @param _velixVault Address of the VelixVault contract.\\n     */\\n    function setVelixVault(\\n        address _velixVault\\n    ) public onlyRole(ADMIN_ROLE) {\\n        configMap[ADDRESS_VELIXVAULT] = uint256(uint160(_velixVault));\\n    }\\n\\n    /**\\n     * @dev Sets the reward dispatcher address.\\n     * @param _rewardDispatcher Address of the reward dispatcher contract.\\n     */\\n    function setRewardDispatcher(\\n        address _rewardDispatcher\\n    ) public onlyRole(ADMIN_ROLE) {\\n        configMap[ADDRESS_REWARD_DISPATCHER] = uint256(\\n            uint160(_rewardDispatcher)\\n        );\\n    }\\n    // =========== updates  =========\\n    function setRedemptionQueue(address _redemptionQueueAddress) public onlyRole(ADMIN_ROLE){\\n        configMap[ADDRESS_REDEMPTION_QUEUE] = uint256(\\n            uint160(_redemptionQueueAddress)\\n        );\\n    }\\n\\n    /// @notice get redemptionQueue address\\n    function redemptionQueue() external view override returns (address) {\\n        return address(uint160(configMap[ADDRESS_REDEMPTION_QUEUE]));\\n    }\\n\\n\\n    /// @notice get queue length in seconds \\n    function queueLengthSecs() external view override returns (uint64) {\\n        return uint64(configMap[UINT64_QUEUE_LENGTH_SECS]);\\n    }\\n\\n\\n    /**\\n     * @dev Returns the velixVault address.\\n     */\\n    function velixVault() public view override returns (address) {\\n        return address(uint160(configMap[ADDRESS_VELIXVAULT]));\\n    }\\n\\n    /**\\n     * @dev Returns the reward dispatcher address.\\n     */\\n    function rewardDispatcher() public view override returns (address) {\\n        return address(uint160(configMap[ADDRESS_REWARD_DISPATCHER]));\\n    }\\n\\n    /**\\n     * @dev Returns the Metis address.\\n     */\\n    function metis() public view override returns (address) {\\n        return address(uint160(configMap[ADDRESS_METIS]));\\n    }\\n\\n    /**\\n     * @dev Returns the bridge address.\\n     */\\n    function bridge() public view override returns (address) {\\n        return address(uint160(configMap[ADDRESS_BRIDGE]));\\n    }\\n\\n    /**\\n     * @dev Returns the L1 dealer address.\\n     */\\n    function l1Dealer() public view override returns (address) {\\n        return address(uint160(configMap[ADDRESS_L1_DEALER]));\\n    }\\n\\n    /**\\n     * @dev Returns the protocol treasury address.\\n     */\\n    function protocolTreasury() public view override returns (address) {\\n        return address(uint160(configMap[ADDRESS_PROTOCOL_TREASURY]));\\n    }\\n\\n    /**\\n     * @dev Returns the protocol treasury ratio.\\n     */\\n    function protocolTreasuryRatio() public view override returns (uint32) {\\n        return uint32(configMap[UINT32_PROTOCOL_TREASURY_RATIO]);\\n    }\\n\\n    /**\\n     * @dev Sets the protocol treasury address.\\n     * @param _protocolTreasury Address of the protocol treasury.\\n     */\\n\\n    function setProtocolTreasury(\\n        address _protocolTreasury\\n    ) external override onlyRole(ADMIN_ROLE) {\\n        require(\\n            _protocolTreasury != address(0),\\n            \\\"Config: protocolTreasury is zero address\\\"\\n        );\\n        configMap[ADDRESS_PROTOCOL_TREASURY] = uint256(\\n            uint160(_protocolTreasury)\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets the protocol treasury ratio.\\n     * @param _protocolTreasuryRatio Ratio for the protocol treasury.\\n     */\\n    function setProtocolTreasuryRatio(\\n        uint32 _protocolTreasuryRatio\\n    ) public override onlyRole(ADMIN_ROLE){\\n        require(\\n            _protocolTreasuryRatio <= 100000,\\n            \\\"Config: protocolTreasuryRatio must be less than 10000\\\"\\n        );\\n        configMap[UINT32_PROTOCOL_TREASURY_RATIO] = _protocolTreasuryRatio;\\n    }\\n\\n\\n    /// @notice set queue length in seconds\\n    /// @param _queueLengthSecs queue length in seconds\\n    function setQueueLengthSecs(uint64 _queueLengthSecs) public override onlyRole(ADMIN_ROLE) {\\n        uint64 oldValue = uint64(configMap[UINT64_QUEUE_LENGTH_SECS]);\\n        configMap[UINT64_QUEUE_LENGTH_SECS] = _queueLengthSecs;\\n        emit QueueLengthSecsSet(oldValue, _queueLengthSecs);\\n    }\\n\\n    /**\\n     * @dev Checks if an account has a specific role.\\n     * @param role Role identifier.\\n     * @param account Address to check.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) public view override returns (bool) {\\n        return _roles[role].allowAll || _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`.\\n     * @param role Role identifier.\\n     * @return Admin role identifier.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     * @param role Role identifier.\\n     * @param account Address to revoke role from.\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public override onlyRole(ADMIN_ROLE) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     * @param role Role identifier.\\n     * @param account Address to renounce role for.\\n     */\\n    function renounceRole(bytes32 role, address account) public override {\\n        require(\\n            account == _msgSender(),\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as `role`'s admin role.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) public override onlyRole(ADMIN_ROLE) {\\n        _setRoleAdmin(role, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public override onlyRole(ADMIN_ROLE) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ad3e0485c644e2efe63afe4828170010e3e06a44b832ad3769ae6a29a594842\",\"license\":\"MIT\"},\"contracts/interface/IConfig.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IConfig {\\n    function initialize() external;\\n\\n    function velixVault() external view returns (address);\\n\\n    function rewardDispatcher() external view returns (address);\\n\\n    function metis() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function l1Dealer() external view returns (address);\\n\\n    function protocolTreasury() external view returns (address);\\n\\n    function protocolTreasuryRatio() external view returns (uint32);\\n\\n    function redemptionQueue() external view returns (address);\\n\\n    function queueLengthSecs() external view returns (uint64);\\n\\n    function setProtocolTreasury(address _protocolTreasury) external;\\n    \\n\\n    function setProtocolTreasuryRatio(uint32 _protocolTreasuryRatio) external;\\n    function setQueueLengthSecs(uint64 _queueLengthSecs) external;\\n\\n    function hasRole(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0xc8c413b21c28fe6361afeab34fe854e49f3951102b2982dd4b98d803a9700159\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132bc806100206000396000f3fe60806040526004361061028c5760003560e01c806388ef06be1161015a578063bd99d7e1116100c1578063e59745541161007a578063e5974554146109d3578063e63a391f146109fe578063e78cea9214610a29578063f288a2e214610a54578063f9aa973f14610a7f578063fda42e2114610aaa576102cc565b8063bd99d7e1146108c4578063ce04bebb14610902578063d27bc94a1461092d578063d547741f14610956578063de55db9d1461097f578063e52083c6146109a8576102cc565b806397fc71771161011357806397fc7177146107c2578063a217fddf146107ed578063a2be57ad14610818578063a7d6181914610843578063bad1e1391461086e578063bbadf42714610899576102cc565b806388ef06be146106b05780638b587b9c146106db5780638d40bd351461070657806391d148541461072f57806392c2becc1461076c57806397ec19be14610797576102cc565b80633b4c46d0116101fe57806372ef1540116101b757806372ef1540146105c457806375b238fc146105ef57806375fb88141461061a57806379502c5514610643578063803db96d1461066e5780638129fc1c14610699576102cc565b80633b4c46d0146104c45780633b8ad07f146104ed578063475785c7146105185780634d19eaf11461054357806350c4a8a21461056e57806351dded4d14610599576102cc565b8063240598311161025057806324059831146103b4578063248a9ca3146103df5780632d76710b1461041c5780632f2ff15d1461044757806336568abe1461047057806339ee2c3d14610499576102cc565b8063093c4e21146102d15780630c5a61f8146102fa5780630e9429ba146103235780631e4e0091146103605780632195195514610389576102cc565b366102cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c3906127ed565b60405180910390fd5b600080fd5b3480156102dd57600080fd5b506102f860048036038101906102f39190612852565b610ad3565b005b34801561030657600080fd5b50610321600480360381019061031c91906128dd565b610c63565b005b34801561032f57600080fd5b5061034a60048036038101906103459190612940565b610df9565b604051610357919061297c565b60405180910390f35b34801561036c57600080fd5b50610387600480360381019061038291906129cd565b610e11565b005b34801561039557600080fd5b5061039e610ef2565b6040516103ab9190612a1c565b60405180910390f35b3480156103c057600080fd5b506103c9610f30565b6040516103d6919061297c565b60405180910390f35b3480156103eb57600080fd5b5061040660048036038101906104019190612a37565b610f57565b6040516104139190612a73565b60405180910390f35b34801561042857600080fd5b50610431610f77565b60405161043e9190612a9d565b60405180910390f35b34801561045357600080fd5b5061046e60048036038101906104699190612ab8565b610fb5565b005b34801561047c57600080fd5b5061049760048036038101906104929190612ab8565b611096565b005b3480156104a557600080fd5b506104ae611119565b6040516104bb919061297c565b60405180910390f35b3480156104d057600080fd5b506104eb60048036038101906104e691906128dd565b611140565b005b3480156104f957600080fd5b50610502611267565b60405161050f919061297c565b60405180910390f35b34801561052457600080fd5b5061052d61128e565b60405161053a9190612a1c565b60405180910390f35b34801561054f57600080fd5b506105586112cc565b604051610565919061297c565b60405180910390f35b34801561057a57600080fd5b506105836112f3565b604051610590919061297c565b60405180910390f35b3480156105a557600080fd5b506105ae61131a565b6040516105bb919061297c565b60405180910390f35b3480156105d057600080fd5b506105d9611341565b6040516105e6919061297c565b60405180910390f35b3480156105fb57600080fd5b50610604611368565b6040516106119190612a73565b60405180910390f35b34801561062657600080fd5b50610641600480360381019061063c91906128dd565b61138c565b005b34801561064f57600080fd5b506106586114b3565b6040516106659190612b57565b60405180910390f35b34801561067a57600080fd5b506106836114d7565b6040516106909190612a1c565b60405180910390f35b3480156106a557600080fd5b506106ae611515565b005b3480156106bc57600080fd5b506106c56116cd565b6040516106d2919061297c565b60405180910390f35b3480156106e757600080fd5b506106f06116f4565b6040516106fd9190612b91565b60405180910390f35b34801561071257600080fd5b5061072d600480360381019061072891906128dd565b611732565b005b34801561073b57600080fd5b5061075660048036038101906107519190612ab8565b611859565b6040516107639190612bc7565b60405180910390f35b34801561077857600080fd5b506107816118ef565b60405161078e9190612a73565b60405180910390f35b3480156107a357600080fd5b506107ac611913565b6040516107b99190612a1c565b60405180910390f35b3480156107ce57600080fd5b506107d7611951565b6040516107e4919061297c565b60405180910390f35b3480156107f957600080fd5b50610802611978565b60405161080f9190612a73565b60405180910390f35b34801561082457600080fd5b5061082d61197f565b60405161083a9190612a1c565b60405180910390f35b34801561084f57600080fd5b506108586119bd565b604051610865919061297c565b60405180910390f35b34801561087a57600080fd5b506108836119e4565b604051610890919061297c565b60405180910390f35b3480156108a557600080fd5b506108ae611a0b565b6040516108bb919061297c565b60405180910390f35b3480156108d057600080fd5b506108eb60048036038101906108e69190612a37565b611a32565b6040516108f9929190612be2565b60405180910390f35b34801561090e57600080fd5b50610917611a63565b604051610924919061297c565b60405180910390f35b34801561093957600080fd5b50610954600480360381019061094f9190612c37565b611a69565b005b34801561096257600080fd5b5061097d60048036038101906109789190612ab8565b611bcc565b005b34801561098b57600080fd5b506109a660048036038101906109a191906128dd565b611cad565b005b3480156109b457600080fd5b506109bd611dd4565b6040516109ca919061297c565b60405180910390f35b3480156109df57600080fd5b506109e8611de0565b6040516109f59190612a1c565b60405180910390f35b348015610a0a57600080fd5b50610a13611e1e565b604051610a209190612a9d565b60405180910390f35b348015610a3557600080fd5b50610a3e611e25565b604051610a4b9190612a1c565b60405180910390f35b348015610a6057600080fd5b50610a69611e63565b604051610a769190612a73565b60405180910390f35b348015610a8b57600080fd5b50610a94611e87565b604051610aa1919061297c565b60405180910390f35b348015610ab657600080fd5b50610ad16004803603810190610acc9190612c64565b611eae565b005b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482610b39612083565b6040518363ffffffff1660e01b8152600401610b56929190612ccb565b602060405180830381865afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190612d20565b610ba557610ba48161208b565b5b6000602160007f1ec8339790254679015c7b4db055ec6bb45de4d3ff3193d766a1cc6ce145728d60001c81526020019081526020016000205490508267ffffffffffffffff16602160007f1ec8339790254679015c7b4db055ec6bb45de4d3ff3193d766a1cc6ce145728d60001c8152602001908152602001600020819055507fc177a0244f4a8707676367719773686001fba49fd7289a82ac5b48ad94c2f6338184604051610c56929190612d4d565b60405180910390a1505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482610cc9612083565b6040518363ffffffff1660e01b8152600401610ce6929190612ccb565b602060405180830381865afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190612d20565b610d3557610d348161208b565b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9b90612de8565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16602160007f6ea4018daf79dd2b85ff55e23caa9708d35a5af81f862526e25c36407a95ad8160001c8152602001908152602001600020819055505050565b60216020528060005260406000206000915090505481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482610e77612083565b6040518363ffffffff1660e01b8152600401610e94929190612ccb565b602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190612d20565b610ee357610ee28161208b565b5b610eed838361209f565b505050565b6000602160007ffa6557a51a133888544923dacdca355721a35fbeebe974f1e7d28d3105e033cf60001c815260200190815260200160002054905090565b7fcaa210682aa7d6b03d19b857c87a6e4c61b2ea999c417f0652a36447d144f23860001c81565b600060226000838152602001908152602001600020600101549050919050565b6000602160007f1ec8339790254679015c7b4db055ec6bb45de4d3ff3193d766a1cc6ce145728d60001c815260200190815260200160002054905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148548261101b612083565b6040518363ffffffff1660e01b8152600401611038929190612ccb565b602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110799190612d20565b611087576110868161208b565b5b61109183836120fb565b505050565b61109e612083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110290612e7a565b60405180910390fd5b61111582826121dc565b5050565b7fe4a4e5425e0f84d8d68c8433df2512e8e48969299d032314614356a42435a73960001c81565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d14854826111a6612083565b6040518363ffffffff1660e01b81526004016111c3929190612ccb565b602060405180830381865afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112049190612d20565b611212576112118161208b565b5b8173ffffffffffffffffffffffffffffffffffffffff16602160007fcaa210682aa7d6b03d19b857c87a6e4c61b2ea999c417f0652a36447d144f23860001c8152602001908152602001600020819055505050565b7f69661401bd068c022c278f73b3789a33e22d5eafe981e9265041b6fe72a122fe60001c81565b6000602160007fb6907c3662b516b409b2dfc811949414b2398912e6fa671912cf81c947d1297660001c815260200190815260200160002054905090565b7f1ec8339790254679015c7b4db055ec6bb45de4d3ff3193d766a1cc6ce145728d60001c81565b7f6fede10a232b276bc7c310abfbe151b58ba2286d825bc9e66c6e5fd488844e1060001c81565b7fb6907c3662b516b409b2dfc811949414b2398912e6fa671912cf81c947d1297660001c81565b7f36051e26b7ee9ab8bfe79486c0d7a7a2112864a57aa54065540eccb3c4a4452260001c81565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d14854826113f2612083565b6040518363ffffffff1660e01b815260040161140f929190612ccb565b602060405180830381865afa15801561142c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114509190612d20565b61145e5761145d8161208b565b5b8173ffffffffffffffffffffffffffffffffffffffff16602160007fb6907c3662b516b409b2dfc811949414b2398912e6fa671912cf81c947d1297660001c8152602001908152602001600020819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000602160007f6ea4018daf79dd2b85ff55e23caa9708d35a5af81f862526e25c36407a95ad8160001c815260200190815260200160002054905090565b600061151f6122be565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561156d5750825b9050600060018367ffffffffffffffff161480156115a2575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156115b0575080155b156115e7576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156116375760018560000160086101000a81548160ff0219169083151502179055505b611640306122e6565b61166a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336120fb565b83156116c65760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516116bd9190612ed5565b60405180910390a15b5050505050565b7ffa6557a51a133888544923dacdca355721a35fbeebe974f1e7d28d3105e033cf60001c81565b6000602160007f6fede10a232b276bc7c310abfbe151b58ba2286d825bc9e66c6e5fd488844e1060001c815260200190815260200160002054905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611798612083565b6040518363ffffffff1660e01b81526004016117b5929190612ccb565b602060405180830381865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190612d20565b611804576118038161208b565b5b8173ffffffffffffffffffffffffffffffffffffffff16602160007f69661401bd068c022c278f73b3789a33e22d5eafe981e9265041b6fe72a122fe60001c8152602001908152602001600020819055505050565b60006022600084815260200190815260200160002060020160009054906101000a900460ff16806118e757506022600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b905092915050565b7f25cf2b509f2a7f322675b2a5322b182f44ad2c03ac941a0af17c9b178f5d5d5f81565b6000602160007fcaa210682aa7d6b03d19b857c87a6e4c61b2ea999c417f0652a36447d144f23860001c815260200190815260200160002054905090565b7fe3fb0f89bf43754026f5df1c4a405631deca482f630ed00c4f9897a30ea0764260001c81565b6000801b81565b6000602160007f69661401bd068c022c278f73b3789a33e22d5eafe981e9265041b6fe72a122fe60001c815260200190815260200160002054905090565b7f6ea4018daf79dd2b85ff55e23caa9708d35a5af81f862526e25c36407a95ad8160001c81565b7f454c90bb89af48c9c15cd0acb46e1f05be34b6d27d24973b724e6ff6477e129f60001c81565b7f9fb48ff2476bdf82119573e311cab5a3bbdadc90cac7a17cbe16c403581c2c3060001c81565b60226020528060005260406000206000915090508060010154908060020160009054906101000a900460ff16905082565b60025481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611acf612083565b6040518363ffffffff1660e01b8152600401611aec929190612ccb565b602060405180830381865afa158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d9190612d20565b611b3b57611b3a8161208b565b5b620186a08263ffffffff161115611b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7e90612f62565b60405180910390fd5b8163ffffffff16602160007f6fede10a232b276bc7c310abfbe151b58ba2286d825bc9e66c6e5fd488844e1060001c8152602001908152602001600020819055505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611c32612083565b6040518363ffffffff1660e01b8152600401611c4f929190612ccb565b602060405180830381865afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190612d20565b611c9e57611c9d8161208b565b5b611ca883836121dc565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611d13612083565b6040518363ffffffff1660e01b8152600401611d30929190612ccb565b602060405180830381865afa158015611d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d719190612d20565b611d7f57611d7e8161208b565b5b8173ffffffffffffffffffffffffffffffffffffffff16602160007ffa6557a51a133888544923dacdca355721a35fbeebe974f1e7d28d3105e033cf60001c8152602001908152602001600020819055505050565b670de0b6b3a764000081565b6000602160007f36051e26b7ee9ab8bfe79486c0d7a7a2112864a57aa54065540eccb3c4a4452260001c815260200190815260200160002054905090565b620f424081565b6000602160007fe4a4e5425e0f84d8d68c8433df2512e8e48969299d032314614356a42435a73960001c815260200190815260200160002054905090565b7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b7fe01bea03000f908384fec12f1bb9cff12e05a5d91a94bfedd901d5696153a5a360001c81565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611f14612083565b6040518363ffffffff1660e01b8152600401611f31929190612ccb565b602060405180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f729190612d20565b611f8057611f7f8161208b565b5b8473ffffffffffffffffffffffffffffffffffffffff16602160007f36051e26b7ee9ab8bfe79486c0d7a7a2112864a57aa54065540eccb3c4a4452260001c8152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16602160007fe4a4e5425e0f84d8d68c8433df2512e8e48969299d032314614356a42435a73960001c8152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16602160007f6ea4018daf79dd2b85ff55e23caa9708d35a5af81f862526e25c36407a95ad8160001c81526020019081526020016000208190555061207c82611a69565b5050505050565b600033905090565b61209c81612097612083565b612341565b50565b60006120aa83610f57565b90508160226000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6121058282611859565b6121d85760016022600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061217d612083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6121e68282611859565b156122ba5760006022600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061225f612083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6122ee612458565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612336612498565b61233e6124aa565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485483836040518363ffffffff1660e01b815260040161239c929190612ccb565b602060405180830381865afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190612d20565b612454576123ea816124b4565b6123f88360001c60206124e1565b60405160200161240992919061308b565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244b919061310f565b60405180910390fd5b5050565b612460612727565b612496576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6124a0612458565b6124a8612747565b565b6124b2612458565b565b60606124da8273ffffffffffffffffffffffffffffffffffffffff16601460ff166124e1565b9050919050565b60606000839050600060028460026124f99190613160565b61250391906131a2565b67ffffffffffffffff81111561251c5761251b6131d6565b5b6040519080825280601f01601f19166020018201604052801561254e5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061258657612585613205565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106125ea576125e9613205565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600185600261262a9190613160565b61263491906131a2565b90505b60018111156126d4577f3031323334353637383961626364656600000000000000000000000000000000600f84166010811061267657612675613205565b5b1a60f81b82828151811061268d5761268c613205565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600483901c9250806126cd90613234565b9050612637565b506000821461271c5784846040517fe22e27eb00000000000000000000000000000000000000000000000000000000815260040161271392919061325d565b60405180910390fd5b809250505092915050565b60006127316122be565b60000160089054906101000a900460ff16905090565b61274f612458565b6000612759612768565b90506001816000018190555050565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b600082825260208201905092915050565b7f426173653a206e6f7420737570706f7274204d65746973207472616e73666572600082015250565b60006127d7602083612790565b91506127e2826127a1565b602082019050919050565b60006020820190508181036000830152612806816127ca565b9050919050565b600080fd5b600067ffffffffffffffff82169050919050565b61282f81612812565b811461283a57600080fd5b50565b60008135905061284c81612826565b92915050565b6000602082840312156128685761286761280d565b5b60006128768482850161283d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128aa8261287f565b9050919050565b6128ba8161289f565b81146128c557600080fd5b50565b6000813590506128d7816128b1565b92915050565b6000602082840312156128f3576128f261280d565b5b6000612901848285016128c8565b91505092915050565b6000819050919050565b61291d8161290a565b811461292857600080fd5b50565b60008135905061293a81612914565b92915050565b6000602082840312156129565761295561280d565b5b60006129648482850161292b565b91505092915050565b6129768161290a565b82525050565b6000602082019050612991600083018461296d565b92915050565b6000819050919050565b6129aa81612997565b81146129b557600080fd5b50565b6000813590506129c7816129a1565b92915050565b600080604083850312156129e4576129e361280d565b5b60006129f2858286016129b8565b9250506020612a03858286016129b8565b9150509250929050565b612a168161289f565b82525050565b6000602082019050612a316000830184612a0d565b92915050565b600060208284031215612a4d57612a4c61280d565b5b6000612a5b848285016129b8565b91505092915050565b612a6d81612997565b82525050565b6000602082019050612a886000830184612a64565b92915050565b612a9781612812565b82525050565b6000602082019050612ab26000830184612a8e565b92915050565b60008060408385031215612acf57612ace61280d565b5b6000612add858286016129b8565b9250506020612aee858286016128c8565b9150509250929050565b6000819050919050565b6000612b1d612b18612b138461287f565b612af8565b61287f565b9050919050565b6000612b2f82612b02565b9050919050565b6000612b4182612b24565b9050919050565b612b5181612b36565b82525050565b6000602082019050612b6c6000830184612b48565b92915050565b600063ffffffff82169050919050565b612b8b81612b72565b82525050565b6000602082019050612ba66000830184612b82565b92915050565b60008115159050919050565b612bc181612bac565b82525050565b6000602082019050612bdc6000830184612bb8565b92915050565b6000604082019050612bf76000830185612a64565b612c046020830184612bb8565b9392505050565b612c1481612b72565b8114612c1f57600080fd5b50565b600081359050612c3181612c0b565b92915050565b600060208284031215612c4d57612c4c61280d565b5b6000612c5b84828501612c22565b91505092915050565b60008060008060808587031215612c7e57612c7d61280d565b5b6000612c8c878288016128c8565b9450506020612c9d878288016128c8565b9350506040612cae878288016128c8565b9250506060612cbf87828801612c22565b91505092959194509250565b6000604082019050612ce06000830185612a64565b612ced6020830184612a0d565b9392505050565b612cfd81612bac565b8114612d0857600080fd5b50565b600081519050612d1a81612cf4565b92915050565b600060208284031215612d3657612d3561280d565b5b6000612d4484828501612d0b565b91505092915050565b6000604082019050612d626000830185612a8e565b612d6f6020830184612a8e565b9392505050565b7f436f6e6669673a2070726f746f636f6c5472656173757279206973207a65726f60008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b6000612dd2602883612790565b9150612ddd82612d76565b604082019050919050565b60006020820190508181036000830152612e0181612dc5565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612e64602f83612790565b9150612e6f82612e08565b604082019050919050565b60006020820190508181036000830152612e9381612e57565b9050919050565b6000819050919050565b6000612ebf612eba612eb584612e9a565b612af8565b612812565b9050919050565b612ecf81612ea4565b82525050565b6000602082019050612eea6000830184612ec6565b92915050565b7f436f6e6669673a2070726f746f636f6c5472656173757279526174696f206d7560008201527f7374206265206c657373207468616e2031303030300000000000000000000000602082015250565b6000612f4c603583612790565b9150612f5782612ef0565b604082019050919050565b60006020820190508181036000830152612f7b81612f3f565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612fc3601783612f82565b9150612fce82612f8d565b601782019050919050565b600081519050919050565b60005b83811015613002578082015181840152602081019050612fe7565b60008484015250505050565b600061301982612fd9565b6130238185612f82565b9350613033818560208601612fe4565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613075601183612f82565b91506130808261303f565b601182019050919050565b600061309682612fb6565b91506130a2828561300e565b91506130ad82613068565b91506130b9828461300e565b91508190509392505050565b6000601f19601f8301169050919050565b60006130e182612fd9565b6130eb8185612790565b93506130fb818560208601612fe4565b613104816130c5565b840191505092915050565b6000602082019050818103600083015261312981846130d6565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061316b8261290a565b91506131768361290a565b92508282026131848161290a565b9150828204841483151761319b5761319a613131565b5b5092915050565b60006131ad8261290a565b91506131b88361290a565b92508282019050808211156131d0576131cf613131565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061323f8261290a565b91506000820361325257613251613131565b5b600182039050919050565b6000604082019050613272600083018561296d565b61327f602083018461296d565b939250505056fea26469706673582212201fe4b7559061dd97f21ce985c060a884bdc28e6513e1a106dba0ffd9fc81552764736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061028c5760003560e01c806388ef06be1161015a578063bd99d7e1116100c1578063e59745541161007a578063e5974554146109d3578063e63a391f146109fe578063e78cea9214610a29578063f288a2e214610a54578063f9aa973f14610a7f578063fda42e2114610aaa576102cc565b8063bd99d7e1146108c4578063ce04bebb14610902578063d27bc94a1461092d578063d547741f14610956578063de55db9d1461097f578063e52083c6146109a8576102cc565b806397fc71771161011357806397fc7177146107c2578063a217fddf146107ed578063a2be57ad14610818578063a7d6181914610843578063bad1e1391461086e578063bbadf42714610899576102cc565b806388ef06be146106b05780638b587b9c146106db5780638d40bd351461070657806391d148541461072f57806392c2becc1461076c57806397ec19be14610797576102cc565b80633b4c46d0116101fe57806372ef1540116101b757806372ef1540146105c457806375b238fc146105ef57806375fb88141461061a57806379502c5514610643578063803db96d1461066e5780638129fc1c14610699576102cc565b80633b4c46d0146104c45780633b8ad07f146104ed578063475785c7146105185780634d19eaf11461054357806350c4a8a21461056e57806351dded4d14610599576102cc565b8063240598311161025057806324059831146103b4578063248a9ca3146103df5780632d76710b1461041c5780632f2ff15d1461044757806336568abe1461047057806339ee2c3d14610499576102cc565b8063093c4e21146102d15780630c5a61f8146102fa5780630e9429ba146103235780631e4e0091146103605780632195195514610389576102cc565b366102cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c3906127ed565b60405180910390fd5b600080fd5b3480156102dd57600080fd5b506102f860048036038101906102f39190612852565b610ad3565b005b34801561030657600080fd5b50610321600480360381019061031c91906128dd565b610c63565b005b34801561032f57600080fd5b5061034a60048036038101906103459190612940565b610df9565b604051610357919061297c565b60405180910390f35b34801561036c57600080fd5b50610387600480360381019061038291906129cd565b610e11565b005b34801561039557600080fd5b5061039e610ef2565b6040516103ab9190612a1c565b60405180910390f35b3480156103c057600080fd5b506103c9610f30565b6040516103d6919061297c565b60405180910390f35b3480156103eb57600080fd5b5061040660048036038101906104019190612a37565b610f57565b6040516104139190612a73565b60405180910390f35b34801561042857600080fd5b50610431610f77565b60405161043e9190612a9d565b60405180910390f35b34801561045357600080fd5b5061046e60048036038101906104699190612ab8565b610fb5565b005b34801561047c57600080fd5b5061049760048036038101906104929190612ab8565b611096565b005b3480156104a557600080fd5b506104ae611119565b6040516104bb919061297c565b60405180910390f35b3480156104d057600080fd5b506104eb60048036038101906104e691906128dd565b611140565b005b3480156104f957600080fd5b50610502611267565b60405161050f919061297c565b60405180910390f35b34801561052457600080fd5b5061052d61128e565b60405161053a9190612a1c565b60405180910390f35b34801561054f57600080fd5b506105586112cc565b604051610565919061297c565b60405180910390f35b34801561057a57600080fd5b506105836112f3565b604051610590919061297c565b60405180910390f35b3480156105a557600080fd5b506105ae61131a565b6040516105bb919061297c565b60405180910390f35b3480156105d057600080fd5b506105d9611341565b6040516105e6919061297c565b60405180910390f35b3480156105fb57600080fd5b50610604611368565b6040516106119190612a73565b60405180910390f35b34801561062657600080fd5b50610641600480360381019061063c91906128dd565b61138c565b005b34801561064f57600080fd5b506106586114b3565b6040516106659190612b57565b60405180910390f35b34801561067a57600080fd5b506106836114d7565b6040516106909190612a1c565b60405180910390f35b3480156106a557600080fd5b506106ae611515565b005b3480156106bc57600080fd5b506106c56116cd565b6040516106d2919061297c565b60405180910390f35b3480156106e757600080fd5b506106f06116f4565b6040516106fd9190612b91565b60405180910390f35b34801561071257600080fd5b5061072d600480360381019061072891906128dd565b611732565b005b34801561073b57600080fd5b5061075660048036038101906107519190612ab8565b611859565b6040516107639190612bc7565b60405180910390f35b34801561077857600080fd5b506107816118ef565b60405161078e9190612a73565b60405180910390f35b3480156107a357600080fd5b506107ac611913565b6040516107b99190612a1c565b60405180910390f35b3480156107ce57600080fd5b506107d7611951565b6040516107e4919061297c565b60405180910390f35b3480156107f957600080fd5b50610802611978565b60405161080f9190612a73565b60405180910390f35b34801561082457600080fd5b5061082d61197f565b60405161083a9190612a1c565b60405180910390f35b34801561084f57600080fd5b506108586119bd565b604051610865919061297c565b60405180910390f35b34801561087a57600080fd5b506108836119e4565b604051610890919061297c565b60405180910390f35b3480156108a557600080fd5b506108ae611a0b565b6040516108bb919061297c565b60405180910390f35b3480156108d057600080fd5b506108eb60048036038101906108e69190612a37565b611a32565b6040516108f9929190612be2565b60405180910390f35b34801561090e57600080fd5b50610917611a63565b604051610924919061297c565b60405180910390f35b34801561093957600080fd5b50610954600480360381019061094f9190612c37565b611a69565b005b34801561096257600080fd5b5061097d60048036038101906109789190612ab8565b611bcc565b005b34801561098b57600080fd5b506109a660048036038101906109a191906128dd565b611cad565b005b3480156109b457600080fd5b506109bd611dd4565b6040516109ca919061297c565b60405180910390f35b3480156109df57600080fd5b506109e8611de0565b6040516109f59190612a1c565b60405180910390f35b348015610a0a57600080fd5b50610a13611e1e565b604051610a209190612a9d565b60405180910390f35b348015610a3557600080fd5b50610a3e611e25565b604051610a4b9190612a1c565b60405180910390f35b348015610a6057600080fd5b50610a69611e63565b604051610a769190612a73565b60405180910390f35b348015610a8b57600080fd5b50610a94611e87565b604051610aa1919061297c565b60405180910390f35b348015610ab657600080fd5b50610ad16004803603810190610acc9190612c64565b611eae565b005b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482610b39612083565b6040518363ffffffff1660e01b8152600401610b56929190612ccb565b602060405180830381865afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b979190612d20565b610ba557610ba48161208b565b5b6000602160007f1ec8339790254679015c7b4db055ec6bb45de4d3ff3193d766a1cc6ce145728d60001c81526020019081526020016000205490508267ffffffffffffffff16602160007f1ec8339790254679015c7b4db055ec6bb45de4d3ff3193d766a1cc6ce145728d60001c8152602001908152602001600020819055507fc177a0244f4a8707676367719773686001fba49fd7289a82ac5b48ad94c2f6338184604051610c56929190612d4d565b60405180910390a1505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482610cc9612083565b6040518363ffffffff1660e01b8152600401610ce6929190612ccb565b602060405180830381865afa158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190612d20565b610d3557610d348161208b565b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9b90612de8565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16602160007f6ea4018daf79dd2b85ff55e23caa9708d35a5af81f862526e25c36407a95ad8160001c8152602001908152602001600020819055505050565b60216020528060005260406000206000915090505481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482610e77612083565b6040518363ffffffff1660e01b8152600401610e94929190612ccb565b602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190612d20565b610ee357610ee28161208b565b5b610eed838361209f565b505050565b6000602160007ffa6557a51a133888544923dacdca355721a35fbeebe974f1e7d28d3105e033cf60001c815260200190815260200160002054905090565b7fcaa210682aa7d6b03d19b857c87a6e4c61b2ea999c417f0652a36447d144f23860001c81565b600060226000838152602001908152602001600020600101549050919050565b6000602160007f1ec8339790254679015c7b4db055ec6bb45de4d3ff3193d766a1cc6ce145728d60001c815260200190815260200160002054905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148548261101b612083565b6040518363ffffffff1660e01b8152600401611038929190612ccb565b602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110799190612d20565b611087576110868161208b565b5b61109183836120fb565b505050565b61109e612083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461110b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110290612e7a565b60405180910390fd5b61111582826121dc565b5050565b7fe4a4e5425e0f84d8d68c8433df2512e8e48969299d032314614356a42435a73960001c81565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d14854826111a6612083565b6040518363ffffffff1660e01b81526004016111c3929190612ccb565b602060405180830381865afa1580156111e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112049190612d20565b611212576112118161208b565b5b8173ffffffffffffffffffffffffffffffffffffffff16602160007fcaa210682aa7d6b03d19b857c87a6e4c61b2ea999c417f0652a36447d144f23860001c8152602001908152602001600020819055505050565b7f69661401bd068c022c278f73b3789a33e22d5eafe981e9265041b6fe72a122fe60001c81565b6000602160007fb6907c3662b516b409b2dfc811949414b2398912e6fa671912cf81c947d1297660001c815260200190815260200160002054905090565b7f1ec8339790254679015c7b4db055ec6bb45de4d3ff3193d766a1cc6ce145728d60001c81565b7f6fede10a232b276bc7c310abfbe151b58ba2286d825bc9e66c6e5fd488844e1060001c81565b7fb6907c3662b516b409b2dfc811949414b2398912e6fa671912cf81c947d1297660001c81565b7f36051e26b7ee9ab8bfe79486c0d7a7a2112864a57aa54065540eccb3c4a4452260001c81565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d14854826113f2612083565b6040518363ffffffff1660e01b815260040161140f929190612ccb565b602060405180830381865afa15801561142c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114509190612d20565b61145e5761145d8161208b565b5b8173ffffffffffffffffffffffffffffffffffffffff16602160007fb6907c3662b516b409b2dfc811949414b2398912e6fa671912cf81c947d1297660001c8152602001908152602001600020819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000602160007f6ea4018daf79dd2b85ff55e23caa9708d35a5af81f862526e25c36407a95ad8160001c815260200190815260200160002054905090565b600061151f6122be565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561156d5750825b9050600060018367ffffffffffffffff161480156115a2575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156115b0575080155b156115e7576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156116375760018560000160086101000a81548160ff0219169083151502179055505b611640306122e6565b61166a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336120fb565b83156116c65760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516116bd9190612ed5565b60405180910390a15b5050505050565b7ffa6557a51a133888544923dacdca355721a35fbeebe974f1e7d28d3105e033cf60001c81565b6000602160007f6fede10a232b276bc7c310abfbe151b58ba2286d825bc9e66c6e5fd488844e1060001c815260200190815260200160002054905090565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611798612083565b6040518363ffffffff1660e01b81526004016117b5929190612ccb565b602060405180830381865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190612d20565b611804576118038161208b565b5b8173ffffffffffffffffffffffffffffffffffffffff16602160007f69661401bd068c022c278f73b3789a33e22d5eafe981e9265041b6fe72a122fe60001c8152602001908152602001600020819055505050565b60006022600084815260200190815260200160002060020160009054906101000a900460ff16806118e757506022600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b905092915050565b7f25cf2b509f2a7f322675b2a5322b182f44ad2c03ac941a0af17c9b178f5d5d5f81565b6000602160007fcaa210682aa7d6b03d19b857c87a6e4c61b2ea999c417f0652a36447d144f23860001c815260200190815260200160002054905090565b7fe3fb0f89bf43754026f5df1c4a405631deca482f630ed00c4f9897a30ea0764260001c81565b6000801b81565b6000602160007f69661401bd068c022c278f73b3789a33e22d5eafe981e9265041b6fe72a122fe60001c815260200190815260200160002054905090565b7f6ea4018daf79dd2b85ff55e23caa9708d35a5af81f862526e25c36407a95ad8160001c81565b7f454c90bb89af48c9c15cd0acb46e1f05be34b6d27d24973b724e6ff6477e129f60001c81565b7f9fb48ff2476bdf82119573e311cab5a3bbdadc90cac7a17cbe16c403581c2c3060001c81565b60226020528060005260406000206000915090508060010154908060020160009054906101000a900460ff16905082565b60025481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611acf612083565b6040518363ffffffff1660e01b8152600401611aec929190612ccb565b602060405180830381865afa158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d9190612d20565b611b3b57611b3a8161208b565b5b620186a08263ffffffff161115611b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7e90612f62565b60405180910390fd5b8163ffffffff16602160007f6fede10a232b276bc7c310abfbe151b58ba2286d825bc9e66c6e5fd488844e1060001c8152602001908152602001600020819055505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611c32612083565b6040518363ffffffff1660e01b8152600401611c4f929190612ccb565b602060405180830381865afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190612d20565b611c9e57611c9d8161208b565b5b611ca883836121dc565b505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611d13612083565b6040518363ffffffff1660e01b8152600401611d30929190612ccb565b602060405180830381865afa158015611d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d719190612d20565b611d7f57611d7e8161208b565b5b8173ffffffffffffffffffffffffffffffffffffffff16602160007ffa6557a51a133888544923dacdca355721a35fbeebe974f1e7d28d3105e033cf60001c8152602001908152602001600020819055505050565b670de0b6b3a764000081565b6000602160007f36051e26b7ee9ab8bfe79486c0d7a7a2112864a57aa54065540eccb3c4a4452260001c815260200190815260200160002054905090565b620f424081565b6000602160007fe4a4e5425e0f84d8d68c8433df2512e8e48969299d032314614356a42435a73960001c815260200190815260200160002054905090565b7ff66846415d2bf9eabda9e84793ff9c0ea96d87f50fc41e66aa16469c6a442f0581565b7fe01bea03000f908384fec12f1bb9cff12e05a5d91a94bfedd901d5696153a5a360001c81565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482611f14612083565b6040518363ffffffff1660e01b8152600401611f31929190612ccb565b602060405180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f729190612d20565b611f8057611f7f8161208b565b5b8473ffffffffffffffffffffffffffffffffffffffff16602160007f36051e26b7ee9ab8bfe79486c0d7a7a2112864a57aa54065540eccb3c4a4452260001c8152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff16602160007fe4a4e5425e0f84d8d68c8433df2512e8e48969299d032314614356a42435a73960001c8152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16602160007f6ea4018daf79dd2b85ff55e23caa9708d35a5af81f862526e25c36407a95ad8160001c81526020019081526020016000208190555061207c82611a69565b5050505050565b600033905090565b61209c81612097612083565b612341565b50565b60006120aa83610f57565b90508160226000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b6121058282611859565b6121d85760016022600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061217d612083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6121e68282611859565b156122ba5760006022600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061225f612083565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6122ee612458565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612336612498565b61233e6124aa565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485483836040518363ffffffff1660e01b815260040161239c929190612ccb565b602060405180830381865afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190612d20565b612454576123ea816124b4565b6123f88360001c60206124e1565b60405160200161240992919061308b565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244b919061310f565b60405180910390fd5b5050565b612460612727565b612496576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6124a0612458565b6124a8612747565b565b6124b2612458565b565b60606124da8273ffffffffffffffffffffffffffffffffffffffff16601460ff166124e1565b9050919050565b60606000839050600060028460026124f99190613160565b61250391906131a2565b67ffffffffffffffff81111561251c5761251b6131d6565b5b6040519080825280601f01601f19166020018201604052801561254e5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061258657612585613205565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106125ea576125e9613205565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600185600261262a9190613160565b61263491906131a2565b90505b60018111156126d4577f3031323334353637383961626364656600000000000000000000000000000000600f84166010811061267657612675613205565b5b1a60f81b82828151811061268d5761268c613205565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600483901c9250806126cd90613234565b9050612637565b506000821461271c5784846040517fe22e27eb00000000000000000000000000000000000000000000000000000000815260040161271392919061325d565b60405180910390fd5b809250505092915050565b60006127316122be565b60000160089054906101000a900460ff16905090565b61274f612458565b6000612759612768565b90506001816000018190555050565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b600082825260208201905092915050565b7f426173653a206e6f7420737570706f7274204d65746973207472616e73666572600082015250565b60006127d7602083612790565b91506127e2826127a1565b602082019050919050565b60006020820190508181036000830152612806816127ca565b9050919050565b600080fd5b600067ffffffffffffffff82169050919050565b61282f81612812565b811461283a57600080fd5b50565b60008135905061284c81612826565b92915050565b6000602082840312156128685761286761280d565b5b60006128768482850161283d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128aa8261287f565b9050919050565b6128ba8161289f565b81146128c557600080fd5b50565b6000813590506128d7816128b1565b92915050565b6000602082840312156128f3576128f261280d565b5b6000612901848285016128c8565b91505092915050565b6000819050919050565b61291d8161290a565b811461292857600080fd5b50565b60008135905061293a81612914565b92915050565b6000602082840312156129565761295561280d565b5b60006129648482850161292b565b91505092915050565b6129768161290a565b82525050565b6000602082019050612991600083018461296d565b92915050565b6000819050919050565b6129aa81612997565b81146129b557600080fd5b50565b6000813590506129c7816129a1565b92915050565b600080604083850312156129e4576129e361280d565b5b60006129f2858286016129b8565b9250506020612a03858286016129b8565b9150509250929050565b612a168161289f565b82525050565b6000602082019050612a316000830184612a0d565b92915050565b600060208284031215612a4d57612a4c61280d565b5b6000612a5b848285016129b8565b91505092915050565b612a6d81612997565b82525050565b6000602082019050612a886000830184612a64565b92915050565b612a9781612812565b82525050565b6000602082019050612ab26000830184612a8e565b92915050565b60008060408385031215612acf57612ace61280d565b5b6000612add858286016129b8565b9250506020612aee858286016128c8565b9150509250929050565b6000819050919050565b6000612b1d612b18612b138461287f565b612af8565b61287f565b9050919050565b6000612b2f82612b02565b9050919050565b6000612b4182612b24565b9050919050565b612b5181612b36565b82525050565b6000602082019050612b6c6000830184612b48565b92915050565b600063ffffffff82169050919050565b612b8b81612b72565b82525050565b6000602082019050612ba66000830184612b82565b92915050565b60008115159050919050565b612bc181612bac565b82525050565b6000602082019050612bdc6000830184612bb8565b92915050565b6000604082019050612bf76000830185612a64565b612c046020830184612bb8565b9392505050565b612c1481612b72565b8114612c1f57600080fd5b50565b600081359050612c3181612c0b565b92915050565b600060208284031215612c4d57612c4c61280d565b5b6000612c5b84828501612c22565b91505092915050565b60008060008060808587031215612c7e57612c7d61280d565b5b6000612c8c878288016128c8565b9450506020612c9d878288016128c8565b9350506040612cae878288016128c8565b9250506060612cbf87828801612c22565b91505092959194509250565b6000604082019050612ce06000830185612a64565b612ced6020830184612a0d565b9392505050565b612cfd81612bac565b8114612d0857600080fd5b50565b600081519050612d1a81612cf4565b92915050565b600060208284031215612d3657612d3561280d565b5b6000612d4484828501612d0b565b91505092915050565b6000604082019050612d626000830185612a8e565b612d6f6020830184612a8e565b9392505050565b7f436f6e6669673a2070726f746f636f6c5472656173757279206973207a65726f60008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b6000612dd2602883612790565b9150612ddd82612d76565b604082019050919050565b60006020820190508181036000830152612e0181612dc5565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612e64602f83612790565b9150612e6f82612e08565b604082019050919050565b60006020820190508181036000830152612e9381612e57565b9050919050565b6000819050919050565b6000612ebf612eba612eb584612e9a565b612af8565b612812565b9050919050565b612ecf81612ea4565b82525050565b6000602082019050612eea6000830184612ec6565b92915050565b7f436f6e6669673a2070726f746f636f6c5472656173757279526174696f206d7560008201527f7374206265206c657373207468616e2031303030300000000000000000000000602082015250565b6000612f4c603583612790565b9150612f5782612ef0565b604082019050919050565b60006020820190508181036000830152612f7b81612f3f565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000612fc3601783612f82565b9150612fce82612f8d565b601782019050919050565b600081519050919050565b60005b83811015613002578082015181840152602081019050612fe7565b60008484015250505050565b600061301982612fd9565b6130238185612f82565b9350613033818560208601612fe4565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000613075601183612f82565b91506130808261303f565b601182019050919050565b600061309682612fb6565b91506130a2828561300e565b91506130ad82613068565b91506130b9828461300e565b91508190509392505050565b6000601f19601f8301169050919050565b60006130e182612fd9565b6130eb8185612790565b93506130fb818560208601612fe4565b613104816130c5565b840191505092915050565b6000602082019050818103600083015261312981846130d6565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061316b8261290a565b91506131768361290a565b92508282026131848161290a565b9150828204841483151761319b5761319a613131565b5b5092915050565b60006131ad8261290a565b91506131b88361290a565b92508282019050808211156131d0576131cf613131565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061323f8261290a565b91506000820361325257613251613131565b5b600182039050919050565b6000604082019050613272600083018561296d565b61327f602083018461296d565b939250505056fea26469706673582212201fe4b7559061dd97f21ce985c060a884bdc28e6513e1a106dba0ffd9fc81552764736f6c63430008140033",
  "devdoc": {
    "details": "Manages configuration settings and roles for the protocol.",
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "events": {
      "CancelRedemptionFeeSet(uint64,uint64)": {
        "params": {
          "newValue": "new value of `cancelRedemptionFee`",
          "oldValue": "old value of `cancelRedemptionFee`"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MinQueueLengthSecs(uint64,uint64)": {
        "params": {
          "newValue": "new value of `minQueueLengthSecs`",
          "oldValue": "old value of `minQueueLengthSecs`"
        }
      },
      "PausedSet(bool,bool)": {
        "params": {
          "newValue": "new value of `isPaused`",
          "oldValue": "old value of `isPaused`"
        }
      },
      "QueueLengthSecsSet(uint64,uint64)": {
        "params": {
          "newValue": "new value of `queueLengthSecs`",
          "oldValue": "old value of `queueLengthSecs`"
        }
      },
      "ReduceMaturityStakeSecsSet(uint64,uint64)": {
        "params": {
          "newValue": "new value of `reduceMaturityStakeSecs`",
          "oldValue": "old value of `reduceMaturityStakeSecs`"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "bridge()": {
        "details": "Returns the bridge address."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`.",
        "params": {
          "role": "Role identifier."
        },
        "returns": {
          "_0": "Admin role identifier."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`."
      },
      "hasRole(bytes32,address)": {
        "details": "Checks if an account has a specific role.",
        "params": {
          "account": "Address to check.",
          "role": "Role identifier."
        },
        "returns": {
          "_0": "True if the account has the role, false otherwise."
        }
      },
      "initialize()": {
        "details": "Initializes the contract by setting the default admin role to the deployer."
      },
      "l1Dealer()": {
        "details": "Returns the L1 dealer address."
      },
      "metis()": {
        "details": "Returns the Metis address."
      },
      "protocolTreasury()": {
        "details": "Returns the protocol treasury address."
      },
      "protocolTreasuryRatio()": {
        "details": "Returns the protocol treasury ratio."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account.",
        "params": {
          "account": "Address to renounce role for.",
          "role": "Role identifier."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.",
        "params": {
          "account": "Address to revoke role from.",
          "role": "Role identifier."
        }
      },
      "rewardDispatcher()": {
        "details": "Returns the reward dispatcher address."
      },
      "setIntialValues(address,address,address,uint32)": {
        "details": "Sets initial values for the configuration.",
        "params": {
          "_bridge": "Address of the bridge contract.",
          "_metis": "Address of the Metis token.",
          "_protocolTreasury": "Address of the protocol treasury.",
          "_protocolTreasuryRatio": "Ratio for the protocol treasury."
        }
      },
      "setL1Dealer(address)": {
        "details": "Sets the L1 dealer address.",
        "params": {
          "_l1Dealer": "Address of the L1 dealer."
        }
      },
      "setProtocolTreasury(address)": {
        "details": "Sets the protocol treasury address.",
        "params": {
          "_protocolTreasury": "Address of the protocol treasury."
        }
      },
      "setProtocolTreasuryRatio(uint32)": {
        "details": "Sets the protocol treasury ratio.",
        "params": {
          "_protocolTreasuryRatio": "Ratio for the protocol treasury."
        }
      },
      "setQueueLengthSecs(uint64)": {
        "params": {
          "_queueLengthSecs": "queue length in seconds"
        }
      },
      "setRewardDispatcher(address)": {
        "details": "Sets the reward dispatcher address.",
        "params": {
          "_rewardDispatcher": "Address of the reward dispatcher contract."
        }
      },
      "setRoleAdmin(bytes32,bytes32)": {
        "details": "Sets `adminRole` as `role`'s admin role."
      },
      "setVelixVault(address)": {
        "details": "Sets the velixVault address.",
        "params": {
          "_velixVault": "Address of the VelixVault contract."
        }
      },
      "velixVault()": {
        "details": "Returns the velixVault address."
      }
    },
    "title": "Config",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CancelRedemptionFeeSet(uint64,uint64)": {
        "notice": "Emits when `cancelRedemptionFee` is set to `newValue`"
      },
      "MinQueueLengthSecs(uint64,uint64)": {
        "notice": "Emits when `minQueueLengthSecs` is set to `newValue`"
      },
      "PausedSet(bool,bool)": {
        "notice": "Emits when `isPaused` is set to `newValue`"
      },
      "QueueLengthSecsSet(uint64,uint64)": {
        "notice": "Emits when `queueLengthSecs` is set to `newValue`"
      },
      "ReduceMaturityStakeSecsSet(uint64,uint64)": {
        "notice": "Emits when `reduceMaturityStakeSecs` is set to `newValue`"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "The role for the admin"
      },
      "BACKEND_ROLE()": {
        "notice": "The role for the backend"
      },
      "DEFAULT_ADMIN_ROLE()": {
        "notice": "The default admin role"
      },
      "FEE_PRECISION()": {
        "notice": "The precision of the fee"
      },
      "INITIAL_DEPOSIT_AMOUNT()": {
        "notice": "sveMetis vault initial deposit amount"
      },
      "TIMELOCK_ROLE()": {
        "notice": "The role for the tmelock"
      },
      "config()": {
        "notice": "holds the address of the config contract"
      },
      "queueLengthSecs()": {
        "notice": "get queue length in seconds "
      },
      "redemptionQueue()": {
        "notice": "get redemptionQueue address"
      },
      "setQueueLengthSecs(uint64)": {
        "notice": "set queue length in seconds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8305,
        "contract": "contracts/Config.sol:Config",
        "label": "config",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IConfig)10175"
      },
      {
        "astId": 8307,
        "contract": "contracts/Config.sol:Config",
        "label": "internalCalling",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8309,
        "contract": "contracts/Config.sol:Config",
        "label": "_totalAssets",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8449,
        "contract": "contracts/Config.sol:Config",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)30_storage"
      },
      {
        "astId": 8639,
        "contract": "contracts/Config.sol:Config",
        "label": "configMap",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8644,
        "contract": "contracts/Config.sol:Config",
        "label": "_roles",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)8531_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)30_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[30]",
        "numberOfBytes": "960"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConfig)10175": {
        "encoding": "inplace",
        "label": "contract IConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)8531_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Config.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)8531_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)8531_storage": {
        "encoding": "inplace",
        "label": "struct Config.RoleData",
        "members": [
          {
            "astId": 8526,
            "contract": "contracts/Config.sol:Config",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8528,
            "contract": "contracts/Config.sol:Config",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8530,
            "contract": "contracts/Config.sol:Config",
            "label": "allowAll",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}